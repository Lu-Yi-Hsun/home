{
    "docs": [
        {
            "location": "/",
            "text": "Home\n\u00b6\n\n\n\u6211\u7684\u5b78\u7fd2\u7b46\u8a18\u5167\u5bb9\u4f86\u6e90\u53d6\u81ea\uff1a\n\n\n\n\n\n\n\u6797\u8ed2\u7530\u6559\u6388 \u7dda\u4e0a\u8ab2\u7a0b\n\n\n\n\n\n\n\u83ab\u70e6Python\n\n\n\n\n\n\n\u8ad6\u6587\n\n\n\n\n\n\nc\u8a9e\u8a00- jserv (\u9ec3\u656c\u7fa4)\u8001\u5e2b\u7684\u7dda\u4e0a\u8cc7\u6e90\n\n\n\n\n\n\n\u67cf\u7fd4\u6559\u5b78\n\n\n\n\n\n\nMark Chang's Blog\n\n\n\n\n\n\nAuthor's notes\n\u00b6\n\n\nHi, I'm Anson (\n@lu-yi-hsun\n)\n\u00b6\n\n\nversion 2.0",
            "title": "Home"
        },
        {
            "location": "/#home",
            "text": "\u6211\u7684\u5b78\u7fd2\u7b46\u8a18\u5167\u5bb9\u4f86\u6e90\u53d6\u81ea\uff1a    \u6797\u8ed2\u7530\u6559\u6388 \u7dda\u4e0a\u8ab2\u7a0b    \u83ab\u70e6Python    \u8ad6\u6587    c\u8a9e\u8a00- jserv (\u9ec3\u656c\u7fa4)\u8001\u5e2b\u7684\u7dda\u4e0a\u8cc7\u6e90    \u67cf\u7fd4\u6559\u5b78    Mark Chang's Blog",
            "title": "Home"
        },
        {
            "location": "/#authors-notes",
            "text": "",
            "title": "Author's notes"
        },
        {
            "location": "/#hi-im-anson-lu-yi-hsun",
            "text": "version 2.0",
            "title": "Hi, I'm Anson (@lu-yi-hsun)"
        },
        {
            "location": "/5G Network/Note/",
            "text": "5g Network\n\u00b6\n\n\n\u57fa\u790e\n\u00b6\n\n\n3GPP\u6703\u8b70\u6642\u7a0b\n\n\n3GPP\u898f\u683c\u67e5\u8a62\n\n\n\n\n5G \u4e09\u5927\u5834\u666f\uff1aeMBB\u3001mMTC \u548c URLLC\n\n\neMBB \u5c0d\u61c9\u7684\u662f 3D / \u8d85\u9ad8\u6e05\u5f71\u50cf\u7b49\u5927\u6d41\u91cf\u884c\u52d5\u5bec\u983b\u696d\u52d9\n\n\nmMTC \u5c0d\u61c9\u7684\u662f\u5927\u898f\u6a21\u7269\u806f\u7db2\u696d\u52d9\n\n\nURLLC \u5c0d\u61c9\u7684\u662f\u5982\u7121\u4eba\u99d5\u99db\u3001\u5de5\u696d\u81ea\u52d5\u5316\u7b49\u9700\u8981\u4f4e\u6642\u5ef6\u9ad8\u53ef\u9760\u9023\u63a5\u7684\u696d\u52d9\u3002\n\n\nSystem Architecture for the 5G System\n\u00b6\n\n\n\u7de8\u78bc\n\u00b6\n\n\neMBB\n\u00b6\n\n\n\u4fe1\u4ee4\u983b\u9053\n\u00b6\n\n\nPolar CODE\n\n\n\u6578\u64da\u983b\u9053\n\u00b6\n\n\nLDPC\n\n\nmMTC\n\u00b6\n\n\nURLLC\n\u00b6",
            "title": "Note"
        },
        {
            "location": "/5G Network/Note/#5g-network",
            "text": "",
            "title": "5g Network"
        },
        {
            "location": "/5G Network/Note/#_1",
            "text": "3GPP\u6703\u8b70\u6642\u7a0b  3GPP\u898f\u683c\u67e5\u8a62   5G \u4e09\u5927\u5834\u666f\uff1aeMBB\u3001mMTC \u548c URLLC  eMBB \u5c0d\u61c9\u7684\u662f 3D / \u8d85\u9ad8\u6e05\u5f71\u50cf\u7b49\u5927\u6d41\u91cf\u884c\u52d5\u5bec\u983b\u696d\u52d9  mMTC \u5c0d\u61c9\u7684\u662f\u5927\u898f\u6a21\u7269\u806f\u7db2\u696d\u52d9  URLLC \u5c0d\u61c9\u7684\u662f\u5982\u7121\u4eba\u99d5\u99db\u3001\u5de5\u696d\u81ea\u52d5\u5316\u7b49\u9700\u8981\u4f4e\u6642\u5ef6\u9ad8\u53ef\u9760\u9023\u63a5\u7684\u696d\u52d9\u3002",
            "title": "\u57fa\u790e"
        },
        {
            "location": "/5G Network/Note/#system-architecture-for-the-5g-system",
            "text": "",
            "title": "System Architecture for the 5G System"
        },
        {
            "location": "/5G Network/Note/#_2",
            "text": "",
            "title": "\u7de8\u78bc"
        },
        {
            "location": "/5G Network/Note/#embb",
            "text": "",
            "title": "eMBB"
        },
        {
            "location": "/5G Network/Note/#_3",
            "text": "Polar CODE",
            "title": "\u4fe1\u4ee4\u983b\u9053"
        },
        {
            "location": "/5G Network/Note/#_4",
            "text": "LDPC",
            "title": "\u6578\u64da\u983b\u9053"
        },
        {
            "location": "/5G Network/Note/#mmtc",
            "text": "",
            "title": "mMTC"
        },
        {
            "location": "/5G Network/Note/#urllc",
            "text": "",
            "title": "URLLC"
        },
        {
            "location": "/5G Network/System Architecture for the 5G System/",
            "text": "System Architecture for the 5G System\n\u00b6\n\n\nReference\n\u00b6\n\n\nSystem Architecture for the 5G System\n\n\n\u4e0b\u8f09\u898f\u683c\u66f8\n\n\n4.Architecture model and concepts\n\u00b6\n\n\n4.2Architecture reference model\n\u00b6\n\n\n4.2.3 Non-roaming reference architecture\n\u00b6\n\n\n1\n2\nBob -> Alice : hello\nAlice -> Bob : Go Away",
            "title": "System Architecture for the 5G System"
        },
        {
            "location": "/5G Network/System Architecture for the 5G System/#system-architecture-for-the-5g-system",
            "text": "",
            "title": "System Architecture for the 5G System"
        },
        {
            "location": "/5G Network/System Architecture for the 5G System/#reference",
            "text": "System Architecture for the 5G System  \u4e0b\u8f09\u898f\u683c\u66f8",
            "title": "Reference"
        },
        {
            "location": "/5G Network/System Architecture for the 5G System/#4architecture-model-and-concepts",
            "text": "",
            "title": "4.Architecture model and concepts"
        },
        {
            "location": "/5G Network/System Architecture for the 5G System/#42architecture-reference-model",
            "text": "",
            "title": "4.2Architecture reference model"
        },
        {
            "location": "/5G Network/System Architecture for the 5G System/#423-non-roaming-reference-architecture",
            "text": "1\n2 Bob -> Alice : hello\nAlice -> Bob : Go Away",
            "title": "4.2.3 Non-roaming reference architecture"
        },
        {
            "location": "/C/Mix c & ASM/",
            "text": "Mix c & ASM\n\u00b6\n\n\n\u7c21\u4ecb\n\u00b6\n\n\n\u70ba\u4e86\u52a0\u5feb\u6548\u80fd\u8207\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u4f7f\u7528,\u7d44\u5408\u8a9e\u8a00\u8207c\u8a9e\u8a00\u6df7\u548c\u64b0\u5beb\u65b9\u5f0f\n\n\nos:linux(x64)(#e)\n\n\n\u7de8\u8b6f\u5668:gcc\n\n\n\u63a5\u4e0b\u4f86\u7686\u4ee564\u4f4d\u5143linux\u793a\u7bc4\n\n\n\u820732\u4f4d\u5143\u6703\u6709\u6240\u4e0d\u4e00\u6a23\n\n\nLinux system call\n\u00b6\n\n\n\u7b2c\u4e8c\u624b\u8cc7\u6e90\n\n\nSystem call implement location\n\u00b6\n\n\nlinux\u539f\u59cb\u78bc\n\n\n\u4ee5\u4e0b\u8209\u4f8b\uff1a__x64_sys_write\n\n\n\n\n\n\n\u5f9e\nsyscall_64.tbl\n\u5c0b\u627e__x64_sys_write\n\n\n\u6839\u64da\u8a72\u6a94\u6848\u77e5\u9053 __x64_sys_write \u7de8\u865f1 \u6240\u4ee5\u66ab\u5b58\u5668%rax \u586b\u51651\n\n\n\n\n\n\n\u641c\u5c0b\u5be6\u505a\u7684\u51fd\u6578 \n\n\n1\nSYSCALL_DEFINEx\n(\nfunction_name\n,....){...}\n\n\n\n\n\n\n\nfunction_name:write\n\n\nx:\u9019\u500b\u7de8\u865f\u4e0d\u4e00\u5b9a\n\n\n\n\n\n\n\n\n__x64_sys_write\n\n\n__x64_sys_write\u5be6\u505a\u4f4d\u7f6e\n \n\n\u6211\u5011\u770b\u5230ksys_write(fd, buf, count)\u6709\u4e09\u500b\u8b8a\u6578\n\n\u6839\u64daABI\u898f\u5247\u4f9d\u5e8f\u586b\u5165\u66ab\u5b58\u5668\n\nfd %rdi\n\nbuf %rsi\n\ncount %rdx\n\n\n1\n2\n3\n4\nSYSCALL_DEFINE3\n(\nwrite\n,\n \nunsigned\n \nint\n,\n \nfd\n,\n \nconst\n \nchar\n \n__user\n \n*\n,\n \nbuf\n,\nsize_t\n,\n \ncount\n)\n\n\n{\n\n    \nreturn\n \nksys_write\n(\nfd\n,\n \nbuf\n,\n \ncount\n);\n\n\n}\n\n\n\n\n\n\n\n\n\u6839\u64da\u4e0a\u9762\u7b54\u6848\u5efa\u7acb\u6b64\u8868\u683c\n\n\n\u8868\u683c1-1\n\n\n\n\n\n\n\n\n%rax\n\n\nSystem call\n\n\n%rdi\n\n\n%rsi\n\n\n%rdx\n\n\n%r10\n\n\n%r8\n\n\n%r9\n\n\n\n\n\n\n\n\n\n\n1\n\n\n__x64_sys_write\n\n\nfd\n\n\nbuf\n\n\ncount\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u53c3\u8003\u8cc7\u6e90\uff1a\n\n\nC/C++ function definitions without assembly\n\n\nHow can I find the implementations of Linux kernel system calls?\n\n\nlinux system call\n\n\n\u8f38\u51fa\u7bc4\u4f8b\n\u00b6\n\n\nC\u5167\u5d4cASM\n\u00b6\n\n\n\u5be6\u505a\u76f4\u63a5\u547c\u53eblinux system code\n\n\n\u6839\u64da1-1\u8868\u683c\u627e\u5230\u7684\u8cc7\u8a0a\n\n\n\u95dc\u65bc\u6b64\u6bb5\u6307\u4ee4\u70ba\u4ec0\u9ebc\u586b\u51651\u7684\u7406\u7531\n\n\n\"mov $1, %%rdi\\n\"\n\n\n\n\nPrint\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nvoid\n \nprint_asm\n(\nchar\n \n*\narg1\n,\nlong\n \nint\n \nsize\n){\n \n    \n__asm__\n \n(\n\n        \n\"mov $1, %%rax\n\\n\n\"\n//system call \u7de8\u78bc\n\n        \n\"mov $1, %%rdi\n\\n\n\"\n//fd \u8a2d\u5b9a1 \u4ee3\u8868\u628a\u5b57\u4e32\u8f38\u5165/dev/stdout \u9019\u88e1\u5c31\u662f\u87a2\u5e55\u8f38\u51fa\u5730\u65b9\n\n        \n\"mov %0,%%rsi\n\\n\n\"\n//\u8f38\u5165\u5b57\u4e32\u8a18\u61b6\u9ad4\u4f4d\u7f6e\n\n        \n\"mov %1, %%rdx\n\\n\n\"\n \n//\u9019\u88e1\u8f38\u5165\u5b57\u4e32\u9577\u5ea6 ,\u53ef\u4ee5\u8ddf\u8a18\u61b6\u9ad4\u4f4d\u7f6e\u642d\u914d\u4f86\u8f38\u51fa\u5230\u87a2\u5e55\n\n        \n\"syscall\"\n//x64 \u8981\u7528\u6b64\u547c\u53ebsystemcall \u4e0d\u80fd\u5728\u4f7f\u7528int $0x80\n\n        \n:\n\n        \n:\n\"m\"\n \n(\narg1\n),\n\"m\"\n \n(\nsize\n)\n \n//\u8a73\u7d30\u8acb\u53c3\u8003gcc inline asm\n\n    \n);\n\n\n}\n\n\nint\n \nmain\n(\nvoid\n)\n \n{\n\n    \nchar\n \n*\nd\n=\n\"ss\n\\n\n\"\n;\n\n    \nprint_asm\n(\nd\n,\n3\n);\n\n\nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nC & ASM\u6df7\u548c\u7de8\u8b6f\n\u00b6\n\n\nss",
            "title": "Mix c & ASM"
        },
        {
            "location": "/C/Mix c & ASM/#mix-c-asm",
            "text": "",
            "title": "Mix c &amp; ASM"
        },
        {
            "location": "/C/Mix c & ASM/#_1",
            "text": "\u70ba\u4e86\u52a0\u5feb\u6548\u80fd\u8207\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u4f7f\u7528,\u7d44\u5408\u8a9e\u8a00\u8207c\u8a9e\u8a00\u6df7\u548c\u64b0\u5beb\u65b9\u5f0f  os:linux(x64)(#e)  \u7de8\u8b6f\u5668:gcc  \u63a5\u4e0b\u4f86\u7686\u4ee564\u4f4d\u5143linux\u793a\u7bc4  \u820732\u4f4d\u5143\u6703\u6709\u6240\u4e0d\u4e00\u6a23",
            "title": "\u7c21\u4ecb"
        },
        {
            "location": "/C/Mix c & ASM/#linux-system-call",
            "text": "\u7b2c\u4e8c\u624b\u8cc7\u6e90",
            "title": "Linux system call"
        },
        {
            "location": "/C/Mix c & ASM/#system-call-implement-location",
            "text": "linux\u539f\u59cb\u78bc  \u4ee5\u4e0b\u8209\u4f8b\uff1a__x64_sys_write    \u5f9e syscall_64.tbl \u5c0b\u627e__x64_sys_write  \u6839\u64da\u8a72\u6a94\u6848\u77e5\u9053 __x64_sys_write \u7de8\u865f1 \u6240\u4ee5\u66ab\u5b58\u5668%rax \u586b\u51651    \u641c\u5c0b\u5be6\u505a\u7684\u51fd\u6578   1 SYSCALL_DEFINEx ( function_name ,....){...}    function_name:write  x:\u9019\u500b\u7de8\u865f\u4e0d\u4e00\u5b9a     __x64_sys_write  __x64_sys_write\u5be6\u505a\u4f4d\u7f6e   \n\u6211\u5011\u770b\u5230ksys_write(fd, buf, count)\u6709\u4e09\u500b\u8b8a\u6578 \n\u6839\u64daABI\u898f\u5247\u4f9d\u5e8f\u586b\u5165\u66ab\u5b58\u5668 \nfd %rdi \nbuf %rsi \ncount %rdx  1\n2\n3\n4 SYSCALL_DEFINE3 ( write ,   unsigned   int ,   fd ,   const   char   __user   * ,   buf , size_t ,   count )  { \n     return   ksys_write ( fd ,   buf ,   count );  }     \u6839\u64da\u4e0a\u9762\u7b54\u6848\u5efa\u7acb\u6b64\u8868\u683c  \u8868\u683c1-1     %rax  System call  %rdi  %rsi  %rdx  %r10  %r8  %r9      1  __x64_sys_write  fd  buf  count        \u53c3\u8003\u8cc7\u6e90\uff1a  C/C++ function definitions without assembly  How can I find the implementations of Linux kernel system calls?  linux system call",
            "title": "System call implement location"
        },
        {
            "location": "/C/Mix c & ASM/#_2",
            "text": "",
            "title": "\u8f38\u51fa\u7bc4\u4f8b"
        },
        {
            "location": "/C/Mix c & ASM/#casm",
            "text": "\u5be6\u505a\u76f4\u63a5\u547c\u53eblinux system code  \u6839\u64da1-1\u8868\u683c\u627e\u5230\u7684\u8cc7\u8a0a  \u95dc\u65bc\u6b64\u6bb5\u6307\u4ee4\u70ba\u4ec0\u9ebc\u586b\u51651\u7684\u7406\u7531  \"mov $1, %%rdi\\n\"   Print   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 void   print_asm ( char   * arg1 , long   int   size ){  \n     __asm__   ( \n         \"mov $1, %%rax \\n \" //system call \u7de8\u78bc \n         \"mov $1, %%rdi \\n \" //fd \u8a2d\u5b9a1 \u4ee3\u8868\u628a\u5b57\u4e32\u8f38\u5165/dev/stdout \u9019\u88e1\u5c31\u662f\u87a2\u5e55\u8f38\u51fa\u5730\u65b9 \n         \"mov %0,%%rsi \\n \" //\u8f38\u5165\u5b57\u4e32\u8a18\u61b6\u9ad4\u4f4d\u7f6e \n         \"mov %1, %%rdx \\n \"   //\u9019\u88e1\u8f38\u5165\u5b57\u4e32\u9577\u5ea6 ,\u53ef\u4ee5\u8ddf\u8a18\u61b6\u9ad4\u4f4d\u7f6e\u642d\u914d\u4f86\u8f38\u51fa\u5230\u87a2\u5e55 \n         \"syscall\" //x64 \u8981\u7528\u6b64\u547c\u53ebsystemcall \u4e0d\u80fd\u5728\u4f7f\u7528int $0x80 \n         : \n         : \"m\"   ( arg1 ), \"m\"   ( size )   //\u8a73\u7d30\u8acb\u53c3\u8003gcc inline asm \n     );  }  int   main ( void )   { \n     char   * d = \"ss \\n \" ; \n     print_asm ( d , 3 );  return   0 ;  }",
            "title": "C\u5167\u5d4cASM"
        },
        {
            "location": "/C/Mix c & ASM/#c-asm",
            "text": "ss",
            "title": "C &amp; ASM\u6df7\u548c\u7de8\u8b6f"
        },
        {
            "location": "/C/\u6307\u6a19/",
            "text": "\u6307\u6a19\n\u00b6\n\n\n\u4f60\u6240\u4e0d\u77e5\u9053\u7684C\u8a9e\u8a00-\u5b78\u7fd2\u7b46\u8a18\n\n\n\n\nfunction pointer\n\u00b6\n\n\n(*(void(*)())0)()\n\n\n\n\n\n\n\u7528\u9014\n\n\n\u6307\u5411\u5176\u4ed6\u7684\u51fd\u6578 \u9019\u6a23\u5beb\u53ea\u9700\u8981\u4e00\u884c,\u7f3a\u9ede\u4e00\u822c\u4eba\u770b\u4e0d\u61c2\n\n\n\n\n(\n(void(\n)())dd_prt)()\u628afunction pointer \u6307\u5411\u5176\u4ed6\u7684\u51fd\u6578\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n    \n#include\n \n<stdio.h>\n\n    \nvoid\n \ndd\n(\nint\n \na\n){\n\n        \nprintf\n(\n\"%d\"\n,\na\n);\n\n    \n}\n\n    \nint\n \nmain\n()\n\n    \n{\n\n    \nint\n \na\n=\n3\n;\n\n    \nvoid\n \n(\n*\ndd_prt\n)(\nint\n)\n=&\ndd\n;\n//\u5ba3\u544afunction pointer\n\n    \n(\n*\n(\nvoid\n(\n*\n)())\ndd_prt\n)(\n5566\n);\n\n                 \n//^^^^\u9019\u88e1\u53ef\u4ee5\u5beb\u8a18\u61b6\u9ad4\u4f4d\u7f6e(\u6240\u4ee5\u8a72\u4f4d\u7f6e\u6307\u5411dd function\u6240\u4ee5\u6211\u5011\u80fd\u64cd\u4f5cdd)\n\n        \nreturn\n \n0\n;\n\n    \n}\n\n\n\n\n\n\n\n\nlvalue\n\u00b6\n\n\n\n\n\u7528\u9014\n\n\n\u76f4\u63a5\u6539\u52d5\u67d0\u500b\u4f4d\u7f6e\u7684\u8a18\u61b6\u9ad4,\u8b8a\u6578\u7684\u6578\u503c\n\n\n\n\n1\n*\n(\nint32_t\n \n*\n \nconst\n)\n \n(\n0x67a9\n)\n \n=\n \n0xaa6\n;\n\n\n\n\n\n\n\n\n\npointer to pointer **\n\u00b6\n\n\n\n\n\u7528\u9014\n\n\n\u53ef\u4ee5\u8b93\u540d\u7a31\u4e00\u6a23\u4f46\u6307\u5411\u4e0d\u540c\u4f4d\u7f6e\n\n\n\n\nprogram1\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n#include\n \n<stdio.h>\n\n\nint\n \nb\n=\n5278\n;\n\n\nvoid\n \nfunc\n(\nint\n \n**\np\n){\n\n    \n*\np\n=&\nb\n;\n\n\n}\n\n\nint\n \nmain\n(){\n\n    \nint\n \na\n=\n7788\n;\n\n    \nint\n \n*\nname\n=&\na\n;\n\n       \n//^^^\u540d\u7a31\u90fd\u4e00\u6a23\u4f46\u662f\u53ef\u4ee5\u7528func\u9019\u500b\u51fd\u6578\u6307\u5411\u5176\u4ed6\u8b8a\u6578\n\n    \nfunc\n(\n&\nname\n);\n\n    \nprintf\n(\n\"%d\"\n,\n*\nname\n);\n\n\n}\n\n\n\n\n\n\nprogram2\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n#include\n \n<stdio.h>\n\n\n\nint\n \nb\n=\n5278\n;\n\n\nvoid\n \nfunc\n(\nint\n \n*\nname\n){\n\n    \n*\nname\n=\nb\n;\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n\nint\n \nname\n=\n7788\n;\n\n\nfunc\n(\n&\nname\n);\n\n    \nprintf\n(\n\"%d\"\n,\nname\n);\n\n\n}\n\n\n\n\n\n\n\n\n\u5230\u5e95program1\u548cprogram2\u6709\u4ec0\u9ebc\u5dee\u5225?\n\n\nprogram1 \n\n\n\nprogram2",
            "title": "\u6307\u6a19"
        },
        {
            "location": "/C/\u6307\u6a19/#_1",
            "text": "\u4f60\u6240\u4e0d\u77e5\u9053\u7684C\u8a9e\u8a00-\u5b78\u7fd2\u7b46\u8a18",
            "title": "\u6307\u6a19"
        },
        {
            "location": "/C/\u6307\u6a19/#function-pointer",
            "text": "(*(void(*)())0)()    \u7528\u9014  \u6307\u5411\u5176\u4ed6\u7684\u51fd\u6578 \u9019\u6a23\u5beb\u53ea\u9700\u8981\u4e00\u884c,\u7f3a\u9ede\u4e00\u822c\u4eba\u770b\u4e0d\u61c2   ( (void( )())dd_prt)()\u628afunction pointer \u6307\u5411\u5176\u4ed6\u7684\u51fd\u6578  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12      #include   <stdio.h> \n     void   dd ( int   a ){ \n         printf ( \"%d\" , a ); \n     } \n     int   main () \n     { \n     int   a = 3 ; \n     void   ( * dd_prt )( int ) =& dd ; //\u5ba3\u544afunction pointer \n     ( * ( void ( * )()) dd_prt )( 5566 ); \n                  //^^^^\u9019\u88e1\u53ef\u4ee5\u5beb\u8a18\u61b6\u9ad4\u4f4d\u7f6e(\u6240\u4ee5\u8a72\u4f4d\u7f6e\u6307\u5411dd function\u6240\u4ee5\u6211\u5011\u80fd\u64cd\u4f5cdd) \n         return   0 ; \n     }",
            "title": "function pointer"
        },
        {
            "location": "/C/\u6307\u6a19/#lvalue",
            "text": "\u7528\u9014  \u76f4\u63a5\u6539\u52d5\u67d0\u500b\u4f4d\u7f6e\u7684\u8a18\u61b6\u9ad4,\u8b8a\u6578\u7684\u6578\u503c   1 * ( int32_t   *   const )   ( 0x67a9 )   =   0xaa6 ;",
            "title": "lvalue"
        },
        {
            "location": "/C/\u6307\u6a19/#pointer-to-pointer",
            "text": "\u7528\u9014  \u53ef\u4ee5\u8b93\u540d\u7a31\u4e00\u6a23\u4f46\u6307\u5411\u4e0d\u540c\u4f4d\u7f6e   program1  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 #include   <stdio.h>  int   b = 5278 ;  void   func ( int   ** p ){ \n     * p =& b ;  }  int   main (){ \n     int   a = 7788 ; \n     int   * name =& a ; \n        //^^^\u540d\u7a31\u90fd\u4e00\u6a23\u4f46\u662f\u53ef\u4ee5\u7528func\u9019\u500b\u51fd\u6578\u6307\u5411\u5176\u4ed6\u8b8a\u6578 \n     func ( & name ); \n     printf ( \"%d\" , * name );  }    program2  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 #include   <stdio.h>  int   b = 5278 ;  void   func ( int   * name ){ \n     * name = b ;  }  int   main ()  {  int   name = 7788 ;  func ( & name ); \n     printf ( \"%d\" , name );  }     \u5230\u5e95program1\u548cprogram2\u6709\u4ec0\u9ebc\u5dee\u5225?  program1   \nprogram2",
            "title": "pointer to pointer **"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/",
            "text": "\u9ad8\u6548\u80fdc\n\u00b6\n\n\n\u7c21\u4ecb\uff1a\n\u00b6\n\n\n\u70ba\u4e86\u8ffd\u6c42\u75c5\u614b\u6548\u80fd\u6f54\u7656\n\u9700\u8981\u5148\u770b\u904e\nMix c & ASM\n\n\nlatency&CPI\n\n\nIntel \u6307\u4ee4\u96c6\n\n\n\u9ad8\u6548\u80fd\u53c3\u8003\u7db2\u7ad9\n\n\n\u524d\u88fd\u4f5c\u696d\n\u00b6\n\n\n\u6e2c\u8a66\u5e73\u53f0\u898f\u683c\n\u00b6\n\n\n\n\n\n\n\n\n\u898f\u683c\n\n\n\u53c3\u6578\n\n\n\n\n\n\n\n\n\n\nCompiler\n\n\ngcc (GCC) 8.1.0\n\n\n\n\n\n\nArchitecture:\n\n\nx86_64\n\n\n\n\n\n\nCPU op-mode(s):\n\n\n32-bit, 64-bit\n\n\n\n\n\n\nByte Order:\n\n\nLittle Endian\n\n\n\n\n\n\nCPU(s):\n\n\n4\n\n\n\n\n\n\nOn-line CPU(s) list:\n\n\n0-3\n\n\n\n\n\n\nThread(s) per core:\n\n\n2\n\n\n\n\n\n\nCore(s) per socket:\n\n\n2\n\n\n\n\n\n\nSocket(s):\n\n\n1\n\n\n\n\n\n\nNUMA node(s):\n\n\n1\n\n\n\n\n\n\nVendor ID:\n\n\nGenuineIntel\n\n\n\n\n\n\nCPU family:\n\n\n6\n\n\n\n\n\n\nModel:\n\n\n61\n\n\n\n\n\n\nModel name:\n\n\nIntel(R) Core(TM) i7-5500U CPU @ 2.40GHz\n\n\n\n\n\n\nStepping:\n\n\n4\n\n\n\n\n\n\nCPU MHz:\n\n\n2702.991\n\n\n\n\n\n\nCPU max MHz:\n\n\n3000.0000\n\n\n\n\n\n\nCPU min MHz:\n\n\n500.0000\n\n\n\n\n\n\nBogoMIPS:\n\n\n4790.41\n\n\n\n\n\n\nVirtualization:\n\n\nVT-x\n\n\n\n\n\n\nL1d cache:\n\n\n32K\n\n\n\n\n\n\nL1i cache:\n\n\n32K\n\n\n\n\n\n\nL2 cache:\n\n\n256K\n\n\n\n\n\n\nL3 cache:\n\n\n4096K\n\n\n\n\n\n\nNUMA node0 CPU(s):\n\n\n0-3\n\n\n\n\n\n\nFlags:\n\n\nfpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cplvmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb invpcid_single pti tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdseed adx smapintel_pt xsaveopt ibpb ibrs stibp dtherm ida arat pln pts\n\n\n\n\n\n\n\n\n\u6e2c\u8a66\u6642\u9593\u7a0b\u5f0f\n\u00b6\n\n\n\n\nTimespec\n\n\ntv_sec:1970\u5230\u73fe\u5728\u7684\u79d2\u6578\n\n\ntv_nsec:\u5728tv_sec\u8a72\u79d2\u6578\u5167\u53c8\u8d70\u4e86\u591a\u5c11\u5948\u79d2\n\n\n1970\u5230\u73fe\u5728\u7684\u5948\u79d2=tv_sec*10e9+tv_nsec\n\n\n\n\n1\n2\n3\n4\n5\nstruct\n \ntimespec\n \n\n{\n\n    \ntime_t\n   \ntv_sec\n;\n        \n/* seconds */\n\n    \nlong\n     \ntv_nsec\n;\n       \n/* nanoseconds */\n\n\n};\n\n\n\n\n\n\n\nCode\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n#include\n \n<time.h>\n\n\n#include\n \n<stdio.h>\n\n\n\ndouble\n \ndiff_in_sec\n(\nstruct\n \ntimespec\n,\nstruct\n \ntimespec\n);\n\n\nlong\n \ndiff_in_nsec\n(\nstruct\n \ntimespec\n,\nstruct\n \ntimespec\n);\n\n\n\ndouble\n \ndiff_in_sec\n(\nstruct\n \ntimespec\n \nt1\n,\n \nstruct\n \ntimespec\n \nt2\n)\n\n\n{\n\n    \nlong\n \ndiff\n=\ndiff_in_nsec\n(\nt1\n,\nt2\n);\n\n    \nreturn\n \n(\ndiff\n/\n10e9\n);\n\n\n}\n\n\n\nlong\n \ndiff_in_nsec\n(\nstruct\n \ntimespec\n \nstart\n,\n \nstruct\n \ntimespec\n \nend\n)\n\n\n{\n\n    \nreturn\n \n(\nend\n.\ntv_sec\n*\n10e9\n+\nend\n.\ntv_nsec\n)\n-\n(\nstart\n.\ntv_sec\n*\n10e9\n+\nstart\n.\ntv_nsec\n);\n \n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nstruct\n \ntimespec\n \nstart_time\n,\nend_time\n;\n\n\n    \nclock_gettime\n(\nCLOCK_REALTIME\n,\n \n&\nstart_time\n);\n\n    \nfor\n(\nint\n \ni\n=\n0\n;\ni\n<\n100000000\n;\ni\n++\n){\n\n        \n//Do Something\n\n    \n}\n\n    \nclock_gettime\n(\nCLOCK_REALTIME\n,\n \n&\nend_time\n);\n\n\n    \nprintf\n(\n\"resolution: %.10lfs\n\\n\n\"\n,\ndiff_in_sec\n(\nstart_time\n,\nend_time\n));\n\n    \nprintf\n(\n\"resolution: %ldns\"\n,\ndiff_in_nsec\n(\nstart_time\n,\nend_time\n));\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\n\nCpu\n\u00b6\n\n\nCache\n\u00b6\n\n\nCache info\n\u00b6\n\n\ncache info\n1\n2\n3\n\n\nlinux kernel cache info \n4\n\n\n1\ngrep . /sys/devices/system/cpu/cpu0/cache/index*/*\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n/**\n\n\n * struct cacheinfo - represent a cache leaf node\n\n\n * @id: This cache's id. It is unique among caches with the same (type, level).\n\n\n * @type: type of the cache - data, inst or unified\n\n\n * @level: represents the hierarchy in the multi-level cache\n\n\n * @coherency_line_size: size of each cache line usually representing\n\n\n *  the minimum amount of data that gets transferred from memory\n\n\n * @number_of_sets: total number of sets, a set is a collection of cache\n\n\n *  lines sharing the same index\n\n\n * @ways_of_associativity: number of ways in which a particular memory\n\n\n *  block can be placed in the cache\n\n\n * @physical_line_partition: number of physical cache lines sharing the\n\n\n *  same cachetag\n\n\n * @size: Total size of the cache\n\n\n * @shared_cpu_map: logical cpumask representing all the cpus sharing\n\n\n *  this cache node\n\n\n * @attributes: bitfield representing various cache attributes\n\n\n * @fw_token: Unique value used to determine if different cacheinfo\n\n\n *  structures represent a single hardware cache instance.\n\n\n * @disable_sysfs: indicates whether this node is visible to the user via\n\n\n *  sysfs or not\n\n\n * @priv: pointer to any private data structure specific to particular\n\n\n *  cache design\n\n\n *\n\n\n * While @of_node, @disable_sysfs and @priv are used for internal book\n\n\n * keeping, the remaining members form the core properties of the cache\n\n\n */\n\n\n\n\n\n\n\n\nFalse Sharing\n\u00b6\n\n\n\n\nFalse_sharing\n\n\n1\n2\n3\n4\n5\nstruct\n \nfoo\n \n{\n\n    \nint\n \nx\n;\n\n    \n//char xx[60];\n\n    \nint\n \ny\n;\n  \n    \n};\n\n\n\n\n\n\n\n\n\n\n\nSharing\n\n\n1\n2\n3\n4\n5\nstruct\n \nfoo\n \n{\n\n    \nint\n \nx\n;\n\n    \nchar\n \nxx\n[\n60\n];\n\n    \nint\n \ny\n;\n  \n    \n};\n\n\n\n\n\n\n\n\n\nFull_code\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n#include\n \n<time.h>\n\n\n#include\n \n<stdio.h>\n\n\n#include\n \n<pthread.h>\n\n\n\ndouble\n \ndiff_in_sec\n(\nstruct\n \ntimespec\n,\nstruct\n \ntimespec\n);\n\n\nlong\n \ndiff_in_nsec\n(\nstruct\n \ntimespec\n,\nstruct\n \ntimespec\n);\n\n\n\ndouble\n \ndiff_in_sec\n(\nstruct\n \ntimespec\n \nt1\n,\n \nstruct\n \ntimespec\n \nt2\n)\n\n\n{\n\n    \nlong\n \ndiff\n=\ndiff_in_nsec\n(\nt1\n,\nt2\n);\n\n    \nreturn\n \n(\ndiff\n/\n10e9\n);\n\n\n}\n\n\n\nlong\n \ndiff_in_nsec\n(\nstruct\n \ntimespec\n \nstart\n,\n \nstruct\n \ntimespec\n \nend\n)\n\n\n{\n\n    \nreturn\n \n(\nend\n.\ntv_sec\n*\n10e9\n+\nend\n.\ntv_nsec\n)\n-\n(\nstart\n.\ntv_sec\n*\n10e9\n+\nstart\n.\ntv_nsec\n);\n \n\n}\n\n\n\nstruct\n \nfoo\n \n{\n\n\nint\n \nx\n;\n\n\n//__________________\n\n\n//char xx[60];  //comment out this line will be False sharing\n\n\n//__________________\n\n\nint\n \ny\n;\n  \n\n};\n//__attribute__((align(64)));__attribute__((packed));\n\n\nstatic\n \nstruct\n \nfoo\n \nf\n;\n\n\nint\n \nsum_a\n(\nvoid\n)\n\n\n{\n\n    \nint\n \ns\n \n=\n \n0\n;\n\n    \nint\n \ni\n;\n\n    \nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n<\n \n1000000000\n;\n \n++\ni\n)\n\n        \ns\n \n+=\n \nf\n.\nx\n;\n\n    \nreturn\n \ns\n;\n\n\n}\n\n\nvoid\n \ninc_b\n(\nvoid\n)\n\n\n{\n\n    \nint\n \ni\n;\n\n    \nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n<\n \n1000000000\n;\n \n++\ni\n)\n\n        \n++\nf\n.\ny\n;\n\n\n}\n\n\n\nt\n(){\n\n\npthread_t\n \nid\n;\n\n\npthread_create\n(\n&\nid\n,\nNULL\n,(\nvoid\n \n*\n)\n \nsum_a\n,\nNULL\n);\n\n\npthread_t\n \nid2\n;\n  \n\npthread_create\n(\n&\nid2\n,\nNULL\n,(\nvoid\n \n*\n)\n \ninc_b\n,\nNULL\n);\n\n\npthread_join\n(\nid\n,\nNULL\n);\n\n\npthread_join\n(\nid2\n,\nNULL\n);\n\n\n}\n\n\n/*TODO:mode*/\n\n\no\n(){\n\n\nsum_a\n();\n\n\ninc_b\n();\n\n\n}\n\n\nvoid\n \nmain\n(){\n\n\nprintf\n(\n\"%d\n\\n\n\"\n,\nsizeof\n(\nf\n));\n\n\nstruct\n \ntimespec\n \nstart_time\n,\nend_time\n;\n\n\nclock_gettime\n(\nCLOCK_REALTIME\n,\n \n&\nstart_time\n);\n\n\nt\n();\n\n\nclock_gettime\n(\nCLOCK_REALTIME\n,\n \n&\nend_time\n);\n\n\nprintf\n(\n\"%.10lfs\n\\t\n%ldns\"\n,\ndiff_in_sec\n(\nstart_time\n,\nend_time\n),\ndiff_in_nsec\n(\nstart_time\n,\nend_time\n));\n\n\n\n\n}\n\n\n\n\n\n\ncompiler&run\n\n1\n2\ngcc -o file file.c -pthread\n./file\n\n\n\n\n\n\n\n\n\n\n\n\n\nSharing\n\n\nFalse sharing\n\n\n\n\n\n\n\n\n\n\ndelay(s)\n\n\n2.947s\n\n\n8.005s\n\n\n\n\n\n\n\n\n\n\nMemory\n\u00b6\n\n\npadding\n\u00b6\n\n\ngcc will auto padding in 32bit\n\n\npadding for 64bit system\n\n1\n2\n3\n4\n5\nstruct\n \nfoo\n \n{\n\n\nint\n \nx\n;\n\n\nchar\n \nxx\n[\n1\n];\n\n\nint\n \ny\n;\n  \n\n}\n__attribute__\n((\nalign\n(\n64\n)));\n\n\n\n\n\n\ngcc without padding\n\n\n1\n2\n3\n4\n5\nstruct\n \nfoo\n \n{\n\n\nint\n \nx\n;\n\n\nchar\n \nxx\n[\n1\n];\n\n\nint\n \ny\n;\n  \n\n}\n__attribute__\n((\npacked\n));\n\n\n\n\n\n\n\n\nISA Extensions(\u64f4\u5c55\u6307\u4ee4\u96c6)\n\u00b6\n\n\nIntel ISA Extensions\n\n\n\n\n\n\n\n\n\n\nhttps://stackoverflow.com/a/716229/9441803\n\u00a0\n\u21a9\n\n\n\n\n\n\nhttps://lwn.net/Articles/254445/\n\u00a0\n\u21a9\n\n\n\n\n\n\nhttps://www.findhao.net/easycoding/1694\n\u00a0\n\u21a9\n\n\n\n\n\n\nhttps://github.com/torvalds/linux/blob/master/include/linux/cacheinfo.h#L20-L46\n\u00a0\n\u21a9",
            "title": "\u9ad8\u6548\u80fdc"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#c",
            "text": "",
            "title": "\u9ad8\u6548\u80fdc"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#_1",
            "text": "\u70ba\u4e86\u8ffd\u6c42\u75c5\u614b\u6548\u80fd\u6f54\u7656\n\u9700\u8981\u5148\u770b\u904e Mix c & ASM  latency&CPI  Intel \u6307\u4ee4\u96c6  \u9ad8\u6548\u80fd\u53c3\u8003\u7db2\u7ad9",
            "title": "\u7c21\u4ecb\uff1a"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#_2",
            "text": "",
            "title": "\u524d\u88fd\u4f5c\u696d"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#_3",
            "text": "\u898f\u683c  \u53c3\u6578      Compiler  gcc (GCC) 8.1.0    Architecture:  x86_64    CPU op-mode(s):  32-bit, 64-bit    Byte Order:  Little Endian    CPU(s):  4    On-line CPU(s) list:  0-3    Thread(s) per core:  2    Core(s) per socket:  2    Socket(s):  1    NUMA node(s):  1    Vendor ID:  GenuineIntel    CPU family:  6    Model:  61    Model name:  Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz    Stepping:  4    CPU MHz:  2702.991    CPU max MHz:  3000.0000    CPU min MHz:  500.0000    BogoMIPS:  4790.41    Virtualization:  VT-x    L1d cache:  32K    L1i cache:  32K    L2 cache:  256K    L3 cache:  4096K    NUMA node0 CPU(s):  0-3    Flags:  fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cplvmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb invpcid_single pti tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdseed adx smapintel_pt xsaveopt ibpb ibrs stibp dtherm ida arat pln pts",
            "title": "\u6e2c\u8a66\u5e73\u53f0\u898f\u683c"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#_4",
            "text": "Timespec  tv_sec:1970\u5230\u73fe\u5728\u7684\u79d2\u6578  tv_nsec:\u5728tv_sec\u8a72\u79d2\u6578\u5167\u53c8\u8d70\u4e86\u591a\u5c11\u5948\u79d2  1970\u5230\u73fe\u5728\u7684\u5948\u79d2=tv_sec*10e9+tv_nsec   1\n2\n3\n4\n5 struct   timespec   { \n     time_t     tv_sec ;          /* seconds */ \n     long       tv_nsec ;         /* nanoseconds */  };    Code  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 #include   <time.h>  #include   <stdio.h>  double   diff_in_sec ( struct   timespec , struct   timespec );  long   diff_in_nsec ( struct   timespec , struct   timespec );  double   diff_in_sec ( struct   timespec   t1 ,   struct   timespec   t2 )  { \n     long   diff = diff_in_nsec ( t1 , t2 ); \n     return   ( diff / 10e9 );  }  long   diff_in_nsec ( struct   timespec   start ,   struct   timespec   end )  { \n     return   ( end . tv_sec * 10e9 + end . tv_nsec ) - ( start . tv_sec * 10e9 + start . tv_nsec );   }  int   main ()  { \n     struct   timespec   start_time , end_time ; \n\n     clock_gettime ( CLOCK_REALTIME ,   & start_time ); \n     for ( int   i = 0 ; i < 100000000 ; i ++ ){ \n         //Do Something \n     } \n     clock_gettime ( CLOCK_REALTIME ,   & end_time ); \n\n     printf ( \"resolution: %.10lfs \\n \" , diff_in_sec ( start_time , end_time )); \n     printf ( \"resolution: %ldns\" , diff_in_nsec ( start_time , end_time )); \n     return   0 ;  }",
            "title": "\u6e2c\u8a66\u6642\u9593\u7a0b\u5f0f"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#cpu",
            "text": "",
            "title": "Cpu"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#cache",
            "text": "",
            "title": "Cache"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#cache-info",
            "text": "cache info 1 2 3  linux kernel cache info  4  1 grep . /sys/devices/system/cpu/cpu0/cache/index*/*    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 /**   * struct cacheinfo - represent a cache leaf node   * @id: This cache's id. It is unique among caches with the same (type, level).   * @type: type of the cache - data, inst or unified   * @level: represents the hierarchy in the multi-level cache   * @coherency_line_size: size of each cache line usually representing   *  the minimum amount of data that gets transferred from memory   * @number_of_sets: total number of sets, a set is a collection of cache   *  lines sharing the same index   * @ways_of_associativity: number of ways in which a particular memory   *  block can be placed in the cache   * @physical_line_partition: number of physical cache lines sharing the   *  same cachetag   * @size: Total size of the cache   * @shared_cpu_map: logical cpumask representing all the cpus sharing   *  this cache node   * @attributes: bitfield representing various cache attributes   * @fw_token: Unique value used to determine if different cacheinfo   *  structures represent a single hardware cache instance.   * @disable_sysfs: indicates whether this node is visible to the user via   *  sysfs or not   * @priv: pointer to any private data structure specific to particular   *  cache design   *   * While @of_node, @disable_sysfs and @priv are used for internal book   * keeping, the remaining members form the core properties of the cache   */",
            "title": "Cache info"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#false-sharing",
            "text": "False_sharing  1\n2\n3\n4\n5 struct   foo   { \n     int   x ; \n     //char xx[60]; \n     int   y ;   \n     };      Sharing  1\n2\n3\n4\n5 struct   foo   { \n     int   x ; \n     char   xx [ 60 ]; \n     int   y ;   \n     };     Full_code  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64 #include   <time.h>  #include   <stdio.h>  #include   <pthread.h>  double   diff_in_sec ( struct   timespec , struct   timespec );  long   diff_in_nsec ( struct   timespec , struct   timespec );  double   diff_in_sec ( struct   timespec   t1 ,   struct   timespec   t2 )  { \n     long   diff = diff_in_nsec ( t1 , t2 ); \n     return   ( diff / 10e9 );  }  long   diff_in_nsec ( struct   timespec   start ,   struct   timespec   end )  { \n     return   ( end . tv_sec * 10e9 + end . tv_nsec ) - ( start . tv_sec * 10e9 + start . tv_nsec );   }  struct   foo   {  int   x ;  //__________________  //char xx[60];  //comment out this line will be False sharing  //__________________  int   y ;    }; //__attribute__((align(64)));__attribute__((packed));  static   struct   foo   f ;  int   sum_a ( void )  { \n     int   s   =   0 ; \n     int   i ; \n     for   ( i   =   0 ;   i   <   1000000000 ;   ++ i ) \n         s   +=   f . x ; \n     return   s ;  }  void   inc_b ( void )  { \n     int   i ; \n     for   ( i   =   0 ;   i   <   1000000000 ;   ++ i ) \n         ++ f . y ;  }  t (){  pthread_t   id ;  pthread_create ( & id , NULL ,( void   * )   sum_a , NULL );  pthread_t   id2 ;    pthread_create ( & id2 , NULL ,( void   * )   inc_b , NULL );  pthread_join ( id , NULL );  pthread_join ( id2 , NULL );  }  /*TODO:mode*/  o (){  sum_a ();  inc_b ();  }  void   main (){  printf ( \"%d \\n \" , sizeof ( f ));  struct   timespec   start_time , end_time ;  clock_gettime ( CLOCK_REALTIME ,   & start_time );  t ();  clock_gettime ( CLOCK_REALTIME ,   & end_time );  printf ( \"%.10lfs \\t %ldns\" , diff_in_sec ( start_time , end_time ), diff_in_nsec ( start_time , end_time ));  }    compiler&run 1\n2 gcc -o file file.c -pthread\n./file       Sharing  False sharing      delay(s)  2.947s  8.005s",
            "title": "False Sharing"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#memory",
            "text": "",
            "title": "Memory"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#padding",
            "text": "gcc will auto padding in 32bit  padding for 64bit system 1\n2\n3\n4\n5 struct   foo   {  int   x ;  char   xx [ 1 ];  int   y ;    } __attribute__ (( align ( 64 )));    gcc without padding  1\n2\n3\n4\n5 struct   foo   {  int   x ;  char   xx [ 1 ];  int   y ;    } __attribute__ (( packed ));",
            "title": "padding"
        },
        {
            "location": "/C/\u9ad8\u6548\u80fdc/#isa-extensions",
            "text": "Intel ISA Extensions      https://stackoverflow.com/a/716229/9441803 \u00a0 \u21a9    https://lwn.net/Articles/254445/ \u00a0 \u21a9    https://www.findhao.net/easycoding/1694 \u00a0 \u21a9    https://github.com/torvalds/linux/blob/master/include/linux/cacheinfo.h#L20-L46 \u00a0 \u21a9",
            "title": "ISA Extensions(\u64f4\u5c55\u6307\u4ee4\u96c6)"
        },
        {
            "location": "/CUDA/sample/",
            "text": "lrarning by sample\n\u00b6\n\n\n\u8cc7\u6599\u4f86\u6e90\n\u00b6\n\n\nhttps://devblogs.nvidia.com/even-easier-introduction-cuda/",
            "title": "lrarning by sample"
        },
        {
            "location": "/CUDA/sample/#lrarning-by-sample",
            "text": "",
            "title": "lrarning by sample"
        },
        {
            "location": "/CUDA/sample/#_1",
            "text": "https://devblogs.nvidia.com/even-easier-introduction-cuda/",
            "title": "\u8cc7\u6599\u4f86\u6e90"
        },
        {
            "location": "/Computer Organization/The Hardware Software Interface/",
            "text": "Computer Organization and Design: The Hardware/Software Interface\n\u00b6\n\n\nPreface\n\u00b6\n\n\nAbout This Book\n\u00b6\n\n\n\u5118\u7ba1\u7a0b\u5e8f\u54e1\u53ef\u4ee5\u5ffd\u7565\u9019\u4e9b\u5efa\u8b70\uff0c\u4e26\u4f9d\u9760\u8a08\u7b97\u6a5f\u67b6\u69cb\u5e2b\uff0c\u7de8\u8b6f\u5668\u7de8\u5beb\u4eba\u54e1\u548c\u82af\u7247\u5de5\u7a0b\u5e2b\u4f86\u4f7f\u4ed6\u5011\u7684\u7a0b\u5e8f\u904b\u884c\u5f97\u66f4\u5feb\u6216\u662f\u66f4\u7bc0\u80fd\uff0c\u4f46\u90a3\u500b\u6642\u4ee3\u5df2\u7d93\u7d50\u675f.\n\n\n\n\nWhile programmers could ignore the advice and rely on computer architects, compiler writers, and silicon engineers to make their programs run faster or be more energy-effi cient without change, that era is over.\n\n\n\n\n\u6211\u5011\u7684\u89c0\u9ede\u662f\uff0c\u81f3\u5c11\u5728\u672a\u4f86\u5341\u5e74\uff0c\u5982\u679c\u7a0b\u5e8f\u54e1\u5e0c\u671b\u7a0b\u5e8f\u5728\u4e26\u884c\u8a08\u7b97\u6a5f\u4e0a\u9ad8\u6548\u904b\u884c\uff0c\u5927\u591a\u6578\u7a0b\u5e8f\u54e1\u5c07\u4e0d\u5f97\u4e0d\u4e86\u89e3\u786c\u4ef6/\u8edf\u4ef6\u63a5\u53e3, \u6211\u5011\u7684\u89c0\u9ede\u662f\uff0c\u81f3\u5c11\u5728\u672a\u4f86\u7684\u5341\u5e74\u4e2d\uff0c\u5927\u591a\u6578\u7a0b\u5e8f\u54e1\u5c07\u4e0d\u5f97\u4e0d\u4e86\u89e3\u786c\u4ef6/\u8edf\u4ef6\u4e0d\u50c5\u754c\u9762\uff0c\u5982\u679c\u4ed6\u5011\u60f3\u7684\u65b9\u6848\u5728\u4e26\u884c\u8a08\u7b97\u6a5f\u4e0a\u9ad8\u6548\u904b\u884c.\n\n\n\n\nOur view is that for at least the next decade, most programmers are going to have to understand the hardware/soft ware interface if they want programs to run efficiently on parallel computers.\n\n\n\n\n1.Computer Abstractions and Technology\n\u00b6\n\n\n1.1 introduction\n\u00b6\n\n\n\u4ecb\u7d39\u96fb\u8166\n\n\n\n\npersonal computer (PC)\n\n\nServers\n\n\nsupercomputer\n\n\nembedded computer\n\n\nPersonal mobile devices (PMDs)\n\n\nCloud Computing\n\n\nSoftware as a Service (SaaS)\n\n\n\n\n\u55ae\u4f4d\n\n\n\n\n\n\n\n\nDecimal term\n\n\nAbbreviation\n\n\nValue\n\n\nBinary term\n\n\nAbbreviation\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nkilobyte\n\n\nKB\n\n\n10^3\n10^3\n\n\nkibibyte\n\n\nKiB\n\n\n2^{10}\n2^{10}\n\n\n\n\n\n\nmegabyte\n\n\nMB\n\n\n10^6\n10^6\n\n\nmebibyte\n\n\nMiB\n\n\n2^{20}\n2^{20}\n\n\n\n\n\n\ngigabyte\n\n\nGB\n\n\n10^9\n10^9\n\n\ngibibyte\n\n\nGiB\n\n\n2^{30}\n2^{30}\n\n\n\n\n\n\n\n\n\n\niphone 16GB \u70ba\u4ec0\u9ebc\u88ab\u6d88\u8cbb\u8005\u8aa4\u8a8d14\"GB\"? \n\n\n\u56e0\u70ba\u5ee3\u544aiphone 16 GB ,\u4f46\u624b\u6a5f\u7cfb\u7d71\u986f\u793a\u7684\u55ae\u4f4d\u662fGib\n\n\u6839\u64da\u63db\u7b97\n\n16GB=16*\n10^9\n10^9\nBytes\n\n\n16*10^9\n16*10^9\n Bytes =\n\\frac{16*10^9}{2^{30}}\n\\frac{16*10^9}{2^{30}}\n GiB=14.9 GiB\n\n14GiB\u5c31\u662f\u9019\u6a23\u4f86\u7684\n\n\u6240\u4ee5\u55ae\u4f4d\u8981\u4e86\u89e3\u6e05\u695a\u624d\u4e0d\u6703\u7522\u751f\u8aa4\u6703",
            "title": "The Hardware Software Interface"
        },
        {
            "location": "/Computer Organization/The Hardware Software Interface/#computer-organization-and-design-the-hardwaresoftware-interface",
            "text": "",
            "title": "Computer Organization and Design: The Hardware/Software Interface"
        },
        {
            "location": "/Computer Organization/The Hardware Software Interface/#preface",
            "text": "",
            "title": "Preface"
        },
        {
            "location": "/Computer Organization/The Hardware Software Interface/#about-this-book",
            "text": "\u5118\u7ba1\u7a0b\u5e8f\u54e1\u53ef\u4ee5\u5ffd\u7565\u9019\u4e9b\u5efa\u8b70\uff0c\u4e26\u4f9d\u9760\u8a08\u7b97\u6a5f\u67b6\u69cb\u5e2b\uff0c\u7de8\u8b6f\u5668\u7de8\u5beb\u4eba\u54e1\u548c\u82af\u7247\u5de5\u7a0b\u5e2b\u4f86\u4f7f\u4ed6\u5011\u7684\u7a0b\u5e8f\u904b\u884c\u5f97\u66f4\u5feb\u6216\u662f\u66f4\u7bc0\u80fd\uff0c\u4f46\u90a3\u500b\u6642\u4ee3\u5df2\u7d93\u7d50\u675f.   While programmers could ignore the advice and rely on computer architects, compiler writers, and silicon engineers to make their programs run faster or be more energy-effi cient without change, that era is over.   \u6211\u5011\u7684\u89c0\u9ede\u662f\uff0c\u81f3\u5c11\u5728\u672a\u4f86\u5341\u5e74\uff0c\u5982\u679c\u7a0b\u5e8f\u54e1\u5e0c\u671b\u7a0b\u5e8f\u5728\u4e26\u884c\u8a08\u7b97\u6a5f\u4e0a\u9ad8\u6548\u904b\u884c\uff0c\u5927\u591a\u6578\u7a0b\u5e8f\u54e1\u5c07\u4e0d\u5f97\u4e0d\u4e86\u89e3\u786c\u4ef6/\u8edf\u4ef6\u63a5\u53e3, \u6211\u5011\u7684\u89c0\u9ede\u662f\uff0c\u81f3\u5c11\u5728\u672a\u4f86\u7684\u5341\u5e74\u4e2d\uff0c\u5927\u591a\u6578\u7a0b\u5e8f\u54e1\u5c07\u4e0d\u5f97\u4e0d\u4e86\u89e3\u786c\u4ef6/\u8edf\u4ef6\u4e0d\u50c5\u754c\u9762\uff0c\u5982\u679c\u4ed6\u5011\u60f3\u7684\u65b9\u6848\u5728\u4e26\u884c\u8a08\u7b97\u6a5f\u4e0a\u9ad8\u6548\u904b\u884c.   Our view is that for at least the next decade, most programmers are going to have to understand the hardware/soft ware interface if they want programs to run efficiently on parallel computers.",
            "title": "About This Book"
        },
        {
            "location": "/Computer Organization/The Hardware Software Interface/#1computer-abstractions-and-technology",
            "text": "",
            "title": "1.Computer Abstractions and Technology"
        },
        {
            "location": "/Computer Organization/The Hardware Software Interface/#11-introduction",
            "text": "\u4ecb\u7d39\u96fb\u8166   personal computer (PC)  Servers  supercomputer  embedded computer  Personal mobile devices (PMDs)  Cloud Computing  Software as a Service (SaaS)   \u55ae\u4f4d     Decimal term  Abbreviation  Value  Binary term  Abbreviation  Value      kilobyte  KB  10^3 10^3  kibibyte  KiB  2^{10} 2^{10}    megabyte  MB  10^6 10^6  mebibyte  MiB  2^{20} 2^{20}    gigabyte  GB  10^9 10^9  gibibyte  GiB  2^{30} 2^{30}      iphone 16GB \u70ba\u4ec0\u9ebc\u88ab\u6d88\u8cbb\u8005\u8aa4\u8a8d14\"GB\"?   \u56e0\u70ba\u5ee3\u544aiphone 16 GB ,\u4f46\u624b\u6a5f\u7cfb\u7d71\u986f\u793a\u7684\u55ae\u4f4d\u662fGib \n\u6839\u64da\u63db\u7b97 \n16GB=16* 10^9 10^9 Bytes  16*10^9 16*10^9  Bytes = \\frac{16*10^9}{2^{30}} \\frac{16*10^9}{2^{30}}  GiB=14.9 GiB \n14GiB\u5c31\u662f\u9019\u6a23\u4f86\u7684 \n\u6240\u4ee5\u55ae\u4f4d\u8981\u4e86\u89e3\u6e05\u695a\u624d\u4e0d\u6703\u7522\u751f\u8aa4\u6703",
            "title": "1.1 introduction"
        },
        {
            "location": "/Crypto currency/investment/",
            "text": "investment\n\u00b6\n\n\nBTC\n\u00b6\n\n\nEOS\n\u00b6\n\n\nIOTA\n\u00b6",
            "title": "investment"
        },
        {
            "location": "/Crypto currency/investment/#investment",
            "text": "",
            "title": "investment"
        },
        {
            "location": "/Crypto currency/investment/#btc",
            "text": "",
            "title": "BTC"
        },
        {
            "location": "/Crypto currency/investment/#eos",
            "text": "",
            "title": "EOS"
        },
        {
            "location": "/Crypto currency/investment/#iota",
            "text": "",
            "title": "IOTA"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/",
            "text": "Bitcoin paper\n\u00b6\n\n\n\n\nBitcoin: A Peer-to-Peer Electronic Cash System \n\n\non chain transaction:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n     \u4f7f\u7528\u8005\u767c\u8d77\u4ea4\u6613: \u4ea4\u6613\u9700\u6c42\u8a0a\u606f + \u81ea\u5df1\u7684\u79c1\u9470 \u505a\u6210\u6578\u4f4d\u7c3d\u7ae0\n                 \u2193\n     \u5c07\u4ea4\u6613\u9700\u6c42\u8a0a\u606f\u5ee3\u64ad\u5230Bitcoin\u7db2\u8def\u4e2d\n                 \u2193\n     Bitcoin\u7db2\u8def\u4e2d\u5404\u7bc0\u9ede\u6536\u5230\u6b64\u4ea4\u6613\u8a0a\u606f: \u4ea4\u6613\u9700\u6c42\u8a0a\u606f + \u767c\u8d77\u8005\u516c\u9470 \u505a\u4ea4\u6613\u9a57\u8b49\n                 \u2193\n     \u82e5\u4ea4\u6613\u9a57\u8b49OK\uff0c\u5c31\u5c07\u6b64\u7b46\u4ea4\u6613\u6536\u8d77\u4f86\n                 \u2193\n     \u4ea4\u6613\u6578\u91cf\u8db3\u5920\u6210\u584a\u5f8c\uff0c\u5404\u7bc0\u9ede\u958b\u59cb\u7af6\u722d\n                 \u2193\n     \u7372\u52dd\u7bc0\u9ede\u5c07\u584a\u6253\u5305\u5165\u934a\uff0c\u4e26\u4e14\u5f97\u5230\u6316\u7926\u7684\u734e\u52f5\n\n\n\n\n\nhttps://bitcoin.org/bitcoin.pdf\n\n\n1.Introduction\n\u00b6\n\n\n2.Transactions\n\u00b6\n\n\n3.Timestamp Server\n\u00b6\n\n\n4. Proof-of-Work\n\u00b6\n\n\n5. Network\n\u00b6\n\n\n6. Incentive\n\u00b6\n\n\n7. Reclaiming Disk Space\n\u00b6\n\n\n8. Simplified Payment Verification\n\u00b6\n\n\n9. Combining and Splitting Value\n\u00b6\n\n\n10. Privacy\n\u00b6\n\n\n11. Calculations\n\u00b6\n\n\n12. Conclusion\n\u00b6",
            "title": "Bitcoin paper"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#bitcoin-paper",
            "text": "Bitcoin: A Peer-to-Peer Electronic Cash System   on chain transaction:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11      \u4f7f\u7528\u8005\u767c\u8d77\u4ea4\u6613: \u4ea4\u6613\u9700\u6c42\u8a0a\u606f + \u81ea\u5df1\u7684\u79c1\u9470 \u505a\u6210\u6578\u4f4d\u7c3d\u7ae0\n                 \u2193\n     \u5c07\u4ea4\u6613\u9700\u6c42\u8a0a\u606f\u5ee3\u64ad\u5230Bitcoin\u7db2\u8def\u4e2d\n                 \u2193\n     Bitcoin\u7db2\u8def\u4e2d\u5404\u7bc0\u9ede\u6536\u5230\u6b64\u4ea4\u6613\u8a0a\u606f: \u4ea4\u6613\u9700\u6c42\u8a0a\u606f + \u767c\u8d77\u8005\u516c\u9470 \u505a\u4ea4\u6613\u9a57\u8b49\n                 \u2193\n     \u82e5\u4ea4\u6613\u9a57\u8b49OK\uff0c\u5c31\u5c07\u6b64\u7b46\u4ea4\u6613\u6536\u8d77\u4f86\n                 \u2193\n     \u4ea4\u6613\u6578\u91cf\u8db3\u5920\u6210\u584a\u5f8c\uff0c\u5404\u7bc0\u9ede\u958b\u59cb\u7af6\u722d\n                 \u2193\n     \u7372\u52dd\u7bc0\u9ede\u5c07\u584a\u6253\u5305\u5165\u934a\uff0c\u4e26\u4e14\u5f97\u5230\u6316\u7926\u7684\u734e\u52f5   https://bitcoin.org/bitcoin.pdf",
            "title": "Bitcoin paper"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#1introduction",
            "text": "",
            "title": "1.Introduction"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#2transactions",
            "text": "",
            "title": "2.Transactions"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#3timestamp-server",
            "text": "",
            "title": "3.Timestamp Server"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#4-proof-of-work",
            "text": "",
            "title": "4. Proof-of-Work"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#5-network",
            "text": "",
            "title": "5. Network"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#6-incentive",
            "text": "",
            "title": "6. Incentive"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#7-reclaiming-disk-space",
            "text": "",
            "title": "7. Reclaiming Disk Space"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#8-simplified-payment-verification",
            "text": "",
            "title": "8. Simplified Payment Verification"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#9-combining-and-splitting-value",
            "text": "",
            "title": "9. Combining and Splitting Value"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#10-privacy",
            "text": "",
            "title": "10. Privacy"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#11-calculations",
            "text": "",
            "title": "11. Calculations"
        },
        {
            "location": "/Crypto currency/Bitcoin/Bitcoin paper/#12-conclusion",
            "text": "",
            "title": "12. Conclusion"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/",
            "text": "Block Chain\n\u00b6\n\n\nblock chain on bitcoin\n\n\n\n\n\u65e2\u7136\u9078\u66f4\u9577\u7684\u5206\u652f\uff0c\u90a3\u6211\u7528\u5f88\u4f4e\u7684\u96e3\u5ea6\u53bb\u6c42\u89e3\u600e\u9ebc\u8fa6?\n\n\n\u5ba2\u6236\u7aef\u5728\u773e\u591a\u5206\u652f\u4e2d\u627e\u5230\u7b26\u5408\u7576\u524d\u96e3\u5ea6\u4e14\u6700\u9577\u7684\u3002\n\n\n\n\nView last Block\n\n\n\u6b04\u4f4d\u4ecb\u7d39\n\u00b6\n\n\nsample raw data web\n\n\nsample raw data json\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n{\n\n\n\"hash\"\n:\n\"000000000000000000011f35a721c6065b447eef96640ce0ca9ba9a98edd9a26\"\n,\n\n\n\"size\"\n:\n986803\n,\n\n\n\"height\"\n:\n494333\n,\n\n\n\"version\"\n:\n536870912\n,\n\n\n\"merkleroot\"\n:\n\"eb60eac626c77e2719621f3d2bc5379f43f5a62b5994e184520eb290bb31960c\"\n,\n\n\n\"tx\"\n:[\n\"...........\"\n],\n\n\n\"time\"\n:\n1510663787\n,\n\n\n\"nonce\"\n:\n3267589382\n,\n\n\n\"bits\"\n:\n\"1800ce4b\"\n,\n\n\n\"difficulty\"\n:\n1364422081125.1475\n,\n\n\n\"chainwork\"\n:\n\"000000000000000000000000000000000000000000b09e2108dc9f58fa17f83e\"\n,\n\n\n\"confirmations\"\n:\n9\n,\n\n\n\"previousblockhash\"\n:\n\"0000000000000000001072fdaa28f5b128009e8580f6080ca82063f9a912cbbc\"\n,\n\"nextblockhash\"\n:\n\"0000000000000000000960da72f18edad9d101fb5c3a2ac1ecbfea7600d82575\"\n,\n\n\n\"reward\"\n:\n12.5\n,\n\n\n\"isMainChain\"\n:\ntrue\n,\n\n\n\"poolInfo\"\n:{\n\"poolName\"\n:\n\"AntMiner\"\n,\n\"url\"\n:\n\"https://bitmaintech.com/\"\n}}\n\n\n\n\n\n\n\n\n\nhash\n\u00b6\n\n\n\n\nBlock hashing algorithm\n\n\nhash256(hash256(Version+hashPrevBlock+hashMerkleRoot+Time+Bits+Nonce))\n\n\n\n\n\n\n\n\n\n\nField\n\n\nPurpose\n\n\nUpdated when...\n\n\nSize (Bytes)\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nBlock version number\n\n\nYou upgrade the software and it specifies a new version\n\n\n4\n\n\n\n\n\n\nhashPrevBlock\n\n\n256-bit hash of the previous block header\n\n\nA new block comes in\n\n\n32\n\n\n\n\n\n\nhashMerkleRoot\n\n\n256-bit hash based on all of the transactions in the block\n\n\nA transaction is accepted\n\n\n32\n\n\n\n\n\n\nTime\n\n\nCurrent timestamp as seconds since 1970-01-01T00:00 UTC\n\n\nEvery few seconds\n\n\n4\n\n\n\n\n\n\nBits\n\n\nCurrent target in compact format\n\n\nThe difficulty is adjusted\n\n\n4\n\n\n\n\n\n\nNonce\n\n\n32-bit number (starts at 0)\n\n\nA hash is tried (increments)\n\n\n4\n\n\n\n\n\n\nhttps://en.bitcoin.it/wiki/Block_hashing_algorithm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe output of blockexplorer displays the hash values as big-endian numbers\n\nbut python3 hashlib is little end\n\n\n\n\nCODE on Python3\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n'''\n\n\nsource\n\n\nsupport blockexplorer & blockchain\n\n\nhttps://blockexplorer.com/api/block/000000000000000000011f35a721c6065b447eef96640ce0ca9ba9a98edd9a26\n\n\nor\n\n\nhttps://blockchain.info/rawblock/000000000000000000011f35a721c6065b447eef96640ce0ca9ba9a98edd9a26\n\n\n'''\n\n\nimport\n \nhashlib\n\n\nimport\n \ncodecs\n\n\nimport\n \nstruct\n\n\n\n'''\n\n\nimport hashlib using \"little-end\" but blockexplorer is \"biggest-end\" ,we need convert biggest-end to little-end\n\n\n'''\n\n\ndef\n \nbtol\n(\nst\n):\n\n    \nif\n \nlen\n(\nst\n)\n%\n2\n \n!=\n0\n:\n\n        \nreturn\n \n\"error need 2 pair\"\n\n    \nelse\n:\n\n        \nans\n=\n\"\"\n\n        \nfor\n \ni\n \nin\n \nrange\n(\nint\n(\nlen\n(\nst\n)\n/\n2\n)):\n\n            \nindex\n=\ni\n*\n2\n\n            \nans\n=\nst\n[\nindex\n]\n+\nst\n[\nindex\n+\n1\n]\n+\nans\n\n        \nreturn\n \nans\n\n\n''' we can get sample on blockexplorer '''\n    \n\nVersion\n=\n\"536870912\"\n \n#4bytes so need 8 hex\n\n\nhashPrevBlock\n=\n\"0000000000000000001072fdaa28f5b128009e8580f6080ca82063f9a912cbbc\"\n#32bytes\n\n\nhashMerkleRoot\n=\n\"eb60eac626c77e2719621f3d2bc5379f43f5a62b5994e184520eb290bb31960c\"\n#32bytes\n\n\nTime\n=\n\"1510663787\"\n#4bytes\n\n\nBits\n=\n\"1800ce4b\"\n#4bytes\n\n\nNonce\n=\n\"3267589382\"\n#4bytes\n\n\n\ncontrol\n=\ninput\n(\n\"blockexplorer.com Data input \n\\\"\n1\n\\\"\n blockchain.info Date input \n\\\"\n2\n\\\"\n \n\\n\n\"\n)\n\n\n\nif\n \ncontrol\n.\nisdecimal\n():\n\n    \nif\n \nint\n(\ncontrol\n)\n==\n1\n:\n\n        \npass\n\n    \nelif\n \nint\n(\ncontrol\n)\n==\n2\n:\n\n        \nBits\n=\nstr\n(\nhex\n(\nint\n(\nBits\n))[\n2\n:])\n.\nzfill\n(\n8\n)\n\n    \nelse\n:\n\n        \nprint\n(\n\"error please input 1 or 2\"\n)\n\n        \nexit\n(\n1\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"error please input 1 or 2\"\n)\n\n    \nexit\n(\n1\n)\n\n\n\nheader_hex\n \n=\n \n(\n\n\nbtol\n(\nstr\n(\nhex\n(\nint\n(\nVersion\n))[\n2\n:])\n.\nzfill\n(\n8\n))\n \n+\n\n\nbtol\n(\nhashPrevBlock\n)\n \n+\n\n\nbtol\n(\nhashMerkleRoot\n)\n \n+\n\n\nbtol\n(\nstr\n(\nhex\n(\nint\n(\nTime\n))[\n2\n:])\n.\nzfill\n(\n8\n))\n \n+\n\n\nbtol\n(\nBits\n)\n \n+\n\n\nbtol\n(\nstr\n(\nhex\n(\nint\n(\nNonce\n))[\n2\n:]))\n.\nzfill\n(\n8\n))\n\n\n\n\n\nheader_bin\n \n=\n \ncodecs\n.\ndecode\n(\nheader_hex\n,\n \n\"hex\"\n)\n\n\nhash\n \n=\n \nhashlib\n.\nsha256\n(\nhashlib\n.\nsha256\n(\nheader_bin\n)\n.\ndigest\n())\n.\ndigest\n()\n\n\n\n\n'''we want to view biggest-end'''\n\n\nprint\n(\n\"view hash by big-endian\"\n)\n\n\nprint\n \n(\ncodecs\n.\nencode\n(\nhash\n[::\n-\n1\n],\n \n\"hex\"\n))\n\n\n\n\n\n\n\n\nsize\n\u00b6\n\n\nSize (bytes)\n\n\n\n\nheight\n\u00b6\n\n\n\u4ee3\u8868\u524d\u9762\u6709\u591a\u5c11\u584ablock chain ,\u5275\u4e16\u7b2c\u4e00\u500bblockchain\u7684hight\u503c\u70ba\u96f6\n\n\n\n\nversion\n\u00b6\n\n\nBlock version number    You upgrade the software and it specifies a new version 4bytes\n\n\n\n\nmerkleroot\n\u00b6\n\n\n\n\nH_{A} = SHA_{256}(SHA_{256}(Tx A))\nH_{A} = SHA_{256}(SHA_{256}(Tx A))\n\n\nH_{AB} = SHA_{256}(SHA_{256}(H_{A}+H_{B}))\nH_{AB} = SHA_{256}(SHA_{256}(H_{A}+H_{B}))\n\n\ntx(Transactions)\n\u00b6\n\n\n\u4ea4\u6613\u8a0a\u606f\n\n\n\n\n\ntime\n\u00b6\n\n\nCurrent timestamp as seconds since 1970-01-01T00:00 UTC\n\n\n\n\nnonce\n\u00b6\n\n\n\n\nWarning\n\n\nnonce\u53ea\u67094bytes\u4e26\u4e0d\u4ee3\u8868\u53ea\u9700\u8981\n2^{32}\n2^{32}\n\u5c31\u53ef\u4ee5\u7834\u89e3sha256\n\n\u6709\u53ef\u80fd\u7b97\u5b8c\u9084\u627e\u4e0d\u5230\u7b54\u6848,\u5c31\u5fc5\u9808\u66f4\u6539\u5176\u4ed6\u6b04\u4f4d\u597d\u8b93hash\u7b26\u5408\u898f\u5b9a\n\n\n\n\n\n\nbits\n\u00b6\n\n\nbits to target\n\n\nsolution1\n\u00b6\n\n\n\n\nbits mean\n\n\nlike 0x1d00ffff\n\nall large is 32 bytes\n\n* 0x\n\\color{blue}{1d}\n\\color{blue}{1d}\n --- \n(1d)_{16}=(26)_{10}\n(1d)_{16}=(26)_{10}\n so we know 26 bytes after 00ffff \n\n* 0x\n\\color{red}{00ffff}\n\\color{red}{00ffff}\n --- target prefix\n\n\n000000\\color{red}{00ffff}\\color{blue}{0000000000000000000000000000000000000000000000000000}\n000000\\color{red}{00ffff}\\color{blue}{0000000000000000000000000000000000000000000000000000}\n\n\n\n\nsolution2\n\u00b6\n\n\nbetter performence\n\n1\n2\n3\n4\n5\nexponent=bits[0~1]\n\ncoefficient=bits[2~7]\n\ntarget = coefficient * 2^(8 * (exponent \u2013 3))\n\n\n\n\n\n\n\nCODE on Python3\n\n\nbite to target\n\nsolution1\n\n1\n2\nbits=\"1d00ffff\"\nprint(bits[2:].ljust(2*int(bits[0:2],16),'0').zfill(64))\n\n\n\n\nsolution2\n\n1\nprint(hex(0x00ffff*2**(8*(0x1d - 3)))[2:].zfill(64))\n\n\n\n\n\n\n\n\n\ndifficulty\n\u00b6\n\n\n\n\n\u516c\u5f0f\n\n\n\u5169\u7a2edifficulty \u4e00\u822c\u4f7f\u7528bdiff\n\n\nbdiff \u5b9a\u7fa9:1\u56f0\u96e3\u5ea6\uff08difficulty\uff09\u7684bits=0x1D00FFFF\n  \n\n\npdiff-target:0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n\n\n1=\\frac{f_{conv}(0x1D00FFFF)}{f_{conv}(0x1D00FFFF)}\n1=\\frac{f_{conv}(0x1D00FFFF)}{f_{conv}(0x1D00FFFF)}\n\nexponent=bits[0-1]\n\ncoefficient=bits[2-7]\n\n\nf_{conv}(bits)\nf_{conv}(bits)\n=coefficient * 2^(8 * (exponent \u2013 3))\n\n\nf_{conv}(\\color{red}{1D}\\color{blue}{00FFFF})=\\color{blue}{00FFFF}_{16} * 2^{( 8 *( \\color{red}{1D}_{16}  -  3 ))}\nf_{conv}(\\color{red}{1D}\\color{blue}{00FFFF})=\\color{blue}{00FFFF}_{16} * 2^{( 8 *( \\color{red}{1D}_{16}  -  3 ))}\n \n\n\ndifficulty=\\frac{f_{conv}(0x1D00FFFF)}{f_{conv}(bits) }\ndifficulty=\\frac{f_{conv}(0x1D00FFFF)}{f_{conv}(bits) }\n\n\n\n\n\n\ntarget mean\n\n\ntarget=f_{conv}(bits)\ntarget=f_{conv}(bits)\n\ntarget\u610f\u601d\u5c31\u662f\u5728\u6316\u7926\u7684\u6642\u5019nonce\u8a72\u600e\u9ebc\u8abf\u6574\u597d\u8b93hash\n\ntarget \u8d8a\u5c0f\u4ee3\u8868\u96e3\u5ea6\u8d8a\u5927\n\n\n\n\n\n\nwe know bits=1800ce4b difficulty(bdiff)=?\n\n\n1\ndifficulty\n=\n0x00ffff\n*\n2\n**\n(\n8\n*\n(\n0x1d\n \n-\n \n3\n))\n/\nfloat\n(\n0x00ce4b\n*\n2\n**\n(\n8\n*\n(\n0x18\n \n-\n \n3\n)))\n\n\n\n\n\nAnswer:difficulty=1364422081125.1475 \n\n\n\n\nBitcoin Difficulty\n\n\n\n\nchainwork\n\u00b6\n\n\n\n\n\u7bc4\u4f8b\n\n\nset chainwork=10Hash\n\u4f60\u7684\u96fb\u81661H/s \n\u4ee3\u8868\u4f60\u8981\u7b97\u73a9\u9019\u4e32\u5340\u584a\u7df4\u5340\u898110\u79d2\n\n\n\n\n\n\nconfirmations\n\u00b6\n\n\nConfirmation\n\n\u4ee3\u8868\u8a72blockchain\u7684\u7248\u672c\u4e4b\u4e0b \u524d\u9762\u6709\u591a\u5c11\u584ablock\n\u4e00\u822c\u4f86\u8aaa\u7b49\u5f856\u584a\u5c31\u53ef\u4ee5\u78ba\u8a8d\u4ea4\u6613\n\n\n\n\npreviousblockhash\n\u00b6\n\n\n\u524d\u4e00\u500b\u5340\u584a\u93c8\u7684HASH\n\n\n\n\nreward\n\u00b6\n\n\n\u7b97\u51fa\u8a72\u5340\u584a\u7df4\u6240\u7d66\u7684\u734e\u52f5 \n\n2009~2012 50BTC\n\n2013~2016 25BTC\n\n2017~2020 12.5BTC\n\n2020~     6.25BTC \n\n\n\n\nisMainChain\n\u00b6\n\n\n\u662f\u4e0d\u662f\u6700\u9577\u7684\u90a3\u500b\u5340\u584a\u7df4\n\n\npoolInfo\n\u00b6\n\n\n\u7926\u5834\u8cc7\u8a0a\n\n\n\n\nmining\n\u00b6\n\n\nexample \"bits\":\"1800ce4b\"\n\n\ntarget=(0x00ce4b)_{16} * 2^{(8 * ((0x18)_{16} \u2013 3))}\ntarget=(0x00ce4b)_{16} * 2^{(8 * ((0x18)_{16} \u2013 3))}\n\n\n\n\nNote\n\n\n\u6211\u5011\u60f3\u8981\u85c9\u7531\u66f4\u52d5nonce \u4f86\u8b93hash<target\n\n\n\n\ntarget=\n000000000000000000CE4B000000000000000000000000000000000000000000\n                                                        \n\nhash=  \n000000000000000000011f35a721c6065b447eef96640ce0ca9ba9a98edd9a26\n\n\nHash Rate\n\u00b6\n\n\n\n\n\u8a08\u7b97\u99ed\u5ba2\u8981\u653b\u64ca51%\u7684\u96e3\u5ea6\n\n\n\u786c\u9ad4\u53c3\u8003\u6578\u64da\n\n\nHashrate\n\n\u6ce8\u610f\uff1a\u8a72\u63db\u7b97\u53ea\u80fd\u53c3\u8003\u7528\n\nIntel Xeon E5-2698 V4 \n\\simeq\n\\simeq\n 800H/s\n\nIntel Xeon Phi 7210 \n\\simeq\n\\simeq\n 600H/s\n\n\n\u5929\u548c\u4e8c\u865f\n\n32,000\u9846Xeon E5\u4e3b\u8655\u7406\u5668\u548c48,000\u500bXeon Phi\u5354\u8655\u7406\u5668\n\n\u5929\u548c\u4e8c\u865f:800*32,000+48,000*600=54400000H/s=54400000MH/s=54400GH/s\n\n\u5168\u7403\u6bd4\u7279\u5e63Hashrate\uff1a7602699877 GH/s\n\n\u5168\u7403\u6bd4\u7279\u5e63/\u5929\u548c\u4e8c\u865f=139755\n\n\u7d50\u8ad6\u9700\u898113/2\u842c\u7d44\u5929\u548c\u4e8c\u865f\u8d85\u7d1a\u96fb\u8166\u624d\u80fd\u8d85\u904e51%\u5168\u4e16\u754c\u7684\u96fb\u8166\n\n\u7531\u65bc\u76ee\u524d\u6bd4\u7279\u5e63\u662f\u4f7f\u7528ASIC\u6240\u4ee5\u6548\u80fd\u624d\u6703\u5982\u6b64\u4e4b\u5927\u662fcpu\u6240\u7121\u6cd5\u6279\u64ec\n\n\n\n\n256/8\n32bytes",
            "title": "Block Chain"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#block-chain",
            "text": "block chain on bitcoin   \u65e2\u7136\u9078\u66f4\u9577\u7684\u5206\u652f\uff0c\u90a3\u6211\u7528\u5f88\u4f4e\u7684\u96e3\u5ea6\u53bb\u6c42\u89e3\u600e\u9ebc\u8fa6?  \u5ba2\u6236\u7aef\u5728\u773e\u591a\u5206\u652f\u4e2d\u627e\u5230\u7b26\u5408\u7576\u524d\u96e3\u5ea6\u4e14\u6700\u9577\u7684\u3002   View last Block",
            "title": "Block Chain"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#_1",
            "text": "sample raw data web  sample raw data json   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 {  \"hash\" : \"000000000000000000011f35a721c6065b447eef96640ce0ca9ba9a98edd9a26\" ,  \"size\" : 986803 ,  \"height\" : 494333 ,  \"version\" : 536870912 ,  \"merkleroot\" : \"eb60eac626c77e2719621f3d2bc5379f43f5a62b5994e184520eb290bb31960c\" ,  \"tx\" :[ \"...........\" ],  \"time\" : 1510663787 ,  \"nonce\" : 3267589382 ,  \"bits\" : \"1800ce4b\" ,  \"difficulty\" : 1364422081125.1475 ,  \"chainwork\" : \"000000000000000000000000000000000000000000b09e2108dc9f58fa17f83e\" ,  \"confirmations\" : 9 ,  \"previousblockhash\" : \"0000000000000000001072fdaa28f5b128009e8580f6080ca82063f9a912cbbc\" , \"nextblockhash\" : \"0000000000000000000960da72f18edad9d101fb5c3a2ac1ecbfea7600d82575\" ,  \"reward\" : 12.5 ,  \"isMainChain\" : true ,  \"poolInfo\" :{ \"poolName\" : \"AntMiner\" , \"url\" : \"https://bitmaintech.com/\" }}",
            "title": "\u6b04\u4f4d\u4ecb\u7d39"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#hash",
            "text": "Block hashing algorithm  hash256(hash256(Version+hashPrevBlock+hashMerkleRoot+Time+Bits+Nonce))      Field  Purpose  Updated when...  Size (Bytes)      Version  Block version number  You upgrade the software and it specifies a new version  4    hashPrevBlock  256-bit hash of the previous block header  A new block comes in  32    hashMerkleRoot  256-bit hash based on all of the transactions in the block  A transaction is accepted  32    Time  Current timestamp as seconds since 1970-01-01T00:00 UTC  Every few seconds  4    Bits  Current target in compact format  The difficulty is adjusted  4    Nonce  32-bit number (starts at 0)  A hash is tried (increments)  4    https://en.bitcoin.it/wiki/Block_hashing_algorithm         Warning  The output of blockexplorer displays the hash values as big-endian numbers \nbut python3 hashlib is little end   CODE on Python3  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62 '''  source  support blockexplorer & blockchain  https://blockexplorer.com/api/block/000000000000000000011f35a721c6065b447eef96640ce0ca9ba9a98edd9a26  or  https://blockchain.info/rawblock/000000000000000000011f35a721c6065b447eef96640ce0ca9ba9a98edd9a26  '''  import   hashlib  import   codecs  import   struct  '''  import hashlib using \"little-end\" but blockexplorer is \"biggest-end\" ,we need convert biggest-end to little-end  '''  def   btol ( st ): \n     if   len ( st ) % 2   != 0 : \n         return   \"error need 2 pair\" \n     else : \n         ans = \"\" \n         for   i   in   range ( int ( len ( st ) / 2 )): \n             index = i * 2 \n             ans = st [ index ] + st [ index + 1 ] + ans \n         return   ans  ''' we can get sample on blockexplorer '''      Version = \"536870912\"   #4bytes so need 8 hex  hashPrevBlock = \"0000000000000000001072fdaa28f5b128009e8580f6080ca82063f9a912cbbc\" #32bytes  hashMerkleRoot = \"eb60eac626c77e2719621f3d2bc5379f43f5a62b5994e184520eb290bb31960c\" #32bytes  Time = \"1510663787\" #4bytes  Bits = \"1800ce4b\" #4bytes  Nonce = \"3267589382\" #4bytes  control = input ( \"blockexplorer.com Data input  \\\" 1 \\\"  blockchain.info Date input  \\\" 2 \\\"   \\n \" )  if   control . isdecimal (): \n     if   int ( control ) == 1 : \n         pass \n     elif   int ( control ) == 2 : \n         Bits = str ( hex ( int ( Bits ))[ 2 :]) . zfill ( 8 ) \n     else : \n         print ( \"error please input 1 or 2\" ) \n         exit ( 1 )  else : \n     print ( \"error please input 1 or 2\" ) \n     exit ( 1 )  header_hex   =   (  btol ( str ( hex ( int ( Version ))[ 2 :]) . zfill ( 8 ))   +  btol ( hashPrevBlock )   +  btol ( hashMerkleRoot )   +  btol ( str ( hex ( int ( Time ))[ 2 :]) . zfill ( 8 ))   +  btol ( Bits )   +  btol ( str ( hex ( int ( Nonce ))[ 2 :])) . zfill ( 8 ))  header_bin   =   codecs . decode ( header_hex ,   \"hex\" )  hash   =   hashlib . sha256 ( hashlib . sha256 ( header_bin ) . digest ()) . digest ()  '''we want to view biggest-end'''  print ( \"view hash by big-endian\" )  print   ( codecs . encode ( hash [:: - 1 ],   \"hex\" ))",
            "title": "hash"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#size",
            "text": "Size (bytes)",
            "title": "size"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#height",
            "text": "\u4ee3\u8868\u524d\u9762\u6709\u591a\u5c11\u584ablock chain ,\u5275\u4e16\u7b2c\u4e00\u500bblockchain\u7684hight\u503c\u70ba\u96f6",
            "title": "height"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#version",
            "text": "Block version number    You upgrade the software and it specifies a new version 4bytes",
            "title": "version"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#merkleroot",
            "text": "H_{A} = SHA_{256}(SHA_{256}(Tx A)) H_{A} = SHA_{256}(SHA_{256}(Tx A))  H_{AB} = SHA_{256}(SHA_{256}(H_{A}+H_{B})) H_{AB} = SHA_{256}(SHA_{256}(H_{A}+H_{B}))",
            "title": "merkleroot"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#txtransactions",
            "text": "\u4ea4\u6613\u8a0a\u606f",
            "title": "tx(Transactions)"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#time",
            "text": "Current timestamp as seconds since 1970-01-01T00:00 UTC",
            "title": "time"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#nonce",
            "text": "Warning  nonce\u53ea\u67094bytes\u4e26\u4e0d\u4ee3\u8868\u53ea\u9700\u8981 2^{32} 2^{32} \u5c31\u53ef\u4ee5\u7834\u89e3sha256 \n\u6709\u53ef\u80fd\u7b97\u5b8c\u9084\u627e\u4e0d\u5230\u7b54\u6848,\u5c31\u5fc5\u9808\u66f4\u6539\u5176\u4ed6\u6b04\u4f4d\u597d\u8b93hash\u7b26\u5408\u898f\u5b9a",
            "title": "nonce"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#bits",
            "text": "bits to target",
            "title": "bits"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#solution1",
            "text": "bits mean  like 0x1d00ffff \nall large is 32 bytes \n* 0x \\color{blue}{1d} \\color{blue}{1d}  ---  (1d)_{16}=(26)_{10} (1d)_{16}=(26)_{10}  so we know 26 bytes after 00ffff  \n* 0x \\color{red}{00ffff} \\color{red}{00ffff}  --- target prefix  000000\\color{red}{00ffff}\\color{blue}{0000000000000000000000000000000000000000000000000000} 000000\\color{red}{00ffff}\\color{blue}{0000000000000000000000000000000000000000000000000000}",
            "title": "solution1"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#solution2",
            "text": "better performence 1\n2\n3\n4\n5 exponent=bits[0~1]\n\ncoefficient=bits[2~7]\n\ntarget = coefficient * 2^(8 * (exponent \u2013 3))    CODE on Python3  bite to target \nsolution1 1\n2 bits=\"1d00ffff\"\nprint(bits[2:].ljust(2*int(bits[0:2],16),'0').zfill(64))  \nsolution2 1 print(hex(0x00ffff*2**(8*(0x1d - 3)))[2:].zfill(64))",
            "title": "solution2"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#difficulty",
            "text": "\u516c\u5f0f  \u5169\u7a2edifficulty \u4e00\u822c\u4f7f\u7528bdiff  bdiff \u5b9a\u7fa9:1\u56f0\u96e3\u5ea6\uff08difficulty\uff09\u7684bits=0x1D00FFFF     pdiff-target:0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  1=\\frac{f_{conv}(0x1D00FFFF)}{f_{conv}(0x1D00FFFF)} 1=\\frac{f_{conv}(0x1D00FFFF)}{f_{conv}(0x1D00FFFF)} \nexponent=bits[0-1] \ncoefficient=bits[2-7]  f_{conv}(bits) f_{conv}(bits) =coefficient * 2^(8 * (exponent \u2013 3))  f_{conv}(\\color{red}{1D}\\color{blue}{00FFFF})=\\color{blue}{00FFFF}_{16} * 2^{( 8 *( \\color{red}{1D}_{16}  -  3 ))} f_{conv}(\\color{red}{1D}\\color{blue}{00FFFF})=\\color{blue}{00FFFF}_{16} * 2^{( 8 *( \\color{red}{1D}_{16}  -  3 ))}    difficulty=\\frac{f_{conv}(0x1D00FFFF)}{f_{conv}(bits) } difficulty=\\frac{f_{conv}(0x1D00FFFF)}{f_{conv}(bits) }    target mean  target=f_{conv}(bits) target=f_{conv}(bits) \ntarget\u610f\u601d\u5c31\u662f\u5728\u6316\u7926\u7684\u6642\u5019nonce\u8a72\u600e\u9ebc\u8abf\u6574\u597d\u8b93hash \ntarget \u8d8a\u5c0f\u4ee3\u8868\u96e3\u5ea6\u8d8a\u5927    we know bits=1800ce4b difficulty(bdiff)=?  1 difficulty = 0x00ffff * 2 ** ( 8 * ( 0x1d   -   3 )) / float ( 0x00ce4b * 2 ** ( 8 * ( 0x18   -   3 )))   \nAnswer:difficulty=1364422081125.1475    Bitcoin Difficulty",
            "title": "difficulty"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#chainwork",
            "text": "\u7bc4\u4f8b  set chainwork=10Hash\n\u4f60\u7684\u96fb\u81661H/s \n\u4ee3\u8868\u4f60\u8981\u7b97\u73a9\u9019\u4e32\u5340\u584a\u7df4\u5340\u898110\u79d2",
            "title": "chainwork"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#confirmations",
            "text": "Confirmation \n\u4ee3\u8868\u8a72blockchain\u7684\u7248\u672c\u4e4b\u4e0b \u524d\u9762\u6709\u591a\u5c11\u584ablock\n\u4e00\u822c\u4f86\u8aaa\u7b49\u5f856\u584a\u5c31\u53ef\u4ee5\u78ba\u8a8d\u4ea4\u6613",
            "title": "confirmations"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#previousblockhash",
            "text": "\u524d\u4e00\u500b\u5340\u584a\u93c8\u7684HASH",
            "title": "previousblockhash"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#reward",
            "text": "\u7b97\u51fa\u8a72\u5340\u584a\u7df4\u6240\u7d66\u7684\u734e\u52f5  \n2009~2012 50BTC \n2013~2016 25BTC \n2017~2020 12.5BTC \n2020~     6.25BTC",
            "title": "reward"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#ismainchain",
            "text": "\u662f\u4e0d\u662f\u6700\u9577\u7684\u90a3\u500b\u5340\u584a\u7df4",
            "title": "isMainChain"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#poolinfo",
            "text": "\u7926\u5834\u8cc7\u8a0a",
            "title": "poolInfo"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#mining",
            "text": "example \"bits\":\"1800ce4b\"  target=(0x00ce4b)_{16} * 2^{(8 * ((0x18)_{16} \u2013 3))} target=(0x00ce4b)_{16} * 2^{(8 * ((0x18)_{16} \u2013 3))}   Note  \u6211\u5011\u60f3\u8981\u85c9\u7531\u66f4\u52d5nonce \u4f86\u8b93hash<target   target= 000000000000000000CE4B000000000000000000000000000000000000000000                                                          \nhash=   000000000000000000011f35a721c6065b447eef96640ce0ca9ba9a98edd9a26",
            "title": "mining"
        },
        {
            "location": "/Crypto currency/Bitcoin/Block Chain/#hash-rate",
            "text": "\u8a08\u7b97\u99ed\u5ba2\u8981\u653b\u64ca51%\u7684\u96e3\u5ea6  \u786c\u9ad4\u53c3\u8003\u6578\u64da  Hashrate \n\u6ce8\u610f\uff1a\u8a72\u63db\u7b97\u53ea\u80fd\u53c3\u8003\u7528 \nIntel Xeon E5-2698 V4  \\simeq \\simeq  800H/s \nIntel Xeon Phi 7210  \\simeq \\simeq  600H/s  \u5929\u548c\u4e8c\u865f \n32,000\u9846Xeon E5\u4e3b\u8655\u7406\u5668\u548c48,000\u500bXeon Phi\u5354\u8655\u7406\u5668 \n\u5929\u548c\u4e8c\u865f:800*32,000+48,000*600=54400000H/s=54400000MH/s=54400GH/s \n\u5168\u7403\u6bd4\u7279\u5e63Hashrate\uff1a7602699877 GH/s \n\u5168\u7403\u6bd4\u7279\u5e63/\u5929\u548c\u4e8c\u865f=139755 \n\u7d50\u8ad6\u9700\u898113/2\u842c\u7d44\u5929\u548c\u4e8c\u865f\u8d85\u7d1a\u96fb\u8166\u624d\u80fd\u8d85\u904e51%\u5168\u4e16\u754c\u7684\u96fb\u8166 \n\u7531\u65bc\u76ee\u524d\u6bd4\u7279\u5e63\u662f\u4f7f\u7528ASIC\u6240\u4ee5\u6548\u80fd\u624d\u6703\u5982\u6b64\u4e4b\u5927\u662fcpu\u6240\u7121\u6cd5\u6279\u64ec   256/8\n32bytes",
            "title": "Hash Rate"
        },
        {
            "location": "/Machine Learning/Introduction/",
            "text": "Introduction\n\u00b6\n\n\n\n\n\u4ec0\u9ebc\u6642\u5019\u53ef\u4ee5\u4f7f\u7528\u6a5f\u5668\u5b78\u7fd2\uff1f\n 1.\u8981\u6709\u898f\u5247 2.\u4e0d\u5bb9\u6613\u5beb\u51fa\u4f86\u7684\u898f\u5247(\u8fa8\u8b58\u5716\u7247)3.\u6709\u8db3\u5920\u7684\u8cc7\u6599\n  \u6a5f\u5668\u5b78\u7fd2\u4f5c\u6cd5\uff1f\n  \u5f9e\u8cc7\u6599\u51fa\u767c\u53bb\u5b78\u7fd2\n\n\n\n\nLearning Model\n\u00b6\n\n\n\u76ee\u6a19\uff1a\u5f9eA\u88e1\u9762\u5f88\u591a\u500bH\u4e2d\u9078\u4e00\u500b\u4f86\u4ee3\u8868g,\u5e0c\u671bg\u8d8a\u63a5\u8fd1f\n\u53e6\u4e00\u7a2e\u89e3\u91cb\u65b9\u6cd5\uff1a\u5728\u65b9\u7a0b\u5f0f\u88e1\u9762,\u6709H\u500b\u89e3,g\u5c31\u662f\u9078\u5230\u6700\u597d\u7684\u89e3 \n\n\n\n\nD:\u8ddff\u6709\u95dc\u7684\u8cc7\u6599 \n\n\nA:\u6a5f\u5668\u5b78\u7fd2\u7684\u6f14\u7b97\u6cd5 \n\n\nH:A\u6f14\u7b97\u6cd5\u88e1\u9762\u6709\u5f88\u591a\u500b\u5047\u8aaaH\n\n\ng:\u63a5\u8fd1\u771f\u5be6f\u7684\u6f14\u7b97\u6cd5(\u51fd\u6578) \n\n\nf:\u5922\u60f3\u5f97\u5230\u7684\u6f14\u7b97\u6cd5(\u51fd\u6578)\n\n\n\n\n\n\nExample\n\n\nD:your data input to x\n\nA: machine learning algorithm is y=ax \n\nH:H\u2208\n\\mathbb{Q}\n\\mathbb{Q}\n all possible in this algorithm {y=0.3x,y=6x,y=6.7x...}\n\ng: our machine learning get answer y=2.9999x it close to f\n\nf:we want to get this function y=3x\n\n\n\n\n\n\n\n\nTypes of Machine Learning\n\u00b6\n\n\nOutput Space\n\u00b6\n\n\n(\u8981\u554f\u4ec0\u9ebc\u554f\u984c)\n\n\n\n\n\n\n\n\nBinary Classification\n\n\nMulticlass classification\n\n\nRegression\n\n\nStructured Learning\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Label\n\u00b6\n\n\n(\u62ff\u5230\u4e0d\u540c\u6a19\u8a18\u7684\u8cc7\u6599,\u8981\u600e\u8655\u7406)\n\n\n\n\n\n\n\n\nSupervised\n\n\nSemi-supervised\n\n\n\n\n\n\n\n\n\n\nSample:Classification \n  \n \u5df2\u7d93\u6a19\u8a18\u597d\u8cc7\u6599 \n\u53c8\u53ef\u5206\u6210\n\u751f\u6210\u6a21\u578b(Generative Model) \n\u5224\u522b\u6a21\u578b(Discriminative Model)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnsupervised\n\n\nReinforcement Learning (\u589e\u5f37\u5f0f\u5b78\u7fd2)\n\n\n\n\n\n\n\n\n\n\nSample: Clustering \nclustering(\u5206\u7fa4)density estimation:\u54ea\u4e9b\u5730\u65b9\u6bd4\u8f03\u7a20\u5bc6\u61c9\u7528ex.\u54ea\u88e1\u6bd4\u8f03\u5e38\u767c\u751f\u4e8b\u6545outlier detection:\u627e\u51fa\u7570\u5e38\u7684\u8cc7\u6599,\u56e0\u70ba\u7570\u5e38\u8cc7\u6599\u5f88\u5c11\n\n\n\u8ddf\u8a13\u7df4\u5bf5\u7269\u4e00\u6a23,\u5c0d\u7d66\u734e\u52f5,\u932f\u7d66\u61f2\u7f70\n\n\n\n\n\n\n\n\n\n\nProtocol\n\u00b6\n\n\n\u8f38\u5165\u8cc7\u6599\u7684\u65b9\u6cd5\nf \\Longrightarrow (x_{n},y_{n})\nf \\Longrightarrow (x_{n},y_{n})\n\n\n\n\n\n\n\n\nbatch\n\n\nOnline\n\n\nactive\n\n\n\n\n\n\n\n\n\n\n\u6210\u6279\u7684\u8cc7\u6599\u4f86\u5b78\u7fd2\n\n\n\u4e00\u7b46\u4e00\u7b46\u8cc7\u6599\u4f86\u5b78\u7fd2,\u9047\u5230\u932f\u8aa4\u5728\u6539\u6b63ex.PLA,Reinforcement Learning\n\n\n\u6a5f\u5668\u81ea\u5df1\u554f\u554f\u984c,\u7576\u8cc7\u6599\u5f88\u5c11\u6216\u5f88\u8cb4\u53ef\u4ee5\u4f7f\u7528,\u4e5f\u5e0c\u671b\u6a5f\u5668\u5b78\u7fd2\u901f\u5ea6\u52a0\u5feb\u8ddf\u4eba\u4e00\u6a23ex.\u6a5f\u5668\u81ea\u5df1\u5beb\u4e00\u500b\u6578\u5b57,\u53cd\u904e\u4f86\u554f\u4eba\u4f86\u5b78\u7fd2\n\n\n\n\n\n\n\n\n\n\nInput Space\n\u00b6\n\n\n\u8cc7\u6599\u7a2e\u985e\n\\mathcal{X}\n\\mathcal{X}\n\n\u8d8a\u62bd\u8c61\u7684\u8cc7\u6599\u96fb\u8166\u8d8a\u96e3\u5b78\u7fd2\n\n\n\n\nSample\n\n\nMnist\u4f7f\u7528Multilayer perceptron \u662f\u4f7f\u7528raw pixel\u8cc7\u6599 \u6e96\u78ba\u5ea691%\n\nMnist\u4f7f\u7528CNN\u6e96\u78ba\u5ea6\u5927\u7d0498~99%\n\n\u7531\u6b64\u53ef\u77e5\u7576Raw\u7684\u8cc7\u6599\u8b8a\u6210Concrete\u96fb\u8166\u5c31\u80fd\u5b78\u5f97\u8d8a\u4f86\u8d8a\u597d\n\n\n\n\n\n\n\n\n\n\nConcrete(\u5305\u542b\u4eba\u985e\u667a\u6167)\n\n\nRaw\n\n\nabstract(\u6700\u62bd\u8c61)\n\n\n\n\n\n\n\n\n\n\n\u8cc7\u6599\u88e1\u9762\u6709\u4eba\u985e\u7684\u667a\u6167,\u6709\u9810\u5148\u8655\u7406\u7684\u8cc7\u6599,\u7bc4\u4f8b:\u8fa8\u8b581\u8ddf5 \u7528\u4eba\u8166\u5beb\u4e0b\u898f\u5247\u5230\u5e95\u9019\u5f35\u5716\u6709\u6c92\u6709\u5c0d\u7a31\u6216\u662f\u5bc6\u5ea6\u5982\u4f55\n\n\n\u539f\u59cb\u7684\u8cc7\u6599,\u97f3\u8a0a,bit,pixel,\u7bc4\u4f8b:\u76f4\u63a5\u8f38\u5165pixel,\u4f46pixel\u6c92\u6709\u4eba\u985e\u667a\u6167\u53ea\u662f\u55ae\u7d14\u7684\u6578\u64da\n\n\n\u62bd\u8c61\u7684\u8cc7\u6599ex.\u4f7f\u7528\u8005id\u7de8\u865f\n\n\n\n\n\n\n\n\n\n\n\u8a55\u4f30\u6a5f\u5668\u5b78\u7fd2\u6f14\u7b97\u6cd5\n\u00b6\n\n\n\n\nQuestion\n\n\n\u5230\u5e95\u6a5f\u5668\u5b78\u7fd2\u5f9e\u8cc7\u6599\u88e1\u9762\u80fd\u4e0d\u80fd\u5b78\u5230\u6771\u897f\u4e26\u4e14\u9810\u6e2c\uff1f\n\n\n\n\n\n\n\n\ng:\u6a5f\u5668\u5b78\u7fd2\u5b78\u5230\u7684\u65b9\u7a0b\u5f0f \n\n\nf:\u5922\u60f3\u6c42\u51fa\u7684\u65b9\u7a0b\u5f0f\n\n\n\n\n\n\n\"\u76ee\u524d\"\u770b\u8d77\u4f86\u6a5f\u5668\u5b78\u7fd2\u7121\u6cd5\u5f9e\u8cc7\u6599\u4f86\u9810\u6e2c\u672a\u77e5\n\n\n\u96d6\u7136\u5728\u5df2\u770b\u904e\u5f97\u8cc7\u6599\u5167g=f,\u4f46\u662f\u672a\u770b\u904e\u7684\u8cc7\u6599\u5167\u7121\u6cd5\u4fdd\u8b49g=f,\u6240\u4ee5\"\u76ee\u524d\"\u53ea\u80fd\u8aaa\u6a5f\u5668\u5b78\u7fd2\u6f14\u7b97\u6cd5\u53ef\u80fd\u5b78\u4e0d\u5230\u6771\u897f\n\n\n\n\n\n\nHoeffding's inequality\u57fa\u672c\u6982\u5ff5\n\u00b6\n\n\n\u9019\u88e1\u4ee5\u5f48\u73e0\u505a\u8209\u4f8b\n\n\n\n\n\n\nSummary\n\n\n\u62bd\u4e00\u6b21\n\\mu \u8ddf \\nu\n\\mu \u8ddf \\nu\n\u8aa4\u5dee\u8d85\u904e\n\\epsilon\n\\epsilon\n\u7684\u6a5f\u7387\u5f88\u4f4e,Hoeffding's inequality\u80fd\u8aaa\u660e\u8a72\u6a5f\u7387\u6709\u591a\u4f4e\n\n\n\n\n\u7b26\u865f\u89e3\u91cb\n\u00b6\n\n\n\n\n\\mu\n\\mu\n alway unknow\n\n\nFor example ,when we count the winning percentage of the presidential election, \nIt is impossible to sample the \"entire nation\"(\n\\mu\n\\mu\n)\n\n\n\n\n\n\nN=\u62bd\u51fa\u591a\u5c11\u500b\n\n\n\\nu\n\\nu\n=\u6a58\u8272\u6a5f\u7387\u5728N\u4e2d\n\n\n\\mu\n\\mu\n=\u6a58\u8272\u7684\u6a5f\u7387\u5360\u5168\u90e8\n\u901a\u5e38\u672a\u77e5\n\u901a\u5e38\u672a\u77e5\n\n\n\\epsilon\n\\epsilon\n=\n\\nu\n\\nu\n\u8ddf\n\\mu\n\\mu\n\u7684\u8aa4\u5dee\n\n\ng:\u63a5\u8fd1\u771f\u5be6f\u7684\u6f14\u7b97\u6cd5(\u51fd\u6578)\n\n\nf:\u5922\u60f3\u5f97\u5230\u7684\u6f14\u7b97\u6cd5(\u51fd\u6578)\n\n\nh:g\u9078\u51fa\u7684Hypothesis\n\n\n\n\n\u56fa\u5b9a\n\\epsilon\n\\epsilon\n,\u4e00\u6b21\u62bd\u8d8a\u591a\u6a23\u672c\n\\epsilon\n\\epsilon\n\u8aa4\u5dee\n\u8aa4\u5dee\n\u6a5f\u7387\u8d8a\u5c0f\n\n\n\u56fa\u5b9aN,\n\\epsilon\n\\epsilon\n\u8aa4\u5dee\n\u8aa4\u5dee\n\u8d8a\u5927\u7684\u6a5f\u7387\u8d8a\u5c0f\n\n\n\u8b49\u660e!\u62bd\u51fa\u7684\u8d8a\u591a\nN\nN\n\u8d8a\u5927\n\\nu\n\\nu\n\u8ddf\n\\mu\n\\mu\n\u8d8a\u63a5\u8fd1\n\n\n\n\n\\nu\n\\nu\n\u548c\n\u548c\n\\mu\n\\mu\n\u5927\u6982\u5dee\u4e0d\u591a\u662f\u5c0d\u7684,\u5728\n\\epsilon\n\\epsilon\n\u5bb9\u5fcd\u8aa4\u5dee\u5167\n\n\n\n\n\n\nprobably:\u5927\u6982\n\n\n\n\n\n\napproximately:\u5dee\u4e0d\u591a\n\n\n\n\n\n\n\u7df4\u7fd2\u984c\n\u00b6\n\n\n\n\n\n\nHoeffding's inequality\u61c9\u7528\u5728\u6a5f\u5668\u5b78\u7fd2\n\u00b6\n\n\n\\nu \\Longrightarrow E_{in}(h)\n\\nu \\Longrightarrow E_{in}(h)\n\n\n\\mu \\Longrightarrow E_{out}(h)\n\\mu \\Longrightarrow E_{out}(h)\n\n\n\u7b26\u865f\u89e3\u91cb\n\u00b6\n\n\n\n\nE_{in}(h)\nE_{in}(h)\n:\u5728\u5df2\u77e5\u7684\u8cc7\u6599\u5167,\u8a72\u6f14\u7b97\u6cd5\u76ee\u524d\u72af\u932f\u7684\u6a5f\u7387(\u8d8a\u5c0f\u6e96\u78ba\u7387\u8d8a\u9ad8)\n\n\nE_{out}(h)\nE_{out}(h)\n:\u8a72\u6f14\u7b97\u6cd5\u5728\"\u5168\u90e8\"\u8cc7\u6599(\u4e0a\u5e1d\u8996\u89d2)\u5167\u72af\u932f\u7684\u6a5f\u7387(\u540c\u5e38\u672a\u77e5)\n\n\nN\nN\n:\u8cc7\u6599\u6578\u91cf\n\n\nM\nM\n:Hypothesis\u5047\u8aaa\u7684\u6578\u91cf\n\n\n\\color{red}{Bad}:E_{in}\n\\color{red}{Bad}:E_{in}\n\u8ddf\nE_{out}\nE_{out}\n\u8aa4\u5dee\u5927\u65bc\n\\epsilon\n\\epsilon\n\u7684\u60c5\u6cc1\n\n\n\n\n\n\n\u55ae\u4e00Hypothesis\n\u00b6\n\n\n\n\nSummary\n\n\n\u7528\u9014:\u78ba\u8a8d\u8a72Hypothesis\u597d\u4e0d\u597d h\n\\approx\n\\approx\nf\n\n\n\n\n\u63a5\u4e0b\u4f86\u6703\u6539\u5beb\u525b\u525b\u7684\u57fa\u672c\u6982\u5ff5,\u6539\u5beb\u6210\u9019\u500b\u516c\u5f0f\n\n\n\nHypothesis\u8aaa\u660e\u7576\u6211\u53ea\u6709\u4e00\u500bh\uff08Hypothesis\uff09,\u5f9e\u9019\u9ebc\u591a\u500b\nD\nD\n\u62bd\u5230\n\\color{red}{Bad}\n\\color{red}{Bad}\n\u7684\u6a5f\u7387\u5c0f\u65bc\u7b49\u65bc\n2e^{-2\\epsilon^{2}N}\n2e^{-2\\epsilon^{2}N}\n\n\nD_{n}\nD_{n}\n:\u6bcf\u6b21\u62bd\u51fa\u7684\u8cc7\u6599 \n\n\n\n\u986f\u793a\u6578\u5b78\n\u00b6\n\n\n\n\nCode\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nmatplotlib.patches\n \nas\n \nmpatches\n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\nfig\n.\nsuptitle\n(\nr\n'$\\mathbb{P}[|E_{in}(h)-E_{out}(h)|>\\epsilon]\\leq2e^{-2\\epsilon^{2}N}$'\n,\nfontsize\n=\n20\n,\ncolor\n=\n\"gray\"\n)\n\n\n\n\n#FIG1\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n1\n)\n\n\nN\n=\n1000\n\n\ne\n=\nnp\n.\narange\n(\n0\n,\n1\n,\n0.00001\n)\n\n\ny\n=\n \n2\n*\nnp\n.\nexp\n((\n-\n2\n*\ne\n**\n2\n)\n*\nN\n)\n\n\nfor\n \ni\n \nin\n \ny\n:\n\n    \nif\n \ni\n<\n0.1\n:\n\n        \nprint\n(\ni\n)\n\n        \nplt\n.\nplot\n(\nnp\n.\narange\n(\n0\n,\n1\n,\n0.00001\n),\ni\n*\nnp\n.\nones\n(\nlen\n(\nnp\n.\narange\n(\n0\n,\n1\n,\n0.00001\n))),\n\"r-\"\n,\nlabel\n=\nr\n\"$\\mathbb{P}$<=0.1\"\n)\n\n        \nbreak\n\n\nplt\n.\nxlabel\n(\n\"\u03b5\"\n)\n\n\nplt\n.\nylabel\n(\n\"$\\mathbb{P}$\"\n)\n\n\nplt\n.\nplot\n(\ne\n,\ny\n,\ncolor\n=\n'b'\n,\nalpha\n=\n1\n,\nlabel\n=\n\"N=\"\n+\nstr\n(\nN\n))\n\n\nplt\n.\nlegend\n()\n\n\n\n#FIG2\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n2\n)\n\n\ne\n=\n0.1\n\n\nN\n=\nnp\n.\narange\n(\n0\n,\n1000\n,\n1\n)\n\n\ny\n=\n \n2\n*\nnp\n.\nexp\n((\n-\n2\n*\ne\n**\n2\n)\n*\nN\n)\n\n\nfor\n \ni\n \nin\n \ny\n:\n\n    \nif\n \ni\n<\n0.1\n:\n\n        \nprint\n(\ni\n)\n\n        \nplt\n.\nplot\n(\nnp\n.\narange\n(\n0\n,\n1000\n,\n1\n),\ni\n*\nnp\n.\nones\n(\n1000\n),\n\"r-\"\n,\nlabel\n=\nr\n\"$\\mathbb{P}$<=0.1\"\n)\n\n        \nbreak\n\n\n\n\nplt\n.\nplot\n(\nN\n,\ny\n,\n\"b-\"\n,\nlabel\n=\n\"e=\"\n+\nstr\n(\ne\n))\n\n\nplt\n.\nlegend\n()\n\n\nplt\n.\nxlabel\n(\n\"N\"\n)\n\n\nplt\n.\nylabel\n(\n\"$\\mathbb{P}$\"\n)\n\n\nplt\n.\ntight_layout\n()\n\n\n\n\nplt\n.\nsubplots_adjust\n(\ntop\n=\n0.8\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\u7df4\u7fd2\u984c\n\u00b6\n\n\n\n\n\u984c\u76ee\uff1a\u4f60\u7684\u670b\u53cb\u767c\u73fe\u4e00\u500b\u80a1\u5e02\u7684\u898f\u5247\"\u7576\u65e9\u4e0a\u4e0a\u6f32 \u4e0b\u5348\u5c31\u4e0b\u8dcc\",\u70ba\u4e86\u78ba\u8a8d\u9019\u689d\u898f\u5247\u4f60\u5c31\u5f9e\u904e\u53bb\u5341\u5e74\u8cc7\u6599\u88e1\u9762\u62bd\u51fa100\u7b46\u8cc7\u6599,\u767c\u73fe80\u7b46\u662f\u6b63\u78ba\u7684,\u4ec0\u9ebc\u7d50\u8ad6\u4f60\u53ef\u4ee5\u8aaa?\n\n\n1.\u85c9\u7531\u5229\u7528\u8a72\u898f\u5247\u5728\u672a\u4f86\u7684100\u5929\u8cfa\u9322,\u4f60\"\u80af\u5b9a\"\u5c07\u6703\u8b8a\u6210\u6709\u9322\u4eba(\u4e0d\u80fd\u9019\u9ebc\u80af\u5b9a)\n\n\n2.\u7576\u672a\u4f86100\u5929\u80a1\u5e02\u8d70\u52e2\u8207\u5341\u5e74\u4ee5\u4f86\u7684\u6b77\u53f2\u8cc7\u6599\u5f88\u63a5\u8fd1,\u5229\u7528\u8a72\u898f\u5247\u5728\u672a\u4f86\u7684100\u5929\u8cfa\u9322,\u4f60\"\u5f88\u53ef\u80fd\"\u6703\u8b8a\u6210\u6709\u9322\u4eba(\u6b63\u78ba)\n\n\n3.\u85c9\u7531\u5f9e20\u500b\u670b\u53cb\u88e1\u9762\u9078\u4e00\u500b\u6700\u597d\u7684\u898f\u5247,\u4f86\u7576\u4f5c\u6295\u8cc7\u672a\u4f86100\u5929\u80a1\u5e02\u7684\u65b9\u6cd5,\u4f60\u5f88\u6709\u53ef\u80fd\u8b8a\u6210\u6709\u9322\u4eba(\u932f\uff01\u56e0\u70baHypothesis\u53ea\u6709\u4e00\u500b\uff08\"\u7576\u65e9\u4e0a\u4e0a\u6f32 \u4e0b\u5348\u5c31\u4e0b\u8dcc\"\uff09\u4e0d\u80fd\u9078\u64c7)\n\n\n4.\u4f60\u80af\u5b9a\u6703\u8b8a\u6709\u9322\u4eba,\u5982\u679c\u4f60\u4ee5\u524d\u5c31\u4f7f\u7528\u8a72\u898f\u5247(\u932f \u56e0\u70ba\u4f60\u53ea\u662f\u62bd\u51fa100\u5929\u4f86\u505a\u5206\u4f48,\u641e\u4e0d\u597d\u5341\u5e74\u4f86\u7684\u8cc7\u6599\u5206\u4f48\u5f88\u4e0d\u4e00\u6a23)\n\n\n\n\n\u591a\u500bhypothesis set\n\u00b6\n\n\n\n\nSummary\n\n\n\u7528\u9014\uff1a\u7576hypothesis\u6709\u9650,\u53ef\u4ee5\u78ba\u8a8d\u8a72\u6a5f\u5668\u5b78\u7fd2\u6f14\u7b97\u6cd5\u597d\u4e0d\u597d\n\n\n\n\n\u63a8\u5c0e\n\u00b6\n\n\n\n\n\n\n\n\n\u53ef\u4ee5\u8a2d\u5b9ahypothesis set\u6709\u591a\u5c11 \u53ef\u4ee5\u8a08\u7b97\u51fa\u7576\u4f60\u7684hypothesis set\u8d8a\u5927 N\u5c31\u8981\u8d8a\u5927,\u8cc7\u6599\u624d\u6703\u6e96\u78ba\n\n\n\u986f\u793a\u6578\u5b78\n\u00b6\n\n\n\n\nCode\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nmatplotlib.widgets\n \nimport\n \nSlider\n,\n \nButton\n,\n \nRadioButtons\n\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\n#equation title\n\n\nplt\n.\nxlabel\n(\n'$\\epsilon$'\n)\n\n\nfig\n.\nsuptitle\n(\nr\n'$\\mathbb{P}[|E_{in}(h)-E_{out}(h)|>\\epsilon]\\leq$2$Me^{-2\\epsilon^{2}N}$'\n,\nfontsize\n=\n20\n,\ncolor\n=\n\"black\"\n,\nalpha\n=\n0.6\n)\n\n\nplt\n.\nsubplots_adjust\n(\nleft\n=\n0.25\n,\n \nbottom\n=\n0.25\n)\n\n\nhypothesis\n=\n1\n \n#set how many hypothesis set\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0.0\n,\n \n1.0\n,\n \n0.001\n)\n\n\n\na0\n \n=\n \n5\n\n\n\n\ns\n=\n2\n*\nhypothesis\n*\nnp\n.\nexp\n((\n-\n2\n*\nx\n**\n2\n)\n*\na0\n)\n\n\nl\n,\n \n=\n \nplt\n.\nplot\n(\nx\n,\n \ns\n,\n \nlw\n=\n2\n,\n \ncolor\n=\n'red'\n)\n\n\n#plt.axis([0, 1, -10, 10])\n\n\n\naxcolor\n \n=\n \n'lightgoldenrodyellow'\n\n\n\naxamp\n \n=\n \nplt\n.\naxes\n([\n0.25\n,\n \n0.09\n,\n \n0.65\n,\n \n0.03\n],\n \nfacecolor\n=\naxcolor\n)\n\n\n\n\nsamp\n \n=\n \nSlider\n(\naxamp\n,\n \n'N'\n,\n \n0.0\n,\n \n1000.0\n,\n \nvalinit\n=\na0\n)\n\n\n\n\n\nhy\n \n=\n \nplt\n.\naxes\n([\n0.25\n,\n \n0.13\n,\n \n0.65\n,\n \n0.03\n],\n \nfacecolor\n=\naxcolor\n)\n\n\n\n\nhy_ok\n \n=\n \nSlider\n(\nhy\n,\n \n'Hypothesis set(M)'\n,\n \n0.0\n,\n \n1000.0\n,\n \nvalinit\n=\nhypothesis\n)\n\n\n\n\ndef\n \nupdate\n(\nval\n):\n\n    \namp\n \n=\n \nsamp\n.\nval\n\n    \nhyy\n=\nhy_ok\n.\nval\n\n    \nl\n.\nset_ydata\n(\n2\n*\nhyy\n*\nnp\n.\nexp\n((\n-\n2\n*\nx\n**\n2\n)\n*\namp\n))\n\n    \nfig\n.\ncanvas\n.\ndraw_idle\n()\n\n\n\nsamp\n.\non_changed\n(\nupdate\n)\n\n\nhy_ok\n.\non_changed\n(\nupdate\n)\n\n\nresetax\n \n=\n \nplt\n.\naxes\n([\n0.8\n,\n \n0.025\n,\n \n0.1\n,\n \n0.04\n])\n\n\nbutton\n \n=\n \nButton\n(\nresetax\n,\n \n'Reset'\n,\n \ncolor\n=\naxcolor\n,\n \nhovercolor\n=\n'0.975'\n)\n\n\n\n\ndef\n \nreset\n(\nevent\n):\n\n    \nhy_ok\n.\nreset\n()\n\n    \nsamp\n.\nreset\n()\n\n\nbutton\n.\non_clicked\n(\nreset\n)\n\n\n\nrax\n \n=\n \nplt\n.\naxes\n([\n0.025\n,\n \n0.5\n,\n \n0.15\n,\n \n0.15\n],\n \nfacecolor\n=\naxcolor\n)\n\n\nradio\n \n=\n \nRadioButtons\n(\nrax\n,\n \n(\n'red'\n,\n \n'blue'\n,\n \n'green'\n),\n \nactive\n=\n0\n)\n\n\n\n\n\ndef\n \ncolorfunc\n(\nlabel\n):\n\n    \nl\n.\nset_color\n(\nlabel\n)\n\n    \nfig\n.\ncanvas\n.\ndraw_idle\n()\n\n\nradio\n.\non_clicked\n(\ncolorfunc\n)\n\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\nConclusion\n\u00b6\n\n\n\n\nNote\n\n\n\\mathbb{P}[|E_{in}(h)-E_{out}(h)|>\\epsilon]\\leq\n\\mathbb{P}[|E_{in}(h)-E_{out}(h)|>\\epsilon]\\leq\n2\nMe^{-2\\epsilon^{2}N}\nMe^{-2\\epsilon^{2}N}\n\nIf Machine Learning algorithm's Hypothesis is  \nfinite\n\nand \nN\nN\n is large enough ,we can say \nE_{out}(g)\\approx E_{in}(g)\nE_{out}(g)\\approx E_{in}(g)\n\nso we proof we can learning\n\n\n\n\n\n\n\n\nQuestion\n\n\nIf Hypothesis is infinite what happen?\n\n\n\n\n\n\n\u7df4\u7fd2\u984c1\n\u00b6\n\n\n\n\u984c\u76ee:\u8acb\u9078\u51fa\u932f\u8aa4\u7684\n\n\n1.\u56e0\u70ba\nx_{1}\nx_{1}\n\u8ddf\nx_{2}\nx_{2}\n\u4e0d\u540c\u6240\u4ee5\nh_{1}\nh_{1}\n\u8ddf\nh_{2}\nh_{2}\n\u4e0d\u540c\n\n\n2.\u96d6\u7136\nh_{1}\nh_{1}\n\u8ddf\nh_{3}\nh_{3}\n\u8f38\u5165\u4e0d\u5b8c\u5168\u4e00\u6a23\u4f46\u662f\u56e0\u70ba\u53ea\u5dee\u6b63\u8ca0\u865f\u6240\u4ee5\u88e1\u9762\u8cc7\u6599\u7684\u6bd4\u4f8b\u9084\u662f\u4e00\u6a23\n\n\n3.\u6309\u7167\u984c\u76ee\u4f86\u8aaahypothesis\u6709\u56db\u500b\u5e36\u5165\u516c\u5f0f\u5c31\u5982\u984c\n\n\n4.\u4f46\u662f\u7531\u65bc\u8cc7\u6599\u6b63\u8ca0\u7684\u95dc\u897f\nh_{1}=h_{3},h_{2}=h_{4}\nh_{1}=h_{3},h_{2}=h_{4}\n\u6240\u4ee5\u6263\u6389\u91cd\u8907\u7684\u90e8\u4efd,hypothesis\u5269\u4e0b\u5169\u500b\u6240\u4ee5\u8a72\u984c\u4e5f\u6b63\u78ba\uff08\n\u4e4b\u5f8c\u6703\u5229\u7528\u522a\u53bb\u91cd\u8907\u7684\u90e8\u4efd\u4f86\u6c42\u51fa\u7576\u9047\u5230\u7121\u9650\u500bhypothesis\u6642\u8a72\u600e\u9ebc\u89e3\u6c7a\n\uff09\n\n\n\n\n\u7df4\u7fd2\u984c2\n\u00b6\n\n\n\n\u984c\u76ee:\u8981\u7b26\u5408E\n\\tiny{in}\n\\tiny{in}\n\u548cE\n\\tiny{out}\n\\tiny{out}\n\u8aa4\u5dee\u8d85\u904e0.1(\n\\epsilon\n\\epsilon\n)\u7684\u6a5f\u7387\u5c0f\u65bc\u7b49\u65bc0.05(\n\\delta\n\\delta\n)hypothesis set\u6709100\u500b(M)\u6211\u7684N\u6700\u5c11\u8981\u5e7e\u500b\n\n\n\\tiny{out}\n\\tiny{out}\n\n\n\\frac{1}{2 \\epsilon^2}\n\\frac{1}{2 \\epsilon^2}\n\n\n$ N= \\frac{1}{2 \\epsilon^2}ln \\frac{2M}{\\delta} $\n\u7b54\u6848\u70ba2\n\n\n\n\n\u9047\u5230\u7121\u9650Hypothesis\u7684\u554f\u984c\n\u00b6\n\n\nPLA\u6f14\u7b97\u6cd5\u7684hypothesis set\u6709\u7121\u9650\u591a\u6240\u4ee5\u600e\u9ebc\u8fa6?\n\n\n\u56e0\u70ba\u5728\u5e73\u9762\u4e0a\u6709\u7121\u9650\u591a\u689d\u7dda\u6240\u4ee5pla\u7684hypothesis set\u6709\u7121\u9650\u591a\u500b\u90a3\u8a72\u600e\u8a08\u7b97?\n\n\u56e0\u70ba\u6709\u8a31\u591a\u91cd\u758a\u7684hypothesis set\n\n\u5e95\u4e0b\u628ahypothesis set\u7528dichotomy\u4f86\u66ff\u63db,\u56e0\u70bahypothesis set\u7121\u9650\u591a\u7121\u6cd5\u8a08\u7b97\n\n\u4ee5PLA\u8209\u4f8b:\n\n\n\n\n\n\nhypothesis set \u6240\u6709\u53ef\u80fd\u7684\u7dda(\u4ee5\u4e0a\u5716\u4f86\u8aaa\u6709\u7121\u9650\u591a\u7a2e\u4f86\u5206\u958b\u4e00\u500b\u9ede)\n\n\ndichotomy \u8cc7\u6599\u5206\u7fa4\u7684\u65b9\u6cd5(\u6709\u5169\u7a2e\u65b9\u6cd5\u4e0a\u5716\u7684\u5169\u689d\u7dda)\n\n\n\n\n\u6240\u4ee5\u8981\u7b97\u51fa\u771f\u6b63\u7684\u6210\u9577\u51fd\u6578\n\u9700\u8981\u7528\u5230\u6a5f\u7387\u7684\u77e5\u8b58\n\u9700\u8981\u7528\u5230\u6a5f\u7387\u7684\u77e5\u8b58\n\n\n\u5f71\u7247\n\n\n\n\n\n\n\\tiny{H}(N)\n\\tiny{H}(N)\n:dichotomy\n\n\n\n\n\n\nbreak point:\u7b2c\u4e00\u6b21\u6709\u767c\u751f\"\u5168\u90e8\"\u7121\u6cd5\u89e3\u6c7a\u7684N(\u53ea\u8981\u627e\u5230\u4e00\u500b\u6392\u5217\u90fd\u53ef\u4ee5\u89e3\u6c7a\u5c31\u4e0d\u662fbreakpoint)\n\n\n\n\n\n\nbreak point \u8a08\u7b97\u65b9\u6cd5\n\n\n\u4f8b\u5982perceptrons\n\n\n\n\n\n\n\u9019\u500b\u5f62\u72c0\u4e0b\u7684\u6392\u5217\u6bcf\u500b\u90fd\u53ef\u4ee5\u7528\u4e00\u689d\u7dda\u5206\u958b\u6240\u4ee5breakpoint\u4e0d\u662f3\n\n\n\n\n\n\n\n\n\u9019\u500b\u5f62\u72c0\u4e0b\u767c\u751f\u7121\u6cd5\u7528\u7dda\u5206\u958b,\u5176\u4ed6\u5f62\u72c0\u4e5f\u767c\u751f\u7121\u6cd5\u5168\u90e8\u5206\u958b\u6240\u4ee5breakpoint\u70ba4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\\tiny{H}(N)\n\\tiny{H}(N)\n=O(\nN^{breakpoint-1}\nN^{breakpoint-1}\n)\n\n\npositive rays\n\n\npositive intervals\n\n\nconvex\n\n\n2D perceptrons\n\n\n\n\n\n\n\n\n\n\nm\n\\tiny{H}(N)\n\\tiny{H}(N)\n\n\nN+1 =O(N)\n\n\n\\frac{1}{2}N^2+\\frac{1}{2}N+1\n\\frac{1}{2}N^2+\\frac{1}{2}N+1\n=O(\nN^2\nN^2\n)\n\n\n2^N\n2^N\n\n\nO(N^3\nO(N^3\n)\n\n\n\n\n\n\nbreak point\n\n\n2\n\n\n3\n\n\nNone\n\n\n4\n\n\n\n\n\n\n\n\n\u6700\u5f8c\u5982\u679c\u8981\u7528dichotomy\u53d6\u4ee3hypothesis set\n\n\n\n\n\u8b49\u660e\u4e0a\u5716",
            "title": "Introduction"
        },
        {
            "location": "/Machine Learning/Introduction/#introduction",
            "text": "\u4ec0\u9ebc\u6642\u5019\u53ef\u4ee5\u4f7f\u7528\u6a5f\u5668\u5b78\u7fd2\uff1f\n 1.\u8981\u6709\u898f\u5247 2.\u4e0d\u5bb9\u6613\u5beb\u51fa\u4f86\u7684\u898f\u5247(\u8fa8\u8b58\u5716\u7247)3.\u6709\u8db3\u5920\u7684\u8cc7\u6599\n  \u6a5f\u5668\u5b78\u7fd2\u4f5c\u6cd5\uff1f\n  \u5f9e\u8cc7\u6599\u51fa\u767c\u53bb\u5b78\u7fd2",
            "title": "Introduction"
        },
        {
            "location": "/Machine Learning/Introduction/#learning-model",
            "text": "\u76ee\u6a19\uff1a\u5f9eA\u88e1\u9762\u5f88\u591a\u500bH\u4e2d\u9078\u4e00\u500b\u4f86\u4ee3\u8868g,\u5e0c\u671bg\u8d8a\u63a5\u8fd1f\n\u53e6\u4e00\u7a2e\u89e3\u91cb\u65b9\u6cd5\uff1a\u5728\u65b9\u7a0b\u5f0f\u88e1\u9762,\u6709H\u500b\u89e3,g\u5c31\u662f\u9078\u5230\u6700\u597d\u7684\u89e3    D:\u8ddff\u6709\u95dc\u7684\u8cc7\u6599   A:\u6a5f\u5668\u5b78\u7fd2\u7684\u6f14\u7b97\u6cd5   H:A\u6f14\u7b97\u6cd5\u88e1\u9762\u6709\u5f88\u591a\u500b\u5047\u8aaaH  g:\u63a5\u8fd1\u771f\u5be6f\u7684\u6f14\u7b97\u6cd5(\u51fd\u6578)   f:\u5922\u60f3\u5f97\u5230\u7684\u6f14\u7b97\u6cd5(\u51fd\u6578)    Example  D:your data input to x \nA: machine learning algorithm is y=ax  \nH:H\u2208 \\mathbb{Q} \\mathbb{Q}  all possible in this algorithm {y=0.3x,y=6x,y=6.7x...} \ng: our machine learning get answer y=2.9999x it close to f \nf:we want to get this function y=3x",
            "title": "Learning Model"
        },
        {
            "location": "/Machine Learning/Introduction/#types-of-machine-learning",
            "text": "",
            "title": "Types of Machine Learning"
        },
        {
            "location": "/Machine Learning/Introduction/#output-space",
            "text": "(\u8981\u554f\u4ec0\u9ebc\u554f\u984c)     Binary Classification  Multiclass classification  Regression  Structured Learning",
            "title": "Output Space"
        },
        {
            "location": "/Machine Learning/Introduction/#data-label",
            "text": "(\u62ff\u5230\u4e0d\u540c\u6a19\u8a18\u7684\u8cc7\u6599,\u8981\u600e\u8655\u7406)     Supervised  Semi-supervised      Sample:Classification      \u5df2\u7d93\u6a19\u8a18\u597d\u8cc7\u6599  \u53c8\u53ef\u5206\u6210 \u751f\u6210\u6a21\u578b(Generative Model)  \u5224\u522b\u6a21\u578b(Discriminative Model)         Unsupervised  Reinforcement Learning (\u589e\u5f37\u5f0f\u5b78\u7fd2)      Sample: Clustering  clustering(\u5206\u7fa4)density estimation:\u54ea\u4e9b\u5730\u65b9\u6bd4\u8f03\u7a20\u5bc6\u61c9\u7528ex.\u54ea\u88e1\u6bd4\u8f03\u5e38\u767c\u751f\u4e8b\u6545outlier detection:\u627e\u51fa\u7570\u5e38\u7684\u8cc7\u6599,\u56e0\u70ba\u7570\u5e38\u8cc7\u6599\u5f88\u5c11  \u8ddf\u8a13\u7df4\u5bf5\u7269\u4e00\u6a23,\u5c0d\u7d66\u734e\u52f5,\u932f\u7d66\u61f2\u7f70",
            "title": "Data Label"
        },
        {
            "location": "/Machine Learning/Introduction/#protocol",
            "text": "\u8f38\u5165\u8cc7\u6599\u7684\u65b9\u6cd5 f \\Longrightarrow (x_{n},y_{n}) f \\Longrightarrow (x_{n},y_{n})     batch  Online  active      \u6210\u6279\u7684\u8cc7\u6599\u4f86\u5b78\u7fd2  \u4e00\u7b46\u4e00\u7b46\u8cc7\u6599\u4f86\u5b78\u7fd2,\u9047\u5230\u932f\u8aa4\u5728\u6539\u6b63ex.PLA,Reinforcement Learning  \u6a5f\u5668\u81ea\u5df1\u554f\u554f\u984c,\u7576\u8cc7\u6599\u5f88\u5c11\u6216\u5f88\u8cb4\u53ef\u4ee5\u4f7f\u7528,\u4e5f\u5e0c\u671b\u6a5f\u5668\u5b78\u7fd2\u901f\u5ea6\u52a0\u5feb\u8ddf\u4eba\u4e00\u6a23ex.\u6a5f\u5668\u81ea\u5df1\u5beb\u4e00\u500b\u6578\u5b57,\u53cd\u904e\u4f86\u554f\u4eba\u4f86\u5b78\u7fd2",
            "title": "Protocol"
        },
        {
            "location": "/Machine Learning/Introduction/#input-space",
            "text": "\u8cc7\u6599\u7a2e\u985e \\mathcal{X} \\mathcal{X} \n\u8d8a\u62bd\u8c61\u7684\u8cc7\u6599\u96fb\u8166\u8d8a\u96e3\u5b78\u7fd2   Sample  Mnist\u4f7f\u7528Multilayer perceptron \u662f\u4f7f\u7528raw pixel\u8cc7\u6599 \u6e96\u78ba\u5ea691% \nMnist\u4f7f\u7528CNN\u6e96\u78ba\u5ea6\u5927\u7d0498~99% \n\u7531\u6b64\u53ef\u77e5\u7576Raw\u7684\u8cc7\u6599\u8b8a\u6210Concrete\u96fb\u8166\u5c31\u80fd\u5b78\u5f97\u8d8a\u4f86\u8d8a\u597d      Concrete(\u5305\u542b\u4eba\u985e\u667a\u6167)  Raw  abstract(\u6700\u62bd\u8c61)      \u8cc7\u6599\u88e1\u9762\u6709\u4eba\u985e\u7684\u667a\u6167,\u6709\u9810\u5148\u8655\u7406\u7684\u8cc7\u6599,\u7bc4\u4f8b:\u8fa8\u8b581\u8ddf5 \u7528\u4eba\u8166\u5beb\u4e0b\u898f\u5247\u5230\u5e95\u9019\u5f35\u5716\u6709\u6c92\u6709\u5c0d\u7a31\u6216\u662f\u5bc6\u5ea6\u5982\u4f55  \u539f\u59cb\u7684\u8cc7\u6599,\u97f3\u8a0a,bit,pixel,\u7bc4\u4f8b:\u76f4\u63a5\u8f38\u5165pixel,\u4f46pixel\u6c92\u6709\u4eba\u985e\u667a\u6167\u53ea\u662f\u55ae\u7d14\u7684\u6578\u64da  \u62bd\u8c61\u7684\u8cc7\u6599ex.\u4f7f\u7528\u8005id\u7de8\u865f",
            "title": "Input Space"
        },
        {
            "location": "/Machine Learning/Introduction/#_1",
            "text": "Question  \u5230\u5e95\u6a5f\u5668\u5b78\u7fd2\u5f9e\u8cc7\u6599\u88e1\u9762\u80fd\u4e0d\u80fd\u5b78\u5230\u6771\u897f\u4e26\u4e14\u9810\u6e2c\uff1f     g:\u6a5f\u5668\u5b78\u7fd2\u5b78\u5230\u7684\u65b9\u7a0b\u5f0f   f:\u5922\u60f3\u6c42\u51fa\u7684\u65b9\u7a0b\u5f0f    \"\u76ee\u524d\"\u770b\u8d77\u4f86\u6a5f\u5668\u5b78\u7fd2\u7121\u6cd5\u5f9e\u8cc7\u6599\u4f86\u9810\u6e2c\u672a\u77e5  \u96d6\u7136\u5728\u5df2\u770b\u904e\u5f97\u8cc7\u6599\u5167g=f,\u4f46\u662f\u672a\u770b\u904e\u7684\u8cc7\u6599\u5167\u7121\u6cd5\u4fdd\u8b49g=f,\u6240\u4ee5\"\u76ee\u524d\"\u53ea\u80fd\u8aaa\u6a5f\u5668\u5b78\u7fd2\u6f14\u7b97\u6cd5\u53ef\u80fd\u5b78\u4e0d\u5230\u6771\u897f",
            "title": "\u8a55\u4f30\u6a5f\u5668\u5b78\u7fd2\u6f14\u7b97\u6cd5"
        },
        {
            "location": "/Machine Learning/Introduction/#hoeffdings-inequality",
            "text": "\u9019\u88e1\u4ee5\u5f48\u73e0\u505a\u8209\u4f8b    Summary  \u62bd\u4e00\u6b21 \\mu \u8ddf \\nu \\mu \u8ddf \\nu \u8aa4\u5dee\u8d85\u904e \\epsilon \\epsilon \u7684\u6a5f\u7387\u5f88\u4f4e,Hoeffding's inequality\u80fd\u8aaa\u660e\u8a72\u6a5f\u7387\u6709\u591a\u4f4e",
            "title": "Hoeffding's inequality\u57fa\u672c\u6982\u5ff5"
        },
        {
            "location": "/Machine Learning/Introduction/#_2",
            "text": "\\mu \\mu  alway unknow  For example ,when we count the winning percentage of the presidential election, \nIt is impossible to sample the \"entire nation\"( \\mu \\mu )    N=\u62bd\u51fa\u591a\u5c11\u500b  \\nu \\nu =\u6a58\u8272\u6a5f\u7387\u5728N\u4e2d  \\mu \\mu =\u6a58\u8272\u7684\u6a5f\u7387\u5360\u5168\u90e8 \u901a\u5e38\u672a\u77e5 \u901a\u5e38\u672a\u77e5  \\epsilon \\epsilon = \\nu \\nu \u8ddf \\mu \\mu \u7684\u8aa4\u5dee  g:\u63a5\u8fd1\u771f\u5be6f\u7684\u6f14\u7b97\u6cd5(\u51fd\u6578)  f:\u5922\u60f3\u5f97\u5230\u7684\u6f14\u7b97\u6cd5(\u51fd\u6578)  h:g\u9078\u51fa\u7684Hypothesis   \u56fa\u5b9a \\epsilon \\epsilon ,\u4e00\u6b21\u62bd\u8d8a\u591a\u6a23\u672c \\epsilon \\epsilon \u8aa4\u5dee \u8aa4\u5dee \u6a5f\u7387\u8d8a\u5c0f  \u56fa\u5b9aN, \\epsilon \\epsilon \u8aa4\u5dee \u8aa4\u5dee \u8d8a\u5927\u7684\u6a5f\u7387\u8d8a\u5c0f  \u8b49\u660e!\u62bd\u51fa\u7684\u8d8a\u591a N N \u8d8a\u5927 \\nu \\nu \u8ddf \\mu \\mu \u8d8a\u63a5\u8fd1   \\nu \\nu \u548c \u548c \\mu \\mu \u5927\u6982\u5dee\u4e0d\u591a\u662f\u5c0d\u7684,\u5728 \\epsilon \\epsilon \u5bb9\u5fcd\u8aa4\u5dee\u5167    probably:\u5927\u6982    approximately:\u5dee\u4e0d\u591a",
            "title": "\u7b26\u865f\u89e3\u91cb"
        },
        {
            "location": "/Machine Learning/Introduction/#_3",
            "text": "",
            "title": "\u7df4\u7fd2\u984c"
        },
        {
            "location": "/Machine Learning/Introduction/#hoeffdings-inequality_1",
            "text": "\\nu \\Longrightarrow E_{in}(h) \\nu \\Longrightarrow E_{in}(h)  \\mu \\Longrightarrow E_{out}(h) \\mu \\Longrightarrow E_{out}(h)",
            "title": "Hoeffding's inequality\u61c9\u7528\u5728\u6a5f\u5668\u5b78\u7fd2"
        },
        {
            "location": "/Machine Learning/Introduction/#_4",
            "text": "E_{in}(h) E_{in}(h) :\u5728\u5df2\u77e5\u7684\u8cc7\u6599\u5167,\u8a72\u6f14\u7b97\u6cd5\u76ee\u524d\u72af\u932f\u7684\u6a5f\u7387(\u8d8a\u5c0f\u6e96\u78ba\u7387\u8d8a\u9ad8)  E_{out}(h) E_{out}(h) :\u8a72\u6f14\u7b97\u6cd5\u5728\"\u5168\u90e8\"\u8cc7\u6599(\u4e0a\u5e1d\u8996\u89d2)\u5167\u72af\u932f\u7684\u6a5f\u7387(\u540c\u5e38\u672a\u77e5)  N N :\u8cc7\u6599\u6578\u91cf  M M :Hypothesis\u5047\u8aaa\u7684\u6578\u91cf  \\color{red}{Bad}:E_{in} \\color{red}{Bad}:E_{in} \u8ddf E_{out} E_{out} \u8aa4\u5dee\u5927\u65bc \\epsilon \\epsilon \u7684\u60c5\u6cc1",
            "title": "\u7b26\u865f\u89e3\u91cb"
        },
        {
            "location": "/Machine Learning/Introduction/#hypothesis",
            "text": "Summary  \u7528\u9014:\u78ba\u8a8d\u8a72Hypothesis\u597d\u4e0d\u597d h \\approx \\approx f   \u63a5\u4e0b\u4f86\u6703\u6539\u5beb\u525b\u525b\u7684\u57fa\u672c\u6982\u5ff5,\u6539\u5beb\u6210\u9019\u500b\u516c\u5f0f  Hypothesis\u8aaa\u660e\u7576\u6211\u53ea\u6709\u4e00\u500bh\uff08Hypothesis\uff09,\u5f9e\u9019\u9ebc\u591a\u500b D D \u62bd\u5230 \\color{red}{Bad} \\color{red}{Bad} \u7684\u6a5f\u7387\u5c0f\u65bc\u7b49\u65bc 2e^{-2\\epsilon^{2}N} 2e^{-2\\epsilon^{2}N}  D_{n} D_{n} :\u6bcf\u6b21\u62bd\u51fa\u7684\u8cc7\u6599",
            "title": "\u55ae\u4e00Hypothesis"
        },
        {
            "location": "/Machine Learning/Introduction/#_5",
            "text": "Code  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44 import   numpy   as   np  import   matplotlib.pyplot   as   plt  import   matplotlib.patches   as   mpatches  fig   =   plt . figure ()  fig . suptitle ( r '$\\mathbb{P}[|E_{in}(h)-E_{out}(h)|>\\epsilon]\\leq2e^{-2\\epsilon^{2}N}$' , fontsize = 20 , color = \"gray\" )  #FIG1  plt . subplot ( 1 ,   2 ,   1 )  N = 1000  e = np . arange ( 0 , 1 , 0.00001 )  y =   2 * np . exp (( - 2 * e ** 2 ) * N )  for   i   in   y : \n     if   i < 0.1 : \n         print ( i ) \n         plt . plot ( np . arange ( 0 , 1 , 0.00001 ), i * np . ones ( len ( np . arange ( 0 , 1 , 0.00001 ))), \"r-\" , label = r \"$\\mathbb{P}$<=0.1\" ) \n         break  plt . xlabel ( \"\u03b5\" )  plt . ylabel ( \"$\\mathbb{P}$\" )  plt . plot ( e , y , color = 'b' , alpha = 1 , label = \"N=\" + str ( N ))  plt . legend ()  #FIG2  plt . subplot ( 1 ,   2 ,   2 )  e = 0.1  N = np . arange ( 0 , 1000 , 1 )  y =   2 * np . exp (( - 2 * e ** 2 ) * N )  for   i   in   y : \n     if   i < 0.1 : \n         print ( i ) \n         plt . plot ( np . arange ( 0 , 1000 , 1 ), i * np . ones ( 1000 ), \"r-\" , label = r \"$\\mathbb{P}$<=0.1\" ) \n         break  plt . plot ( N , y , \"b-\" , label = \"e=\" + str ( e ))  plt . legend ()  plt . xlabel ( \"N\" )  plt . ylabel ( \"$\\mathbb{P}$\" )  plt . tight_layout ()  plt . subplots_adjust ( top = 0.8 )  plt . show ()",
            "title": "\u986f\u793a\u6578\u5b78"
        },
        {
            "location": "/Machine Learning/Introduction/#_6",
            "text": "\u984c\u76ee\uff1a\u4f60\u7684\u670b\u53cb\u767c\u73fe\u4e00\u500b\u80a1\u5e02\u7684\u898f\u5247\"\u7576\u65e9\u4e0a\u4e0a\u6f32 \u4e0b\u5348\u5c31\u4e0b\u8dcc\",\u70ba\u4e86\u78ba\u8a8d\u9019\u689d\u898f\u5247\u4f60\u5c31\u5f9e\u904e\u53bb\u5341\u5e74\u8cc7\u6599\u88e1\u9762\u62bd\u51fa100\u7b46\u8cc7\u6599,\u767c\u73fe80\u7b46\u662f\u6b63\u78ba\u7684,\u4ec0\u9ebc\u7d50\u8ad6\u4f60\u53ef\u4ee5\u8aaa?  1.\u85c9\u7531\u5229\u7528\u8a72\u898f\u5247\u5728\u672a\u4f86\u7684100\u5929\u8cfa\u9322,\u4f60\"\u80af\u5b9a\"\u5c07\u6703\u8b8a\u6210\u6709\u9322\u4eba(\u4e0d\u80fd\u9019\u9ebc\u80af\u5b9a)  2.\u7576\u672a\u4f86100\u5929\u80a1\u5e02\u8d70\u52e2\u8207\u5341\u5e74\u4ee5\u4f86\u7684\u6b77\u53f2\u8cc7\u6599\u5f88\u63a5\u8fd1,\u5229\u7528\u8a72\u898f\u5247\u5728\u672a\u4f86\u7684100\u5929\u8cfa\u9322,\u4f60\"\u5f88\u53ef\u80fd\"\u6703\u8b8a\u6210\u6709\u9322\u4eba(\u6b63\u78ba)  3.\u85c9\u7531\u5f9e20\u500b\u670b\u53cb\u88e1\u9762\u9078\u4e00\u500b\u6700\u597d\u7684\u898f\u5247,\u4f86\u7576\u4f5c\u6295\u8cc7\u672a\u4f86100\u5929\u80a1\u5e02\u7684\u65b9\u6cd5,\u4f60\u5f88\u6709\u53ef\u80fd\u8b8a\u6210\u6709\u9322\u4eba(\u932f\uff01\u56e0\u70baHypothesis\u53ea\u6709\u4e00\u500b\uff08\"\u7576\u65e9\u4e0a\u4e0a\u6f32 \u4e0b\u5348\u5c31\u4e0b\u8dcc\"\uff09\u4e0d\u80fd\u9078\u64c7)  4.\u4f60\u80af\u5b9a\u6703\u8b8a\u6709\u9322\u4eba,\u5982\u679c\u4f60\u4ee5\u524d\u5c31\u4f7f\u7528\u8a72\u898f\u5247(\u932f \u56e0\u70ba\u4f60\u53ea\u662f\u62bd\u51fa100\u5929\u4f86\u505a\u5206\u4f48,\u641e\u4e0d\u597d\u5341\u5e74\u4f86\u7684\u8cc7\u6599\u5206\u4f48\u5f88\u4e0d\u4e00\u6a23)",
            "title": "\u7df4\u7fd2\u984c"
        },
        {
            "location": "/Machine Learning/Introduction/#hypothesis-set",
            "text": "Summary  \u7528\u9014\uff1a\u7576hypothesis\u6709\u9650,\u53ef\u4ee5\u78ba\u8a8d\u8a72\u6a5f\u5668\u5b78\u7fd2\u6f14\u7b97\u6cd5\u597d\u4e0d\u597d",
            "title": "\u591a\u500bhypothesis set"
        },
        {
            "location": "/Machine Learning/Introduction/#_7",
            "text": "\u53ef\u4ee5\u8a2d\u5b9ahypothesis set\u6709\u591a\u5c11 \u53ef\u4ee5\u8a08\u7b97\u51fa\u7576\u4f60\u7684hypothesis set\u8d8a\u5927 N\u5c31\u8981\u8d8a\u5927,\u8cc7\u6599\u624d\u6703\u6e96\u78ba",
            "title": "\u63a8\u5c0e"
        },
        {
            "location": "/Machine Learning/Introduction/#_8",
            "text": "Code  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63 import   numpy   as   np  import   matplotlib.pyplot   as   plt  from   matplotlib.widgets   import   Slider ,   Button ,   RadioButtons  fig ,   ax   =   plt . subplots ()  #equation title  plt . xlabel ( '$\\epsilon$' )  fig . suptitle ( r '$\\mathbb{P}[|E_{in}(h)-E_{out}(h)|>\\epsilon]\\leq$2$Me^{-2\\epsilon^{2}N}$' , fontsize = 20 , color = \"black\" , alpha = 0.6 )  plt . subplots_adjust ( left = 0.25 ,   bottom = 0.25 )  hypothesis = 1   #set how many hypothesis set  x   =   np . arange ( 0.0 ,   1.0 ,   0.001 )  a0   =   5  s = 2 * hypothesis * np . exp (( - 2 * x ** 2 ) * a0 )  l ,   =   plt . plot ( x ,   s ,   lw = 2 ,   color = 'red' )  #plt.axis([0, 1, -10, 10])  axcolor   =   'lightgoldenrodyellow'  axamp   =   plt . axes ([ 0.25 ,   0.09 ,   0.65 ,   0.03 ],   facecolor = axcolor )  samp   =   Slider ( axamp ,   'N' ,   0.0 ,   1000.0 ,   valinit = a0 )  hy   =   plt . axes ([ 0.25 ,   0.13 ,   0.65 ,   0.03 ],   facecolor = axcolor )  hy_ok   =   Slider ( hy ,   'Hypothesis set(M)' ,   0.0 ,   1000.0 ,   valinit = hypothesis )  def   update ( val ): \n     amp   =   samp . val \n     hyy = hy_ok . val \n     l . set_ydata ( 2 * hyy * np . exp (( - 2 * x ** 2 ) * amp )) \n     fig . canvas . draw_idle ()  samp . on_changed ( update )  hy_ok . on_changed ( update )  resetax   =   plt . axes ([ 0.8 ,   0.025 ,   0.1 ,   0.04 ])  button   =   Button ( resetax ,   'Reset' ,   color = axcolor ,   hovercolor = '0.975' )  def   reset ( event ): \n     hy_ok . reset () \n     samp . reset ()  button . on_clicked ( reset )  rax   =   plt . axes ([ 0.025 ,   0.5 ,   0.15 ,   0.15 ],   facecolor = axcolor )  radio   =   RadioButtons ( rax ,   ( 'red' ,   'blue' ,   'green' ),   active = 0 )  def   colorfunc ( label ): \n     l . set_color ( label ) \n     fig . canvas . draw_idle ()  radio . on_clicked ( colorfunc )  plt . show ()",
            "title": "\u986f\u793a\u6578\u5b78"
        },
        {
            "location": "/Machine Learning/Introduction/#conclusion",
            "text": "Note  \\mathbb{P}[|E_{in}(h)-E_{out}(h)|>\\epsilon]\\leq \\mathbb{P}[|E_{in}(h)-E_{out}(h)|>\\epsilon]\\leq 2 Me^{-2\\epsilon^{2}N} Me^{-2\\epsilon^{2}N} \nIf Machine Learning algorithm's Hypothesis is   finite \nand  N N  is large enough ,we can say  E_{out}(g)\\approx E_{in}(g) E_{out}(g)\\approx E_{in}(g) \nso we proof we can learning     Question  If Hypothesis is infinite what happen?",
            "title": "Conclusion"
        },
        {
            "location": "/Machine Learning/Introduction/#1",
            "text": "\u984c\u76ee:\u8acb\u9078\u51fa\u932f\u8aa4\u7684  1.\u56e0\u70ba x_{1} x_{1} \u8ddf x_{2} x_{2} \u4e0d\u540c\u6240\u4ee5 h_{1} h_{1} \u8ddf h_{2} h_{2} \u4e0d\u540c  2.\u96d6\u7136 h_{1} h_{1} \u8ddf h_{3} h_{3} \u8f38\u5165\u4e0d\u5b8c\u5168\u4e00\u6a23\u4f46\u662f\u56e0\u70ba\u53ea\u5dee\u6b63\u8ca0\u865f\u6240\u4ee5\u88e1\u9762\u8cc7\u6599\u7684\u6bd4\u4f8b\u9084\u662f\u4e00\u6a23  3.\u6309\u7167\u984c\u76ee\u4f86\u8aaahypothesis\u6709\u56db\u500b\u5e36\u5165\u516c\u5f0f\u5c31\u5982\u984c  4.\u4f46\u662f\u7531\u65bc\u8cc7\u6599\u6b63\u8ca0\u7684\u95dc\u897f h_{1}=h_{3},h_{2}=h_{4} h_{1}=h_{3},h_{2}=h_{4} \u6240\u4ee5\u6263\u6389\u91cd\u8907\u7684\u90e8\u4efd,hypothesis\u5269\u4e0b\u5169\u500b\u6240\u4ee5\u8a72\u984c\u4e5f\u6b63\u78ba\uff08 \u4e4b\u5f8c\u6703\u5229\u7528\u522a\u53bb\u91cd\u8907\u7684\u90e8\u4efd\u4f86\u6c42\u51fa\u7576\u9047\u5230\u7121\u9650\u500bhypothesis\u6642\u8a72\u600e\u9ebc\u89e3\u6c7a \uff09",
            "title": "\u7df4\u7fd2\u984c1"
        },
        {
            "location": "/Machine Learning/Introduction/#2",
            "text": "\u984c\u76ee:\u8981\u7b26\u5408E \\tiny{in} \\tiny{in} \u548cE \\tiny{out} \\tiny{out} \u8aa4\u5dee\u8d85\u904e0.1( \\epsilon \\epsilon )\u7684\u6a5f\u7387\u5c0f\u65bc\u7b49\u65bc0.05( \\delta \\delta )hypothesis set\u6709100\u500b(M)\u6211\u7684N\u6700\u5c11\u8981\u5e7e\u500b  \\tiny{out} \\tiny{out}  \\frac{1}{2 \\epsilon^2} \\frac{1}{2 \\epsilon^2}  $ N= \\frac{1}{2 \\epsilon^2}ln \\frac{2M}{\\delta} $\n\u7b54\u6848\u70ba2",
            "title": "\u7df4\u7fd2\u984c2"
        },
        {
            "location": "/Machine Learning/Introduction/#hypothesis_1",
            "text": "PLA\u6f14\u7b97\u6cd5\u7684hypothesis set\u6709\u7121\u9650\u591a\u6240\u4ee5\u600e\u9ebc\u8fa6?  \u56e0\u70ba\u5728\u5e73\u9762\u4e0a\u6709\u7121\u9650\u591a\u689d\u7dda\u6240\u4ee5pla\u7684hypothesis set\u6709\u7121\u9650\u591a\u500b\u90a3\u8a72\u600e\u8a08\u7b97? \n\u56e0\u70ba\u6709\u8a31\u591a\u91cd\u758a\u7684hypothesis set \n\u5e95\u4e0b\u628ahypothesis set\u7528dichotomy\u4f86\u66ff\u63db,\u56e0\u70bahypothesis set\u7121\u9650\u591a\u7121\u6cd5\u8a08\u7b97 \n\u4ee5PLA\u8209\u4f8b:    hypothesis set \u6240\u6709\u53ef\u80fd\u7684\u7dda(\u4ee5\u4e0a\u5716\u4f86\u8aaa\u6709\u7121\u9650\u591a\u7a2e\u4f86\u5206\u958b\u4e00\u500b\u9ede)  dichotomy \u8cc7\u6599\u5206\u7fa4\u7684\u65b9\u6cd5(\u6709\u5169\u7a2e\u65b9\u6cd5\u4e0a\u5716\u7684\u5169\u689d\u7dda)   \u6240\u4ee5\u8981\u7b97\u51fa\u771f\u6b63\u7684\u6210\u9577\u51fd\u6578 \u9700\u8981\u7528\u5230\u6a5f\u7387\u7684\u77e5\u8b58 \u9700\u8981\u7528\u5230\u6a5f\u7387\u7684\u77e5\u8b58  \u5f71\u7247    \\tiny{H}(N) \\tiny{H}(N) :dichotomy    break point:\u7b2c\u4e00\u6b21\u6709\u767c\u751f\"\u5168\u90e8\"\u7121\u6cd5\u89e3\u6c7a\u7684N(\u53ea\u8981\u627e\u5230\u4e00\u500b\u6392\u5217\u90fd\u53ef\u4ee5\u89e3\u6c7a\u5c31\u4e0d\u662fbreakpoint)    break point \u8a08\u7b97\u65b9\u6cd5  \u4f8b\u5982perceptrons    \u9019\u500b\u5f62\u72c0\u4e0b\u7684\u6392\u5217\u6bcf\u500b\u90fd\u53ef\u4ee5\u7528\u4e00\u689d\u7dda\u5206\u958b\u6240\u4ee5breakpoint\u4e0d\u662f3     \u9019\u500b\u5f62\u72c0\u4e0b\u767c\u751f\u7121\u6cd5\u7528\u7dda\u5206\u958b,\u5176\u4ed6\u5f62\u72c0\u4e5f\u767c\u751f\u7121\u6cd5\u5168\u90e8\u5206\u958b\u6240\u4ee5breakpoint\u70ba4        m \\tiny{H}(N) \\tiny{H}(N) =O( N^{breakpoint-1} N^{breakpoint-1} )  positive rays  positive intervals  convex  2D perceptrons      m \\tiny{H}(N) \\tiny{H}(N)  N+1 =O(N)  \\frac{1}{2}N^2+\\frac{1}{2}N+1 \\frac{1}{2}N^2+\\frac{1}{2}N+1 =O( N^2 N^2 )  2^N 2^N  O(N^3 O(N^3 )    break point  2  3  None  4     \u6700\u5f8c\u5982\u679c\u8981\u7528dichotomy\u53d6\u4ee3hypothesis set   \u8b49\u660e\u4e0a\u5716",
            "title": "\u9047\u5230\u7121\u9650Hypothesis\u7684\u554f\u984c"
        },
        {
            "location": "/Machine Learning/Neural Networks/Introduction/",
            "text": "Introduction\n\u00b6\n\n\nepochs\n\u00b6\n\n\n\u8fed\u5e36\u6b21\u6578\n\n\nlearning rate\n\u00b6",
            "title": "Introduction"
        },
        {
            "location": "/Machine Learning/Neural Networks/Introduction/#introduction",
            "text": "",
            "title": "Introduction"
        },
        {
            "location": "/Machine Learning/Neural Networks/Introduction/#epochs",
            "text": "\u8fed\u5e36\u6b21\u6578",
            "title": "epochs"
        },
        {
            "location": "/Machine Learning/Neural Networks/Introduction/#learning-rate",
            "text": "",
            "title": "learning rate"
        },
        {
            "location": "/Machine Learning/Neural Networks/CNN/Introduction/",
            "text": "\u5377\u7a4d\u795e\u7d93\u7db2\u8def\n\u00b6\n\n\n\u63a5\u4e0b\u4f86\u7684\u7b46\u8a18\u53c3\u8003\u4e86\u4ee5\u4e0b\u7684\u7db2\u8def\u8cc7\u6e90:\n\nhttp://ufldl.stanford.edu/tutorial/supervised/FeatureExtractionUsingConvolution/\n\n\nhttp://cs231n.github.io/convolutional-networks/#pool\n\n\nhttps://chtseng.wordpress.com/2017/09/12/%E5%88%9D%E6%8E%A2%E5%8D%B7%E7%A9%8D%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF/",
            "title": "Introduction"
        },
        {
            "location": "/Machine Learning/Neural Networks/CNN/Introduction/#_1",
            "text": "\u63a5\u4e0b\u4f86\u7684\u7b46\u8a18\u53c3\u8003\u4e86\u4ee5\u4e0b\u7684\u7db2\u8def\u8cc7\u6e90: http://ufldl.stanford.edu/tutorial/supervised/FeatureExtractionUsingConvolution/  http://cs231n.github.io/convolutional-networks/#pool  https://chtseng.wordpress.com/2017/09/12/%E5%88%9D%E6%8E%A2%E5%8D%B7%E7%A9%8D%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF/",
            "title": "\u5377\u7a4d\u795e\u7d93\u7db2\u8def"
        },
        {
            "location": "/Machine Learning/Neural Networks/CNN/sample/Devanagari Handwritten Character/",
            "text": "Devanagari Handwritten Character\n\u00b6\n\n\n\u8cc7\u6599\u96c6\u4ecb\u7d39\n\u00b6\n\n\n\u68b5\u8a9e36\u500b\u57fa\u672c\u5b57\u6bcd+10\u500b\u6578\u5b57\n\u5b9a\u7fa9\n['digit_4', 'character_29_waw', 'character_20_na', 'character_33_ha', 'character_5_kna', 'digit_6', 'character_18_da', 'character_9_jha', 'character_36_gya', 'character_16_tabala', 'character_10_yna', 'character_34_chhya', 'digit_7', 'character_11_taamatar', 'character_17_tha', 'digit_3', 'digit_2', 'character_25_ma', 'character_30_motosaw', 'digit_0', 'character_8_ja', 'character_13_daa', 'character_15_adna', 'character_3_ga', 'digit_8', 'character_28_la', 'character_6_cha', 'character_31_petchiryakha', 'character_32_patalosaw', 'character_1_ka', 'character_7_chha', 'digit_1', 'character_14_dhaa', 'character_21_pa', 'character_22_pha', 'character_35_tra', 'character_12_thaa', 'character_4_gha', 'character_23_ba', 'character_2_kha', 'digit_5', 'character_27_ra', 'character_19_dha', 'digit_9', 'character_26_yaw', 'character_24_bha']\n\n\n\uff01\uff01\uff01 sample\n    [0,.......1]\u70bacharacter_24_bha\n\n\n\u53c3\u8003(\u5408\u5beb\u8ddf\u6578\u5b57\u7684\u90e8\u4efd)\n\n\n\u5929\u57ce\u6587\u8cc7\u6599\u96c6\u4e0b\u8f09\uff08uci\uff09",
            "title": "Devanagari Handwritten Character"
        },
        {
            "location": "/Machine Learning/Neural Networks/CNN/sample/Devanagari Handwritten Character/#devanagari-handwritten-character",
            "text": "",
            "title": "Devanagari Handwritten Character"
        },
        {
            "location": "/Machine Learning/Neural Networks/CNN/sample/Devanagari Handwritten Character/#_1",
            "text": "\u68b5\u8a9e36\u500b\u57fa\u672c\u5b57\u6bcd+10\u500b\u6578\u5b57\n\u5b9a\u7fa9\n['digit_4', 'character_29_waw', 'character_20_na', 'character_33_ha', 'character_5_kna', 'digit_6', 'character_18_da', 'character_9_jha', 'character_36_gya', 'character_16_tabala', 'character_10_yna', 'character_34_chhya', 'digit_7', 'character_11_taamatar', 'character_17_tha', 'digit_3', 'digit_2', 'character_25_ma', 'character_30_motosaw', 'digit_0', 'character_8_ja', 'character_13_daa', 'character_15_adna', 'character_3_ga', 'digit_8', 'character_28_la', 'character_6_cha', 'character_31_petchiryakha', 'character_32_patalosaw', 'character_1_ka', 'character_7_chha', 'digit_1', 'character_14_dhaa', 'character_21_pa', 'character_22_pha', 'character_35_tra', 'character_12_thaa', 'character_4_gha', 'character_23_ba', 'character_2_kha', 'digit_5', 'character_27_ra', 'character_19_dha', 'digit_9', 'character_26_yaw', 'character_24_bha']  \uff01\uff01\uff01 sample\n    [0,.......1]\u70bacharacter_24_bha  \u53c3\u8003(\u5408\u5beb\u8ddf\u6578\u5b57\u7684\u90e8\u4efd)  \u5929\u57ce\u6587\u8cc7\u6599\u96c6\u4e0b\u8f09\uff08uci\uff09",
            "title": "\u8cc7\u6599\u96c6\u4ecb\u7d39"
        },
        {
            "location": "/Machine Learning/Neural Networks/MLP/MLP(Regression)/",
            "text": "MLP(Regression)\n\u00b6\n\n\nType Of Machine Learning\n\u00b6\n\n\n\n\n\n\n\n\nOutput Space\n\n\nData Label\n\n\nProtocol\n\n\nInput Space\n\n\n\n\n\n\n\n\n\n\nBinary Classification\n\n\nSupervised\n\n\nOnline\n\n\nRaw\n\n\n\n\n\n\n\n\n\n\u8a72\u7bc4\u4f8b\u7684\u7d50\u69cb\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nIn this sample is Fully connected three-layered MLP network with 150 neurons in the hidden layer.\n\n\n\n\n\n\nFull connected:\u5168\u9023\u63a5\u5c64\n\n\nMLP (\u591a\u5c64\u611f\u77e5\u5668):\u52a0\u4e0aactivation function\u8ddf\u53cd\u5411\u50b3\u905e\u6f14\u7b97\u6cd5\n\n\n\n\nCode\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\nfrom\n \n__future__\n \nimport\n \nprint_function\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nos\n\n\nimport\n \nmath\n\n\ndef\n \nadd_layer\n(\ninputs\n,\n \nin_size\n,\n \nout_size\n,\n \nactivation_function\n=\nNone\n):\n\n\n    \nWeights\n \n=\n \ntf\n.\nVariable\n(\ntf\n.\nrandom_normal\n([\nin_size\n,\n \nout_size\n]))\n\n    \nbiases\n \n=\n \ntf\n.\nVariable\n(\ntf\n.\nzeros\n([\n1\n,\n \nout_size\n])\n \n+\n \n0.1\n)\n\n    \nWx_plus_b\n \n=\n \ntf\n.\nmatmul\n(\ninputs\n,\n \nWeights\n)\n \n+\n \nbiases\n\n    \nif\n \nactivation_function\n \nis\n \nNone\n:\n\n        \noutputs\n \n=\n \nWx_plus_b\n\n    \nelif\n \nactivation_function\n \n==\n\"Swish\"\n:\n\n        \noutputs\n \n=\n \nWx_plus_b\n/\n(\n1\n+\ntf\n.\nexp\n(\n-\n1\n*\nWx_plus_b\n))\n\n\n    \nelse\n:\n\n        \noutputs\n \n=\n \nactivation_function\n(\nWx_plus_b\n)\n\n    \nreturn\n \noutputs\n,\nWeights\n,\nbiases\n\n\n\ndef\n \nnu\n():\n\n    \n# define placeholder for inputs to network\n\n    \nxs\n \n=\n \ntf\n.\nplaceholder\n(\ntf\n.\nfloat32\n,\n \n[\nNone\n,\n \n1\n])\n\n    \nys\n \n=\n \ntf\n.\nplaceholder\n(\ntf\n.\nfloat32\n,\n \n[\nNone\n,\n \n1\n])\n\n    \n# add hidden layer \u96b1\u85cf\u5c64\n\n    \nneural_node\n=\n150\n\n    \nl1\n \n,\nWeights1\n,\nbiases1\n=\n \nadd_layer\n(\nxs\n,\n \n1\n,\n \nneural_node\n,\n \nactivation_function\n=\ntf\n.\nsigmoid\n)\n\n\n\n\n    \n# add output layer \u8f38\u51fa\u5c64\n\n    \nprediction\n \n,\nWeights2\n,\nbiases2\n=\n \nadd_layer\n(\nl1\n,\n \nneural_node\n,\n \n1\n,\n \nactivation_function\n=\nNone\n)\n\n\n    \n# the error between prediction and real data\n\n    \nloss\n \n=\n \ntf\n.\nreduce_mean\n(\ntf\n.\nreduce_sum\n(\ntf\n.\nsquare\n(\nys\n-\nprediction\n),\n \nreduction_indices\n=\n[\n1\n]))\n\n    \n#loss=tf.square(ys-prediction)\n\n    \ntrain_step\n \n=\n \ntf\n.\ntrain\n.\nRMSPropOptimizer\n(\n0.01\n)\n.\nminimize\n(\nloss\n)\n\n    \n# important step\n\n    \nsess\n \n=\n \ntf\n.\nSession\n()\n\n    \ninit\n \n=\n \ntf\n.\nglobal_variables_initializer\n()\n\n    \nsess\n.\nrun\n(\ninit\n)\n\n    \nreturn\n  \nsess\n,\ntrain_step\n,\nxs\n,\nys\n,\nprediction\n\n\n\n\nx_data\n \n=\n \nnp\n.\nlinspace\n(\n-\n5\n,\n \n10\n,\n \n1000\n)[:,\n \nnp\n.\nnewaxis\n]\n\n\nnoise\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n0.05\n,\n \nx_data\n.\nshape\n)\n\n\ny_data\n \n=\n \n2\n*\nx_data\n**\n3\n*\n(\nnp\n.\nsin\n(\nx_data\n)\n/\n2\n)\n \n-\n \n0.5\n \n+\n \nnoise\n*\n300\n\n\n\n# plot the real data\n\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n1\n,\n1\n,\n1\n)\n\n\n\nax\n.\nscatter\n(\nx_data\n,\n \ny_data\n)\n\n\nlines\n \n=\n \nax\n.\nplot\n(\n3\n,\n \n3\n,\n \n'r-'\n,\n \nlw\n=\n1\n)\n\n\nax\n.\nlegend\n(\nlabels\n=\n[\n'prediction line'\n,\n'y=2$x^{3(sin(x)/2)}-0.5+noise*300$'\n],\nloc\n=\n'best'\n)\n\n\nplt\n.\nion\n()\n\n\nplt\n.\npause\n(\n2.5\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n# start\n\n\nsess\n,\ntrain_step\n,\nxs\n,\nys\n,\nprediction\n=\nnu\n()\n\n\nfor\n \ni\n \nin\n \nrange\n(\n100000\n):\n\n\n    \n# training\n\n\n    \nsess\n.\nrun\n(\ntrain_step\n,\n \nfeed_dict\n=\n{\nxs\n:\n \nx_data\n,\n \nys\n:\n \ny_data\n})\n\n    \nif\n \ni\n \n%\n \n300\n \n==\n \n0\n:\n\n        \n# to visualize the result and improvement\n\n        \ntry\n:\n\n            \nax\n.\nlines\n.\nremove\n(\nlines\n[\n0\n])\n\n        \nexcept\n \nException\n:\n\n            \npass\n\n        \nx_data2\n \n=\n \nnp\n.\nlinspace\n(\n-\n5\n,\n \n10\n,\n \n5000\n)[:,\nnp\n.\nnewaxis\n]\n\n        \nprediction_value\n \n=\n \nsess\n.\nrun\n(\nprediction\n,\n \nfeed_dict\n=\n{\nxs\n:\n \nx_data\n})\n\n\n\n        \n# plot the prediction\n\n        \nlines\n \n=\n \nax\n.\nplot\n(\nx_data\n,\n \nprediction_value\n,\n \n'r-'\n,\n \nlw\n=\n5\n)\n\n        \nplt\n.\npause\n(\n0.000000001\n)",
            "title": "MLP(Regression)"
        },
        {
            "location": "/Machine Learning/Neural Networks/MLP/MLP(Regression)/#mlpregression",
            "text": "",
            "title": "MLP(Regression)"
        },
        {
            "location": "/Machine Learning/Neural Networks/MLP/MLP(Regression)/#type-of-machine-learning",
            "text": "Output Space  Data Label  Protocol  Input Space      Binary Classification  Supervised  Online  Raw     \n\u8a72\u7bc4\u4f8b\u7684\u7d50\u69cb      Info  In this sample is Fully connected three-layered MLP network with 150 neurons in the hidden layer.    Full connected:\u5168\u9023\u63a5\u5c64  MLP (\u591a\u5c64\u611f\u77e5\u5668):\u52a0\u4e0aactivation function\u8ddf\u53cd\u5411\u50b3\u905e\u6f14\u7b97\u6cd5   Code  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87 from   __future__   import   print_function  import   tensorflow   as   tf  import   numpy   as   np  import   matplotlib.pyplot   as   plt  import   os  import   math  def   add_layer ( inputs ,   in_size ,   out_size ,   activation_function = None ): \n\n     Weights   =   tf . Variable ( tf . random_normal ([ in_size ,   out_size ])) \n     biases   =   tf . Variable ( tf . zeros ([ 1 ,   out_size ])   +   0.1 ) \n     Wx_plus_b   =   tf . matmul ( inputs ,   Weights )   +   biases \n     if   activation_function   is   None : \n         outputs   =   Wx_plus_b \n     elif   activation_function   == \"Swish\" : \n         outputs   =   Wx_plus_b / ( 1 + tf . exp ( - 1 * Wx_plus_b )) \n\n     else : \n         outputs   =   activation_function ( Wx_plus_b ) \n     return   outputs , Weights , biases  def   nu (): \n     # define placeholder for inputs to network \n     xs   =   tf . placeholder ( tf . float32 ,   [ None ,   1 ]) \n     ys   =   tf . placeholder ( tf . float32 ,   [ None ,   1 ]) \n     # add hidden layer \u96b1\u85cf\u5c64 \n     neural_node = 150 \n     l1   , Weights1 , biases1 =   add_layer ( xs ,   1 ,   neural_node ,   activation_function = tf . sigmoid ) \n\n\n\n     # add output layer \u8f38\u51fa\u5c64 \n     prediction   , Weights2 , biases2 =   add_layer ( l1 ,   neural_node ,   1 ,   activation_function = None ) \n\n     # the error between prediction and real data \n     loss   =   tf . reduce_mean ( tf . reduce_sum ( tf . square ( ys - prediction ),   reduction_indices = [ 1 ])) \n     #loss=tf.square(ys-prediction) \n     train_step   =   tf . train . RMSPropOptimizer ( 0.01 ) . minimize ( loss ) \n     # important step \n     sess   =   tf . Session () \n     init   =   tf . global_variables_initializer () \n     sess . run ( init ) \n     return    sess , train_step , xs , ys , prediction  x_data   =   np . linspace ( - 5 ,   10 ,   1000 )[:,   np . newaxis ]  noise   =   np . random . normal ( 0 ,   0.05 ,   x_data . shape )  y_data   =   2 * x_data ** 3 * ( np . sin ( x_data ) / 2 )   -   0.5   +   noise * 300  # plot the real data  fig   =   plt . figure ()  ax   =   fig . add_subplot ( 1 , 1 , 1 )  ax . scatter ( x_data ,   y_data )  lines   =   ax . plot ( 3 ,   3 ,   'r-' ,   lw = 1 )  ax . legend ( labels = [ 'prediction line' , 'y=2$x^{3(sin(x)/2)}-0.5+noise*300$' ], loc = 'best' )  plt . ion ()  plt . pause ( 2.5 )  plt . show ()  # start  sess , train_step , xs , ys , prediction = nu ()  for   i   in   range ( 100000 ): \n\n     # training \n\n     sess . run ( train_step ,   feed_dict = { xs :   x_data ,   ys :   y_data }) \n     if   i   %   300   ==   0 : \n         # to visualize the result and improvement \n         try : \n             ax . lines . remove ( lines [ 0 ]) \n         except   Exception : \n             pass \n         x_data2   =   np . linspace ( - 5 ,   10 ,   5000 )[:, np . newaxis ] \n         prediction_value   =   sess . run ( prediction ,   feed_dict = { xs :   x_data }) \n\n\n         # plot the prediction \n         lines   =   ax . plot ( x_data ,   prediction_value ,   'r-' ,   lw = 5 ) \n         plt . pause ( 0.000000001 )",
            "title": "Type Of Machine Learning"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/",
            "text": "PLA(Classification)\n\u00b6\n\n\nPerceptron Learning Algorithm\n\n\nType Of this Sample\n\u00b6\n\n\n\n\n\n\n\n\nOutput Space\n\n\nData Label\n\n\nProtocol\n\n\nInput Space\n\n\n\n\n\n\n\n\n\n\nBinary Classification\n\n\nSupervised\n\n\nOnline\n\n\nRaw\n\n\n\n\n\n\n\n\nAlgorithm\n\u00b6\n\n\n\n\n\n\n\n\n\u627e\u5230\u4e00\u689d\u7dda\u80fd\u5206\u958b\u5169\u7a2e\u7d50\u679c\n\n\n\u5982\u4f55\u4fee\u6539\u7dda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u53ef\u4ee5\u5bb9\u932f\u662fpla\u8b8a\u5f62\u6f14\u7b97\u6cd5\u53ebpocket\n\n\nImplement PLA (Classification)\n\u00b6\n\n\nsample version\n\u00b6\n\n\nCode\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n#\u7db2\u8def\u4e0a\u627e\u7684dataset \u53ef\u4ee5\u7dda\u6027\u5206\u5272\n\n\n\ndataset\n \n=\n \nnp\n.\narray\n([\n\n\n((\n1\n,\n \n1\n,\n \n5\n),\n \n-\n1\n),\n\n\n((\n1\n,\n \n2\n,\n \n4\n),\n \n-\n1\n),\n\n\n((\n1\n,\n \n3\n,\n \n3\n),\n \n-\n1\n),\n\n\n((\n1\n,\n \n4\n,\n \n2\n),\n \n-\n1\n),\n\n\n((\n1\n,\n \n1\n,\n \n6\n),\n \n1\n),\n\n\n((\n1\n,\n \n2\n,\n \n5\n),\n \n1\n),\n\n\n((\n1\n,\n \n3\n,\n \n4\n),\n \n1\n),\n\n\n((\n1\n,\n \n4\n,\n \n3\n),\n \n1\n)])\n\n\n# 1 mean to display -c/b if c=0 i was error\n\n\n# ax+by+c=0\n\n\n#y=(-a/b)x+(-c/b)\n\n\n#\n\n\n#\u5224\u65b7\u6709\u6c92\u6709\u5206\u985e\u932f\u8aa4\uff0c\u4e26\u5217\u5370\u932f\u8aa4\u7387\n\n\n\ndef\n \ncheck_error\n(\nw\n,\n \ndataset\n):\n\n    \nresult\n \n=\n \nNone\n\n    \nerror\n \n=\n \n0\n\n    \nfor\n \nx\n,\n \ns\n \nin\n \ndataset\n:\n\n        \nx\n \n=\n \nnp\n.\narray\n(\nx\n)\n\n        \nprint\n(\nw\n.\nT\n.\ndot\n(\nx\n))\n\n        \nif\n \nint\n(\nnp\n.\nsign\n(\nw\n.\nT\n.\ndot\n(\nx\n)))\n \n!=\n \ns\n:\n\n            \n#\u5e36\u5165ax+by+c=0 \u5982\u679c\u7b26\u865f\u4e0d\u76f8\u7b49\u4ee3\u8868\u6709\u932f\u8aa4\n\n\n            \n# T transpose\n\n            \nresult\n \n=\n  \nx\n,\n \ns\n\n            \nerror\n \n+=\n \n1\n\n    \nprint\n  \n(\n\"error=\n%s\n/\n%s\n\"\n \n%\n \n(\nerror\n,\n \nlen\n(\ndataset\n)))\n\n    \nreturn\n \nresult\n\n\n\n#PLA\u6f14\u7b97\u6cd5\u5be6\u4f5c\n\n\n#Cyclic PLA\n\n\ndef\n \npla\n(\ndataset\n):\n\n\n    \n#ax+by+c=0 \u7dda\u6027\u65b9\u7a0b\u5f0f\u7684\u6cd5\u5411\u91cf\n\n    \nw\n \n=\n \nnp\n.\nzeros\n(\n3\n)\n#\u6cd5\u5411\u91cf\n\n    \nindex\n=\n0\n\n    \nwhile\n \ncheck_error\n(\nw\n,\n \ndataset\n)\n \nis\n \nnot\n \nNone\n:\n\n\n\n        \nx\n,\n \ns\n \n=\n \ncheck_error\n(\nw\n,\n \ndataset\n)\n\n\n        \nw\n \n+=\n \n(\ns\n)\n \n*\n \nx\n \n#Algorithm kernel\n\n\n        \n#fig by algorithm(1).md\n\n        \nindex\n=\nindex\n+\n1\n\n\n    \nreturn\n \nw\n\n\n\n\ndef\n \nprint_image\n(\nw\n):\n\n\n    \n#\u756b\u5716\n\n    \nps\n \n=\n \n[\nv\n[\n0\n]\n \nfor\n \nv\n \nin\n \ndataset\n]\n\n    \nvalue\n \n=\n \n[\nv\n[\n1\n]\n \nfor\n \nv\n \nin\n \ndataset\n]\n\n    \nfig\n \n=\n \nplt\n.\nfigure\n()\n\n    \nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n)\n\n    \n#111 is control code 1\n\n    \n#These are subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\".\n\n    \n#dataset\u524d\u534a\u5f8c\u534a\u5df2\u7d93\u5206\u5272\u597d \u76f4\u63a5\u756b\u5c31\u662f\n\n    \nindex\n=\n0\n\n\n    \nmax_x\n=\nps\n[\n0\n][\n1\n]\n\n    \nmin_x\n=\nps\n[\n0\n][\n1\n]\n\n    \nfor\n \nv\n \nin\n \nvalue\n:\n\n        \n#print(index)\n\n        \nif\n \nv\n>\n0\n:\n\n            \nax1\n.\nscatter\n(\nps\n[\nindex\n][\n1\n],\nps\n[\nindex\n][\n2\n],\n \nc\n=\n'b'\n,\n \nmarker\n=\n\"o\"\n)\n\n        \nelif\n \nv\n<\n0\n:\n\n            \nax1\n.\nscatter\n(\nps\n[\nindex\n][\n1\n],\nps\n[\nindex\n][\n2\n]\n \n,\n \nc\n=\n'r'\n,\n \nmarker\n=\n\"x\"\n)\n\n        \nelse\n:\n\n            \npass\n\n        \nif\n \nmax_x\n<\nps\n[\nindex\n][\n1\n]:\n\n            \nmax_x\n=\nps\n[\nindex\n][\n1\n]\n\n        \nif\n \nmin_x\n>\nps\n[\nindex\n][\n1\n]:\n\n            \nmin_x\n=\nps\n[\nindex\n][\n1\n]\n\n        \nindex\n=\nindex\n+\n1\n\n\n    \nl\n \n=\n \nnp\n.\nlinspace\n(\nmin_x\n-\n1\n,\nmax_x\n+\n1\n)\n\n    \n#define the line x-axis size\n\n    \na\n,\nb\n \n=\n \n-\nw\n[\n1\n]\n/\nw\n[\n2\n],\n \n-\nw\n[\n0\n]\n/\nw\n[\n2\n]\n\n    \n#a=\u659c\u7387 b\u5e38\u6578\n\n    \nax1\n.\nplot\n(\nl\n,\n \na\n*\nl\n \n+\n \nb\n,\n \n'b-'\n)\n\n\n    \nplt\n.\nshow\n()\n\n\n\n\nw\n \n=\n \npla\n(\ndataset\n)\n\n\nprint_image\n(\nw\n)\n\n\n\n\n\n\nOptimizer Version\n\u00b6\n\n\n\u8017\u6642\u2153\n\n\nCode\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nrandom\n\n\n#\u7db2\u8def\u4e0a\u627e\u7684dataset \u53ef\u4ee5\u7dda\u6027\u5206\u5272\n\n\n\ndataset\n \n=\n \nnp\n.\narray\n([\n\n\n((\n1\n,\n \n1.6\n,\n \n5\n),\n \n-\n1\n),\n\n\n((\n1\n,\n \n2\n,\n \n4\n),\n \n-\n1\n),\n\n\n((\n1\n,\n \n3\n,\n \n3\n),\n \n-\n1\n),\n\n\n((\n1\n,\n \n4\n,\n \n2\n),\n \n-\n1\n),\n\n\n((\n1\n,\n \n1\n,\n \n6\n),\n \n1\n),\n\n\n((\n1\n,\n \n2\n,\n \n5\n),\n \n1\n),\n\n\n((\n1\n,\n \n3\n,\n \n4\n),\n \n1\n),\n\n\n((\n1\n,\n \n4\n,\n \n3\n),\n \n1\n)])\n\n\n# 1 mean to display -c/b if c=0 i was error\n\n\n# ax+by+c=0\n\n\n#y=(-a/b)x+(-c/b)\n\n\n#\n\n\n#\u5224\u65b7\u6709\u6c92\u6709\u5206\u985e\u932f\u8aa4\uff0c\u4e26\u5217\u5370\u932f\u8aa4\u7387\n\n\nbad\n=\n0\n\n\ndef\n \ncheck_error\n(\nw\n,\n \ndataset\n):\n\n    \nresult\n \n=\n \nNone\n\n    \nresult\n=\n[]\n\n    \nerror\n \n=\n \n0\n\n    \nfor\n \nx\n,\n \ns\n \nin\n \ndataset\n:\n\n        \nx\n \n=\n \nnp\n.\narray\n(\nx\n)\n\n        \nprint\n(\nw\n.\nT\n.\ndot\n(\nx\n))\n\n        \nif\n \nint\n(\nnp\n.\nsign\n(\nw\n.\nT\n.\ndot\n(\nx\n)))\n \n!=\n \ns\n:\n\n            \n#\u5e36\u5165ax+by+c=0 \u5982\u679c\u7b26\u865f\u4e0d\u76f8\u7b49\u4ee3\u8868\u6709\u932f\u8aa4\n\n\n            \n# T transpose\n\n            \ntem\n=\n[]\n\n            \ntem\n.\nappend\n(\nx\n)\n\n\n            \ntem\n.\nappend\n(\ns\n)\n\n\n            \nresult\n.\nappend\n(\ntem\n)\n\n\n            \nerror\n \n+=\n \n1\n\n    \nprint\n  \n(\n\"error=\n%s\n/\n%s\n\"\n \n%\n \n(\nerror\n,\n \nlen\n(\ndataset\n)))\n\n    \nbad\n=\nerror\n/\nlen\n(\ndataset\n)\n\n\n    \nif\n \nerror\n==\n0\n:\n\n        \nresult\n=\nNone\n\n        \nreturn\n \nresult\n\n\n    \n#\u512a\u5316\u5340\u584a1 \u6bcf\u6b21\u9078\u64c7\u7684\u932f\u8aa4\u7528\u96a8\u6a5f\u6240\u4ee5\u4e0d\u6703\u4e00\u6a23\n\n\n##############################################\n\n\n    \nreturn\n \nresult\n[\nrandom\n.\nrandrange\n(\n0\n,\nerror\n,\n \n1\n)]\n\n\n\n\n#PLA\u6f14\u7b97\u6cd5\u5be6\u4f5c\n\n\n#Cyclic PLA\n\n\ndef\n \npla\n(\ndataset\n):\n\n\n    \n#ax+by+c=0 \u7dda\u6027\u65b9\u7a0b\u5f0f\n\n    \nw\n \n=\n \nnp\n.\nzeros\n(\n3\n)\n\n    \nax\n,\nplt\n=\nprint_image\n(\nw\n)\n\n    \n#print (w)\n\n\n    \nindex\n=\n0\n\n    \nwhile\n \ncheck_error\n(\nw\n,\n \ndataset\n)\n \nis\n \nnot\n \nNone\n:\n\n\n\n        \nx\n,\n \ns\n \n=\n \ncheck_error\n(\nw\n,\n \ndataset\n)\n\n        \n##\u512a\u5316\u5340\u584a2 \u628abaise\u7528\u96a8\u6a5f \u8b93\u5b83\u8b8a\u52d5\u5feb\u9ede\n\n\n        \nx\n[\n0\n]\n=\n(\n1\n-\nbad\n)\n*\nx\n[\n0\n]\n*\nrandom\n.\nuniform\n(\n1\n,\n4\n)\n\n\n        \n#############################################\n\n        \nw\n \n+=\n \n(\ns\n)\n \n*\n \nx\n\n        \ntry\n:\n\n            \nax\n.\nlines\n.\nremove\n(\nlines\n[\n0\n])\n\n        \nexcept\n \nException\n:\n\n            \npass\n\n        \nl\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n4\n)\n\n        \n#define the line x-axis size\n\n        \na\n,\nb\n \n=\n \n-\nw\n[\n1\n]\n/\nw\n[\n2\n],\n \n-\nw\n[\n0\n]\n/\nw\n[\n2\n]\n\n        \n#a=\u659c\u7387 b\u5e38\u6578\n\n        \nlines\n=\nax\n.\nplot\n(\nl\n,\n \na\n*\nl\n \n+\n \nb\n,\n \n'b-'\n)\n\n        \n#plt.pause(0.1)\n\n\n        \nprint\n \n(\nw\n)\n\n        \nindex\n=\nindex\n+\n1\n\n    \nprint\n \n(\n\"all run circel\"\n)\n\n    \nprint\n \n(\nindex\n)\n\n    \nplt\n.\npause\n(\n111\n)\n\n    \nreturn\n \nw\n\n\n\n\ndef\n \nprint_image\n(\nw\n):\n\n\n    \n#\u756b\u5716\n\n    \nps\n \n=\n \n[\nv\n[\n0\n]\n \nfor\n \nv\n \nin\n \ndataset\n]\n\n    \nvalue\n \n=\n \n[\nv\n[\n1\n]\n \nfor\n \nv\n \nin\n \ndataset\n]\n\n    \nfig\n \n=\n \nplt\n.\nfigure\n()\n\n    \nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n)\n\n    \n#111 is control code 1\n\n    \n#These are subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\".\n\n    \n#dataset\u524d\u534a\u5f8c\u534a\u5df2\u7d93\u5206\u5272\u597d \u76f4\u63a5\u756b\u5c31\u662f\n\n    \nindex\n=\n0\n\n\n    \nmax_x\n=\nps\n[\n0\n][\n1\n]\n\n    \nmin_x\n=\nps\n[\n0\n][\n1\n]\n\n    \nfor\n \nv\n \nin\n \nvalue\n:\n\n        \n#print(index)\n\n        \nif\n \nv\n>\n0\n:\n\n            \nax1\n.\nscatter\n(\nps\n[\nindex\n][\n1\n],\nps\n[\nindex\n][\n2\n],\n \nc\n=\n'b'\n,\n \nmarker\n=\n\"o\"\n)\n\n        \nelif\n \nv\n<\n0\n:\n\n            \nax1\n.\nscatter\n(\nps\n[\nindex\n][\n1\n],\nps\n[\nindex\n][\n2\n]\n \n,\n \nc\n=\n'r'\n,\n \nmarker\n=\n\"x\"\n)\n\n        \nelse\n:\n\n            \npass\n\n        \nif\n \nmax_x\n<\nps\n[\nindex\n][\n1\n]:\n\n            \nmax_x\n=\nps\n[\nindex\n][\n1\n]\n\n        \nif\n \nmin_x\n>\nps\n[\nindex\n][\n1\n]:\n\n            \nmin_x\n=\nps\n[\nindex\n][\n1\n]\n\n        \nindex\n=\nindex\n+\n1\n\n\n    \nl\n \n=\n \nnp\n.\nlinspace\n(\nmin_x\n-\n1\n,\nmax_x\n+\n1\n)\n\n    \n#define the line x-axis size\n\n    \na\n,\nb\n \n=\n \n-\nw\n[\n1\n]\n/\nw\n[\n2\n],\n \n-\nw\n[\n0\n]\n/\nw\n[\n2\n]\n\n    \n#a=\u659c\u7387 b\u5e38\u6578\n\n    \nax1\n.\nplot\n(\nl\n,\n \na\n*\nl\n \n+\n \nb\n,\n \n'b-'\n)\n\n    \nplt\n.\nion\n()\n\n    \nplt\n.\nshow\n()\n\n    \nreturn\n \nax1\n,\nplt\n\n\n\nw\n \n=\n \npla\n(\ndataset\n)\n\n\nprint_image\n(\nw\n)\n\n\n\n\n\n\n\n\n\u8b49\u660e\u7dda\u6027\u53ef\u5206\u6642PLA\u6f14\u7b97\u6cd5\u6703\u505c\n\u00b6\n\n\n\u53c3\u8003\u7db2\u8def\u6559\u5b78\n\n\n\n\npla\u505c\u4e0d\u4e0b\u4f86 \u6709\u5169\u500b\u539f\u56e0\n\n\n\n\n\u9084\u6c92\u8dd1\u5920\n\n\n\u975e\u7dda\u6027\u53ef\u5206\n\n\n\n\n\n\n\n\n\u7b26\u865f\u89e3\u91cb\n\u00b6\n\n\n\n\nW_{f}^{T}=\nW_{f}^{T}=\n\u771f\u5be6\u60f3\u6c42\u7684\u51fd\u6578(\u901a\u5e38\u672a\u77e5)\n\n\nW_{X}=\nW_{X}=\n\u975e\u5e38\"\u63a5\u8fd1\u7b54\u6848\"\u7684\u51fd\u6578\n\n\n\\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|} \\leq 1\n\\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|} \\leq 1\n\u5169\u500b\u6b63\u898f\u5316\u5411\u91cf\u7684\u5167\u7a4d\u6700\u5927\u70ba1\n\n\nW_{t}=\nW_{t}=\n\u67d0\u4e00\u6642\u9593\u9ede\u7684\u7b54\u6848\n\n\nW_{t+1}=\nW_{t+1}=\n\u8a72\u6642\u9593\u9ede\u66f4\u65b0\u5f8c\u7684\u7b54\u6848\n\n\ny_{n}= {1,-1}\ny_{n}= {1,-1}\n\n\ny=sing(ax+b)\ny=sing(ax+b)\n\u6539\u5beb\u6210\ny_{n}=sing(W_{f}^{T}x_{n})\ny_{n}=sing(W_{f}^{T}x_{n})\n\n\nW_{t+1}=\\color{#0000FF}{W_{t}+y_{n(t)}x_{n(t)}}\nW_{t+1}=\\color{#0000FF}{W_{t}+y_{n(t)}x_{n(t)}}\n\u4fee\u6539\u5411\u91cf\u7684\u6f14\u7b97\u6cd5\u6838\u5fc3\n\n\nX=\nX=\n\u7e3d\u5171\u9700\u8981\u4fee\u6539\u7684\u6b21\u6578\n\n\n\n\n\n\nProof 1\n\u00b6\n\n\n\u5df2\u77e5\n\\color{#7B68EE}{y_{n(t)}W_{f}^{T}x_{n(t)}}\\geq \\color{#007799}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}>0\n\\color{#7B68EE}{y_{n(t)}W_{f}^{T}x_{n(t)}}\\geq \\color{#007799}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}>0\n\u56e0\u70ba\u7dda\u4e0d\u80fd\u78b0\u5230\u9ede\n\n\n\n\n\n\\begin{aligned}\n    W_{f}^{T}W_{t+1}&=W_{f}^{T}(\\color{#0000FF}{W_{t}+y_{n(t)}x_{n(t)}}) \\\\\n   &=W_{f}^{T}W_{t}+\\color{#7B68EE}{W_{f}^{T}y_{n(t)}x_{n(t)}} \\\\\n    &\\geq W_{f}^{T}W_{t}+\\color{#007799}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}\\\\\n    &>W_{f}^{T}W_{t}\n\\end{aligned}\n\n\n\n\n\\begin{aligned}\n    W_{f}^{T}W_{t+1}&=W_{f}^{T}(\\color{#0000FF}{W_{t}+y_{n(t)}x_{n(t)}}) \\\\\n   &=W_{f}^{T}W_{t}+\\color{#7B68EE}{W_{f}^{T}y_{n(t)}x_{n(t)}} \\\\\n    &\\geq W_{f}^{T}W_{t}+\\color{#007799}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}\\\\\n    &>W_{f}^{T}W_{t}\n\\end{aligned}\n\n\n\n\n\n\n\nNote\n\n\n\u6240\u4ee5\n{W_f}^{T}W_{t+1} > {W_f}^{T}W_t\n{W_f}^{T}W_{t+1} > {W_f}^{T}W_t\n\u610f\u601d\u662f\u7576\"\"\u5411\u91cf\u9577\u5ea6\u4e00\u6a23\"\"\u7684\u6642\u5019,\u5169\u500b\u5411\u91cf\u5167\u7a4d\u8d8a\u4f86\u8d8a\u5927\u4ee3\u8868\u8d8a\u63a5\u8fd1,\u4e5f\u5c31\u8b49\u660e\u4e86\nW_{t+1}\nW_{t+1}\n\u8d8a\u9760\u8fd1\u7b54\nW_f\nW_f\n\n\n\n\n\n\nProof 2\n\u00b6\n\n\n\u5df2\u77e5\ny_{n(t)}W_{t}^Tx_{n(t)}\\leq0\ny_{n(t)}W_{t}^Tx_{n(t)}\\leq0\n,\u56e0\u70ba\nW_{t}^T\nW_{t}^T\n\u6709\u932f\u6240\u4ee5\u6b63\u8ca0\u865f\u8ddf\ny_{n(t)}\ny_{n(t)}\n\u4e00\u5b9a\u4e0d\u540c\n\n\n\n\n\n\\begin{aligned}\n\\| W_{t+1} \\|^2&=\\|W_{t}+y_{n(t)}x_{n(t)}\\|^2 \\\\\n&=\\|W_{t}\\|^2+2y_{n(t)}W_{t}^{T}x_{n(t)}+\\|y_{n(t)}x_{n(t)}\\|^2\\\\\n&\\leq \\|W_{t}\\|^2+0+\\|y_{n(t)}x_{n(t)}\\|^2\\\\\n&\\leq \\|W_{t}\\|^2+\\underset{n}{max}\\|x_{n}\\|^2\n\\end{aligned}\n\n\n\n\n\\begin{aligned}\n\\| W_{t+1} \\|^2&=\\|W_{t}+y_{n(t)}x_{n(t)}\\|^2 \\\\\n&=\\|W_{t}\\|^2+2y_{n(t)}W_{t}^{T}x_{n(t)}+\\|y_{n(t)}x_{n(t)}\\|^2\\\\\n&\\leq \\|W_{t}\\|^2+0+\\|y_{n(t)}x_{n(t)}\\|^2\\\\\n&\\leq \\|W_{t}\\|^2+\\underset{n}{max}\\|x_{n}\\|^2\n\\end{aligned}\n\n\n\n\n\n\n\nFinally Proof\n\u00b6\n\n\n\n\nQuestion\n\n\n\n\n\\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}\\geq ?\n\n\n\\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}\\geq ?\n\n\n\n\n\n\nBy Proof  1:\n\n\n\n\n\n\\begin{aligned}\nW_{f}^{T}W_{X}&\\geq W_{f}^{T}W_{X-1}+\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\\n&\\geq W_{f}^{T}W_{0}+X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\\n&\\geq X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\n\\end{aligned}\n\n\n\n\n\\begin{aligned}\nW_{f}^{T}W_{X}&\\geq W_{f}^{T}W_{X-1}+\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\\n&\\geq W_{f}^{T}W_{0}+X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\\n&\\geq X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\n\\end{aligned}\n\n\n\n\n\nBy Proof  2:\n\n\n\n\n\n\\begin{aligned}\n\\|W_{X}\\|^2&\\leq \\|W_{X-1}\\|^2+\\underset{n}{max}\\|x_{n}\\|^2\\\\\n&\\leq \\|W_{0}\\|^2+X*\\underset{n}{max}\\|x_{n}\\|^2\\\\\n&\\leq X*\\underset{n}{max}\\|x_{n}\\|^2\n\\end{aligned}\n\n\n\n\n\\begin{aligned}\n\\|W_{X}\\|^2&\\leq \\|W_{X-1}\\|^2+\\underset{n}{max}\\|x_{n}\\|^2\\\\\n&\\leq \\|W_{0}\\|^2+X*\\underset{n}{max}\\|x_{n}\\|^2\\\\\n&\\leq X*\\underset{n}{max}\\|x_{n}\\|^2\n\\end{aligned}\n\n\n\n\n\nWe have\n\n\n\n\n\n\\begin{cases}\n W_{f}^{T}W_{X}\\geq X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\ \n \\|W_{X}\\|^2\\leq X*\\underset{n}{max}\\|x_{n}\\|^2\n\\end{cases}\n\n\n\n\n\\begin{cases}\n W_{f}^{T}W_{X}\\geq X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\ \n \\|W_{X}\\|^2\\leq X*\\underset{n}{max}\\|x_{n}\\|^2\n\\end{cases}\n\n\n\n\n\n\n\nWhen these two vector's angle is close to 0\n\n\n\n\n\n\\frac{ {W_{f}}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}\\approx 1\n\n\n\n\n\\frac{ {W_{f}}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}\\approx 1\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\\begin{aligned}\n\\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}&\\geq \\frac{X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}{\\|W_{f}\\|\\sqrt[]{X}*\\underset{n}{max}\\|x_{n}\\|}\\\\\n1&\\geq \\sqrt[]{X} *\\frac{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}{\\|W_{f}\\| * \\underset{n}{max}\\|x_{n}\\|}\n\\end{aligned}\n\n\n\n\n\\begin{aligned}\n\\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}&\\geq \\frac{X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}{\\|W_{f}\\|\\sqrt[]{X}*\\underset{n}{max}\\|x_{n}\\|}\\\\\n1&\\geq \\sqrt[]{X} *\\frac{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}{\\|W_{f}\\| * \\underset{n}{max}\\|x_{n}\\|}\n\\end{aligned}\n\n\n\n\n\n\n\n\n\nConclusion\n\u00b6\n\n\n\"So we know PLA Algorithm have upper bound of runing time \nX\nX\n\"\n\n\n\n\n\n{(\\frac{\\|W_{f}\\| * \\underset{n}{max}\\|x_{n}\\|}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}})}^2 \\geq X\n\n\n\n\n{(\\frac{\\|W_{f}\\| * \\underset{n}{max}\\|x_{n}\\|}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}})}^2 \\geq X\n\n\n\n\n\n\n\n\u8a72\u8b49\u660e\u5be6\u52d9\u4e0a\u7684\u7f3a\u9ede\n\n\n\u516c\u5f0f\u7b97\u4e0d\u51fa\u591a\u4e45\u6703\u505c \u56e0\u70ba\nW_f\nW_f\n\u662f\u672a\u77e5\u7684 ,\u6211\u5011\u53ea\u8b49\u660e\u51fa \u7576\u7dda\u6027\u53ef\u5206\u6642 pla\u6703\u505c \u6709\u4e0a\u9650, \u4f46\u4e0a\u9650\u591a\u5c11\u4e0d\u77e5\u9053\n\n\n\n\n\u7df4\u7fd2\u984c\n\u00b6",
            "title": "PLA(Classification)"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#placlassification",
            "text": "Perceptron Learning Algorithm",
            "title": "PLA(Classification)"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#type-of-this-sample",
            "text": "Output Space  Data Label  Protocol  Input Space      Binary Classification  Supervised  Online  Raw",
            "title": "Type Of this Sample"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#algorithm",
            "text": "\u627e\u5230\u4e00\u689d\u7dda\u80fd\u5206\u958b\u5169\u7a2e\u7d50\u679c  \u5982\u4f55\u4fee\u6539\u7dda           \u53ef\u4ee5\u5bb9\u932f\u662fpla\u8b8a\u5f62\u6f14\u7b97\u6cd5\u53ebpocket",
            "title": "Algorithm"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#implement-pla-classification",
            "text": "",
            "title": "Implement PLA (Classification)"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#sample-version",
            "text": "Code  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92 import   matplotlib.pyplot   as   plt  import   numpy   as   np  #\u7db2\u8def\u4e0a\u627e\u7684dataset \u53ef\u4ee5\u7dda\u6027\u5206\u5272  dataset   =   np . array ([  (( 1 ,   1 ,   5 ),   - 1 ),  (( 1 ,   2 ,   4 ),   - 1 ),  (( 1 ,   3 ,   3 ),   - 1 ),  (( 1 ,   4 ,   2 ),   - 1 ),  (( 1 ,   1 ,   6 ),   1 ),  (( 1 ,   2 ,   5 ),   1 ),  (( 1 ,   3 ,   4 ),   1 ),  (( 1 ,   4 ,   3 ),   1 )])  # 1 mean to display -c/b if c=0 i was error  # ax+by+c=0  #y=(-a/b)x+(-c/b)  #  #\u5224\u65b7\u6709\u6c92\u6709\u5206\u985e\u932f\u8aa4\uff0c\u4e26\u5217\u5370\u932f\u8aa4\u7387  def   check_error ( w ,   dataset ): \n     result   =   None \n     error   =   0 \n     for   x ,   s   in   dataset : \n         x   =   np . array ( x ) \n         print ( w . T . dot ( x )) \n         if   int ( np . sign ( w . T . dot ( x )))   !=   s : \n             #\u5e36\u5165ax+by+c=0 \u5982\u679c\u7b26\u865f\u4e0d\u76f8\u7b49\u4ee3\u8868\u6709\u932f\u8aa4 \n\n             # T transpose \n             result   =    x ,   s \n             error   +=   1 \n     print    ( \"error= %s / %s \"   %   ( error ,   len ( dataset ))) \n     return   result  #PLA\u6f14\u7b97\u6cd5\u5be6\u4f5c  #Cyclic PLA  def   pla ( dataset ): \n\n     #ax+by+c=0 \u7dda\u6027\u65b9\u7a0b\u5f0f\u7684\u6cd5\u5411\u91cf \n     w   =   np . zeros ( 3 ) #\u6cd5\u5411\u91cf \n     index = 0 \n     while   check_error ( w ,   dataset )   is   not   None : \n\n\n         x ,   s   =   check_error ( w ,   dataset )           w   +=   ( s )   *   x   #Algorithm kernel           #fig by algorithm(1).md \n         index = index + 1 \n\n     return   w  def   print_image ( w ): \n\n     #\u756b\u5716 \n     ps   =   [ v [ 0 ]   for   v   in   dataset ] \n     value   =   [ v [ 1 ]   for   v   in   dataset ] \n     fig   =   plt . figure () \n     ax1   =   fig . add_subplot ( 111 ) \n     #111 is control code 1 \n     #These are subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\". \n     #dataset\u524d\u534a\u5f8c\u534a\u5df2\u7d93\u5206\u5272\u597d \u76f4\u63a5\u756b\u5c31\u662f \n     index = 0 \n\n     max_x = ps [ 0 ][ 1 ] \n     min_x = ps [ 0 ][ 1 ] \n     for   v   in   value : \n         #print(index) \n         if   v > 0 : \n             ax1 . scatter ( ps [ index ][ 1 ], ps [ index ][ 2 ],   c = 'b' ,   marker = \"o\" ) \n         elif   v < 0 : \n             ax1 . scatter ( ps [ index ][ 1 ], ps [ index ][ 2 ]   ,   c = 'r' ,   marker = \"x\" ) \n         else : \n             pass \n         if   max_x < ps [ index ][ 1 ]: \n             max_x = ps [ index ][ 1 ] \n         if   min_x > ps [ index ][ 1 ]: \n             min_x = ps [ index ][ 1 ] \n         index = index + 1 \n\n     l   =   np . linspace ( min_x - 1 , max_x + 1 ) \n     #define the line x-axis size \n     a , b   =   - w [ 1 ] / w [ 2 ],   - w [ 0 ] / w [ 2 ] \n     #a=\u659c\u7387 b\u5e38\u6578 \n     ax1 . plot ( l ,   a * l   +   b ,   'b-' ) \n\n     plt . show ()  w   =   pla ( dataset )  print_image ( w )",
            "title": "sample version"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#optimizer-version",
            "text": "\u8017\u6642\u2153  Code   1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126 import   matplotlib.pyplot   as   plt  import   numpy   as   np  import   random  #\u7db2\u8def\u4e0a\u627e\u7684dataset \u53ef\u4ee5\u7dda\u6027\u5206\u5272  dataset   =   np . array ([  (( 1 ,   1.6 ,   5 ),   - 1 ),  (( 1 ,   2 ,   4 ),   - 1 ),  (( 1 ,   3 ,   3 ),   - 1 ),  (( 1 ,   4 ,   2 ),   - 1 ),  (( 1 ,   1 ,   6 ),   1 ),  (( 1 ,   2 ,   5 ),   1 ),  (( 1 ,   3 ,   4 ),   1 ),  (( 1 ,   4 ,   3 ),   1 )])  # 1 mean to display -c/b if c=0 i was error  # ax+by+c=0  #y=(-a/b)x+(-c/b)  #  #\u5224\u65b7\u6709\u6c92\u6709\u5206\u985e\u932f\u8aa4\uff0c\u4e26\u5217\u5370\u932f\u8aa4\u7387  bad = 0  def   check_error ( w ,   dataset ): \n     result   =   None \n     result = [] \n     error   =   0 \n     for   x ,   s   in   dataset : \n         x   =   np . array ( x ) \n         print ( w . T . dot ( x )) \n         if   int ( np . sign ( w . T . dot ( x )))   !=   s : \n             #\u5e36\u5165ax+by+c=0 \u5982\u679c\u7b26\u865f\u4e0d\u76f8\u7b49\u4ee3\u8868\u6709\u932f\u8aa4 \n\n             # T transpose \n             tem = [] \n             tem . append ( x ) \n\n             tem . append ( s ) \n\n             result . append ( tem ) \n\n             error   +=   1 \n     print    ( \"error= %s / %s \"   %   ( error ,   len ( dataset ))) \n     bad = error / len ( dataset ) \n\n     if   error == 0 : \n         result = None \n         return   result \n\n     #\u512a\u5316\u5340\u584a1 \u6bcf\u6b21\u9078\u64c7\u7684\u932f\u8aa4\u7528\u96a8\u6a5f\u6240\u4ee5\u4e0d\u6703\u4e00\u6a23  ##############################################       return   result [ random . randrange ( 0 , error ,   1 )]   #PLA\u6f14\u7b97\u6cd5\u5be6\u4f5c  #Cyclic PLA  def   pla ( dataset ): \n\n     #ax+by+c=0 \u7dda\u6027\u65b9\u7a0b\u5f0f \n     w   =   np . zeros ( 3 ) \n     ax , plt = print_image ( w ) \n     #print (w) \n\n     index = 0 \n     while   check_error ( w ,   dataset )   is   not   None : \n\n\n         x ,   s   =   check_error ( w ,   dataset ) \n         ##\u512a\u5316\u5340\u584a2 \u628abaise\u7528\u96a8\u6a5f \u8b93\u5b83\u8b8a\u52d5\u5feb\u9ede           x [ 0 ] = ( 1 - bad ) * x [ 0 ] * random . uniform ( 1 , 4 )           ############################################# \n         w   +=   ( s )   *   x \n         try : \n             ax . lines . remove ( lines [ 0 ]) \n         except   Exception : \n             pass \n         l   =   np . linspace ( 0 , 4 ) \n         #define the line x-axis size \n         a , b   =   - w [ 1 ] / w [ 2 ],   - w [ 0 ] / w [ 2 ] \n         #a=\u659c\u7387 b\u5e38\u6578 \n         lines = ax . plot ( l ,   a * l   +   b ,   'b-' ) \n         #plt.pause(0.1) \n\n         print   ( w ) \n         index = index + 1 \n     print   ( \"all run circel\" ) \n     print   ( index ) \n     plt . pause ( 111 ) \n     return   w  def   print_image ( w ): \n\n     #\u756b\u5716 \n     ps   =   [ v [ 0 ]   for   v   in   dataset ] \n     value   =   [ v [ 1 ]   for   v   in   dataset ] \n     fig   =   plt . figure () \n     ax1   =   fig . add_subplot ( 111 ) \n     #111 is control code 1 \n     #These are subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\". \n     #dataset\u524d\u534a\u5f8c\u534a\u5df2\u7d93\u5206\u5272\u597d \u76f4\u63a5\u756b\u5c31\u662f \n     index = 0 \n\n     max_x = ps [ 0 ][ 1 ] \n     min_x = ps [ 0 ][ 1 ] \n     for   v   in   value : \n         #print(index) \n         if   v > 0 : \n             ax1 . scatter ( ps [ index ][ 1 ], ps [ index ][ 2 ],   c = 'b' ,   marker = \"o\" ) \n         elif   v < 0 : \n             ax1 . scatter ( ps [ index ][ 1 ], ps [ index ][ 2 ]   ,   c = 'r' ,   marker = \"x\" ) \n         else : \n             pass \n         if   max_x < ps [ index ][ 1 ]: \n             max_x = ps [ index ][ 1 ] \n         if   min_x > ps [ index ][ 1 ]: \n             min_x = ps [ index ][ 1 ] \n         index = index + 1 \n\n     l   =   np . linspace ( min_x - 1 , max_x + 1 ) \n     #define the line x-axis size \n     a , b   =   - w [ 1 ] / w [ 2 ],   - w [ 0 ] / w [ 2 ] \n     #a=\u659c\u7387 b\u5e38\u6578 \n     ax1 . plot ( l ,   a * l   +   b ,   'b-' ) \n     plt . ion () \n     plt . show () \n     return   ax1 , plt  w   =   pla ( dataset )  print_image ( w )",
            "title": "Optimizer Version"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#pla",
            "text": "\u53c3\u8003\u7db2\u8def\u6559\u5b78   pla\u505c\u4e0d\u4e0b\u4f86 \u6709\u5169\u500b\u539f\u56e0   \u9084\u6c92\u8dd1\u5920  \u975e\u7dda\u6027\u53ef\u5206",
            "title": "\u8b49\u660e\u7dda\u6027\u53ef\u5206\u6642PLA\u6f14\u7b97\u6cd5\u6703\u505c"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#_1",
            "text": "W_{f}^{T}= W_{f}^{T}= \u771f\u5be6\u60f3\u6c42\u7684\u51fd\u6578(\u901a\u5e38\u672a\u77e5)  W_{X}= W_{X}= \u975e\u5e38\"\u63a5\u8fd1\u7b54\u6848\"\u7684\u51fd\u6578  \\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|} \\leq 1 \\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|} \\leq 1 \u5169\u500b\u6b63\u898f\u5316\u5411\u91cf\u7684\u5167\u7a4d\u6700\u5927\u70ba1  W_{t}= W_{t}= \u67d0\u4e00\u6642\u9593\u9ede\u7684\u7b54\u6848  W_{t+1}= W_{t+1}= \u8a72\u6642\u9593\u9ede\u66f4\u65b0\u5f8c\u7684\u7b54\u6848  y_{n}= {1,-1} y_{n}= {1,-1}  y=sing(ax+b) y=sing(ax+b) \u6539\u5beb\u6210 y_{n}=sing(W_{f}^{T}x_{n}) y_{n}=sing(W_{f}^{T}x_{n})  W_{t+1}=\\color{#0000FF}{W_{t}+y_{n(t)}x_{n(t)}} W_{t+1}=\\color{#0000FF}{W_{t}+y_{n(t)}x_{n(t)}} \u4fee\u6539\u5411\u91cf\u7684\u6f14\u7b97\u6cd5\u6838\u5fc3  X= X= \u7e3d\u5171\u9700\u8981\u4fee\u6539\u7684\u6b21\u6578",
            "title": "\u7b26\u865f\u89e3\u91cb"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#proof-1",
            "text": "\u5df2\u77e5 \\color{#7B68EE}{y_{n(t)}W_{f}^{T}x_{n(t)}}\\geq \\color{#007799}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}>0 \\color{#7B68EE}{y_{n(t)}W_{f}^{T}x_{n(t)}}\\geq \\color{#007799}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}>0 \u56e0\u70ba\u7dda\u4e0d\u80fd\u78b0\u5230\u9ede   \n\\begin{aligned}\n    W_{f}^{T}W_{t+1}&=W_{f}^{T}(\\color{#0000FF}{W_{t}+y_{n(t)}x_{n(t)}}) \\\\\n   &=W_{f}^{T}W_{t}+\\color{#7B68EE}{W_{f}^{T}y_{n(t)}x_{n(t)}} \\\\\n    &\\geq W_{f}^{T}W_{t}+\\color{#007799}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}\\\\\n    &>W_{f}^{T}W_{t}\n\\end{aligned}  \n\\begin{aligned}\n    W_{f}^{T}W_{t+1}&=W_{f}^{T}(\\color{#0000FF}{W_{t}+y_{n(t)}x_{n(t)}}) \\\\\n   &=W_{f}^{T}W_{t}+\\color{#7B68EE}{W_{f}^{T}y_{n(t)}x_{n(t)}} \\\\\n    &\\geq W_{f}^{T}W_{t}+\\color{#007799}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}\\\\\n    &>W_{f}^{T}W_{t}\n\\end{aligned}    Note  \u6240\u4ee5 {W_f}^{T}W_{t+1} > {W_f}^{T}W_t {W_f}^{T}W_{t+1} > {W_f}^{T}W_t \u610f\u601d\u662f\u7576\"\"\u5411\u91cf\u9577\u5ea6\u4e00\u6a23\"\"\u7684\u6642\u5019,\u5169\u500b\u5411\u91cf\u5167\u7a4d\u8d8a\u4f86\u8d8a\u5927\u4ee3\u8868\u8d8a\u63a5\u8fd1,\u4e5f\u5c31\u8b49\u660e\u4e86 W_{t+1} W_{t+1} \u8d8a\u9760\u8fd1\u7b54 W_f W_f",
            "title": "Proof 1"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#proof-2",
            "text": "\u5df2\u77e5 y_{n(t)}W_{t}^Tx_{n(t)}\\leq0 y_{n(t)}W_{t}^Tx_{n(t)}\\leq0 ,\u56e0\u70ba W_{t}^T W_{t}^T \u6709\u932f\u6240\u4ee5\u6b63\u8ca0\u865f\u8ddf y_{n(t)} y_{n(t)} \u4e00\u5b9a\u4e0d\u540c   \n\\begin{aligned}\n\\| W_{t+1} \\|^2&=\\|W_{t}+y_{n(t)}x_{n(t)}\\|^2 \\\\\n&=\\|W_{t}\\|^2+2y_{n(t)}W_{t}^{T}x_{n(t)}+\\|y_{n(t)}x_{n(t)}\\|^2\\\\\n&\\leq \\|W_{t}\\|^2+0+\\|y_{n(t)}x_{n(t)}\\|^2\\\\\n&\\leq \\|W_{t}\\|^2+\\underset{n}{max}\\|x_{n}\\|^2\n\\end{aligned}  \n\\begin{aligned}\n\\| W_{t+1} \\|^2&=\\|W_{t}+y_{n(t)}x_{n(t)}\\|^2 \\\\\n&=\\|W_{t}\\|^2+2y_{n(t)}W_{t}^{T}x_{n(t)}+\\|y_{n(t)}x_{n(t)}\\|^2\\\\\n&\\leq \\|W_{t}\\|^2+0+\\|y_{n(t)}x_{n(t)}\\|^2\\\\\n&\\leq \\|W_{t}\\|^2+\\underset{n}{max}\\|x_{n}\\|^2\n\\end{aligned}",
            "title": "Proof 2"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#finally-proof",
            "text": "Question   \\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}\\geq ?  \\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}\\geq ?    By Proof  1:   \n\\begin{aligned}\nW_{f}^{T}W_{X}&\\geq W_{f}^{T}W_{X-1}+\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\\n&\\geq W_{f}^{T}W_{0}+X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\\n&\\geq X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\n\\end{aligned}  \n\\begin{aligned}\nW_{f}^{T}W_{X}&\\geq W_{f}^{T}W_{X-1}+\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\\n&\\geq W_{f}^{T}W_{0}+X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\\n&\\geq X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\n\\end{aligned}   By Proof  2:   \n\\begin{aligned}\n\\|W_{X}\\|^2&\\leq \\|W_{X-1}\\|^2+\\underset{n}{max}\\|x_{n}\\|^2\\\\\n&\\leq \\|W_{0}\\|^2+X*\\underset{n}{max}\\|x_{n}\\|^2\\\\\n&\\leq X*\\underset{n}{max}\\|x_{n}\\|^2\n\\end{aligned}  \n\\begin{aligned}\n\\|W_{X}\\|^2&\\leq \\|W_{X-1}\\|^2+\\underset{n}{max}\\|x_{n}\\|^2\\\\\n&\\leq \\|W_{0}\\|^2+X*\\underset{n}{max}\\|x_{n}\\|^2\\\\\n&\\leq X*\\underset{n}{max}\\|x_{n}\\|^2\n\\end{aligned}   We have   \n\\begin{cases}\n W_{f}^{T}W_{X}\\geq X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\ \n \\|W_{X}\\|^2\\leq X*\\underset{n}{max}\\|x_{n}\\|^2\n\\end{cases}  \n\\begin{cases}\n W_{f}^{T}W_{X}\\geq X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}\\\\ \n \\|W_{X}\\|^2\\leq X*\\underset{n}{max}\\|x_{n}\\|^2\n\\end{cases}    When these two vector's angle is close to 0   \n\\frac{ {W_{f}}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}\\approx 1  \n\\frac{ {W_{f}}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}\\approx 1     Answer   \n\\begin{aligned}\n\\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}&\\geq \\frac{X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}{\\|W_{f}\\|\\sqrt[]{X}*\\underset{n}{max}\\|x_{n}\\|}\\\\\n1&\\geq \\sqrt[]{X} *\\frac{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}{\\|W_{f}\\| * \\underset{n}{max}\\|x_{n}\\|}\n\\end{aligned}  \n\\begin{aligned}\n\\frac{W_{f}^{T}}{\\|W_{f}\\|}\\frac{W_{X}}{\\|W_{X}\\|}&\\geq \\frac{X*\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}{\\|W_{f}\\|\\sqrt[]{X}*\\underset{n}{max}\\|x_{n}\\|}\\\\\n1&\\geq \\sqrt[]{X} *\\frac{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}}{\\|W_{f}\\| * \\underset{n}{max}\\|x_{n}\\|}\n\\end{aligned}",
            "title": "Finally Proof"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#conclusion",
            "text": "\"So we know PLA Algorithm have upper bound of runing time  X X \"   \n{(\\frac{\\|W_{f}\\| * \\underset{n}{max}\\|x_{n}\\|}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}})}^2 \\geq X  \n{(\\frac{\\|W_{f}\\| * \\underset{n}{max}\\|x_{n}\\|}{\\underset{n}{min}~y_{n}W_{f}^{T}x_{n}})}^2 \\geq X    \u8a72\u8b49\u660e\u5be6\u52d9\u4e0a\u7684\u7f3a\u9ede  \u516c\u5f0f\u7b97\u4e0d\u51fa\u591a\u4e45\u6703\u505c \u56e0\u70ba W_f W_f \u662f\u672a\u77e5\u7684 ,\u6211\u5011\u53ea\u8b49\u660e\u51fa \u7576\u7dda\u6027\u53ef\u5206\u6642 pla\u6703\u505c \u6709\u4e0a\u9650, \u4f46\u4e0a\u9650\u591a\u5c11\u4e0d\u77e5\u9053",
            "title": "Conclusion"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Classification)/#_2",
            "text": "",
            "title": "\u7df4\u7fd2\u984c"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Regression)/",
            "text": "PLA(Regression)\n\u00b6\n\n\nType Of this Sample\n\u00b6\n\n\n\n\n\n\n\n\nOutput Space\n\n\nData Label\n\n\nProtocol\n\n\nInput Space\n\n\n\n\n\n\n\n\n\n\nRegression\n\n\nSupervised\n\n\nOnline\n\n\nRaw\n\n\n\n\n\n\n\n\n\n\u8a72\u7bc4\u4f8b\u6c92\u6709\u4f7f\u7528Activation Function \u6240\u4ee5\u53ea\u80fd\u5b78\u7fd2\u7dda\u6027\n\n\nBackpropagation\n\u00b6\n\n\n\n\nImplement PLA(Regression)\n\u00b6\n\n\n\u8cc7\u6599=10x+5\n\u5617\u8a66\u8981\u8b93\u985e\u795e\u7d93\u85c9\u7531\u6578\u64dax\u8ddfy\u5b78\u5230\u56de\u6b78\u76f4\u7dda\n\u5b78\u7fd2\u6548\u7387\uff1a0.0000001(\u8b93\u901f\u5ea6\u6162\u4e00\u9ede\u597d\u986f\u793a)\n\n\nCode\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\nimport\n  \ntensorflow\n \nas\n \ntf\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nx_data\n=\nnp\n.\nlinspace\n(\n1\n,\n11\n,\n111\n)\n.\nastype\n(\nnp\n.\nfloat32\n)\n\n\n#x_data=np.random.rand(100).astype(np.float32)\n\n\ny_data\n=\n10\n*\nx_data\n+\n5\n\n\n\n\nWeights\n=\ntf\n.\nVariable\n(\ntf\n.\nzeros\n([\n1\n]))\n\n\n\nbiases\n=\ntf\n.\nVariable\n(\ntf\n.\nzeros\n([\n1\n]))\n\n\n\n\ny\n=\nWeights\n*\nx_data\n+\nbiases\n\n\n\n#loss = tf.reduce_mean(tf.square(y-y_data))#\u7528\u6700\u5c0f\u5e73\u65b9\u6cd5 \u53ef\u4ee5\u6c42\u51fa\u56de\u6b78\u76f4\u7dda \u4e0d\u80fd\u4e82\u7528\n\n\n\nloss\n=\ntf\n.\nreduce_mean\n(\ntf\n.\nreduce_sum\n(\ntf\n.\nsquare\n(\ny\n-\ny_data\n)))\n\n\n#************Optimizer*********\n\n\n#****MomentumOptimizer\n\n\n#optimizer=tf.train.MomentumOptimizer(0.1,0.2)#\u68af\u5ea6\u4e0b\u964d\u6cd5 Gradient descent\n\n\n\n\noptimizer\n=\ntf\n.\ntrain\n.\nGradientDescentOptimizer\n(\n0.0000001\n)\n\n\n\n\ntrain\n \n=\noptimizer\n.\nminimize\n(\nloss\n)\n\n\n\ninit\n=\ntf\n.\nglobal_variables_initializer\n()\n\n\n\nsess\n=\ntf\n.\nSession\n()\n\n\nsess\n.\nrun\n(\ninit\n)\n\n\n\n#*********** for plt\n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n1\n,\n1\n,\n1\n)\n\n\nax\n.\nscatter\n(\nx_data\n,\n \ny_data\n,\ncolor\n=\n\"green\"\n)\n\n\nlines\n \n=\n \nax\n.\nplot\n(\n3\n,\n \n3\n,\n \n'r-'\n,\n \nlw\n=\n1\n)\n\n\nax\n.\nlegend\n(\nlabels\n=\n[\n'prediction line'\n,\n'y=10x+5'\n],\nloc\n=\n'best'\n)\n\n\nplt\n.\nion\n()\n\n\nplt\n.\nshow\n()\n\n\nplt\n.\npause\n(\n2.5\n)\n\n\nfor\n \nstep\n \nin\n \nrange\n(\n20000\n):\n\n    \nif\n \nstep\n \n%\n \n100\n \n==\n \n0\n:\n\n        \n# \u53ea\u662f\u986f\u793a\u53c3\u6578\n\n        \ntry\n:\n\n            \nax\n.\nlines\n.\nremove\n(\nlines\n[\n0\n])\n\n        \nexcept\n \nException\n:\n\n            \npass\n\n        \nprint\n(\nstep\n,\n \nsess\n.\nrun\n(\nWeights\n),\n \nsess\n.\nrun\n(\nbiases\n),\n \nsess\n.\nrun\n(\nloss\n))\n\n        \n#for plt\n\n\n        \nlines\n \n=\n \nax\n.\nplot\n(\nx_data\n,\n \nsess\n.\nrun\n(\ny\n),\n \n'r-'\n,\n \nlw\n=\n1\n)\n\n        \nplt\n.\npause\n(\n1\n)\n\n\n\n    \nsess\n.\nrun\n(\ntrain\n)\n  \n# \u771f\u6b63\u8a13\u7df4",
            "title": "PLA(Regression)"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Regression)/#plaregression",
            "text": "",
            "title": "PLA(Regression)"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Regression)/#type-of-this-sample",
            "text": "Output Space  Data Label  Protocol  Input Space      Regression  Supervised  Online  Raw     \n\u8a72\u7bc4\u4f8b\u6c92\u6709\u4f7f\u7528Activation Function \u6240\u4ee5\u53ea\u80fd\u5b78\u7fd2\u7dda\u6027",
            "title": "Type Of this Sample"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Regression)/#backpropagation",
            "text": "",
            "title": "Backpropagation"
        },
        {
            "location": "/Machine Learning/Neural Networks/PLA/PLA(Regression)/#implement-plaregression",
            "text": "\u8cc7\u6599=10x+5\n\u5617\u8a66\u8981\u8b93\u985e\u795e\u7d93\u85c9\u7531\u6578\u64dax\u8ddfy\u5b78\u5230\u56de\u6b78\u76f4\u7dda\n\u5b78\u7fd2\u6548\u7387\uff1a0.0000001(\u8b93\u901f\u5ea6\u6162\u4e00\u9ede\u597d\u986f\u793a)  Code  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58 import    tensorflow   as   tf  import   numpy   as   np  import   matplotlib.pyplot   as   plt  x_data = np . linspace ( 1 , 11 , 111 ) . astype ( np . float32 )  #x_data=np.random.rand(100).astype(np.float32)  y_data = 10 * x_data + 5  Weights = tf . Variable ( tf . zeros ([ 1 ]))  biases = tf . Variable ( tf . zeros ([ 1 ]))  y = Weights * x_data + biases  #loss = tf.reduce_mean(tf.square(y-y_data))#\u7528\u6700\u5c0f\u5e73\u65b9\u6cd5 \u53ef\u4ee5\u6c42\u51fa\u56de\u6b78\u76f4\u7dda \u4e0d\u80fd\u4e82\u7528  loss = tf . reduce_mean ( tf . reduce_sum ( tf . square ( y - y_data )))  #************Optimizer*********  #****MomentumOptimizer  #optimizer=tf.train.MomentumOptimizer(0.1,0.2)#\u68af\u5ea6\u4e0b\u964d\u6cd5 Gradient descent  optimizer = tf . train . GradientDescentOptimizer ( 0.0000001 )  train   = optimizer . minimize ( loss )  init = tf . global_variables_initializer ()  sess = tf . Session ()  sess . run ( init )  #*********** for plt  fig   =   plt . figure ()  ax   =   fig . add_subplot ( 1 , 1 , 1 )  ax . scatter ( x_data ,   y_data , color = \"green\" )  lines   =   ax . plot ( 3 ,   3 ,   'r-' ,   lw = 1 )  ax . legend ( labels = [ 'prediction line' , 'y=10x+5' ], loc = 'best' )  plt . ion ()  plt . show ()  plt . pause ( 2.5 )  for   step   in   range ( 20000 ): \n     if   step   %   100   ==   0 : \n         # \u53ea\u662f\u986f\u793a\u53c3\u6578 \n         try : \n             ax . lines . remove ( lines [ 0 ]) \n         except   Exception : \n             pass \n         print ( step ,   sess . run ( Weights ),   sess . run ( biases ),   sess . run ( loss )) \n         #for plt \n\n         lines   =   ax . plot ( x_data ,   sess . run ( y ),   'r-' ,   lw = 1 ) \n         plt . pause ( 1 ) \n\n\n     sess . run ( train )    # \u771f\u6b63\u8a13\u7df4",
            "title": "Implement PLA(Regression)"
        },
        {
            "location": "/Machine Learning/Neural Networks/RNN/RNN/",
            "text": "RNN\n\u00b6",
            "title": "RNN"
        },
        {
            "location": "/Machine Learning/Neural Networks/RNN/RNN/#rnn",
            "text": "",
            "title": "RNN"
        },
        {
            "location": "/Machine Learning/Neural Networks/\u624b\u5de5\u6253\u9020/Introduction/",
            "text": "\u539f\u56e0\n\u00b6\n\n\n\u8cc7\u6599\u5b78\u7fd2\u4f86\u6e90 (source):\n\u6539\u7de8\u4e26\u5b78\u7fd2\u81ea\nAndrej Karpathy blog\njs\u5167\u5bb9\n\n\n\u5be6\u73fe\u65b9\u6cd5\n\n\n\n\nC\n\n\nCUDA\n\n\n\n\n\u6df7\u548cc and cuda \u6253\u9020",
            "title": "Introduction"
        },
        {
            "location": "/Machine Learning/Neural Networks/\u624b\u5de5\u6253\u9020/Introduction/#_1",
            "text": "\u8cc7\u6599\u5b78\u7fd2\u4f86\u6e90 (source):\n\u6539\u7de8\u4e26\u5b78\u7fd2\u81ea Andrej Karpathy blog js\u5167\u5bb9  \u5be6\u73fe\u65b9\u6cd5   C  CUDA   \u6df7\u548cc and cuda \u6253\u9020",
            "title": "\u539f\u56e0"
        },
        {
            "location": "/Machine Learning/Regression/Introduction/",
            "text": "Logistics Regression\n\u00b6\n\n\nodd()",
            "title": "Logistics Regression"
        },
        {
            "location": "/Machine Learning/Regression/Introduction/#logistics-regression",
            "text": "odd()",
            "title": "Logistics Regression"
        },
        {
            "location": "/\u91d1\u878d/\u4ea4\u6613\u8056\u7d93/",
            "text": "\u4ea4\u6613\u8056\u7d93\n\u00b6\n\n\n1.Bankruptcy risk\n\u00b6\n\n\n\u7834\u7522\u98a8\u96aa\n\n\n\n\n\n\\left[\\frac{[1-(W-L)]}{ [1+(W-L)]} \\right]^U\n\n\n\n\n\\left[\\frac{[1-(W-L)]}{ [1+(W-L)]} \\right]^U\n\n\n\n\n\nW:\u52dd\u7387\n\nL:1-W\n\nU:\u8cc7\u91d1\u55ae\u4f4d\u6578 sample: \u8cc7\u91d1100 \u6bcf\u6b21\u6295\u6ce85 \u8cc7\u91d1\u4f4d\u6578\uff1a20 \n\n\n\n\n\u964d\u4f4e\u7834\u7522\u98a8\u96aa\n\n\n\n\n\u964d\u4f4e\u55ae\u4e00\u8cc7\u91d1\u91d1\u984d\n\n\n\u63d0\u6607\u4ea4\u6613\u65b9\u6cd5\u6e96\u78ba\u5ea6\n\n\n\u6539\u5584\u76f8\u5c0d\u5831\u511f\u6bd4\u7387(\u5e73\u5747\u7372\u5229\u76f8\u5c0d\u65bc\u8667\u640d\u6bd4\u7387)\n\n\n\n\n\n\n\u53ef\u4ee5\u5f59\u7e3d\u6210 \u8cc7\u91d1\u7ba1\u7406&\u671f\u671b\u503c\n\n\n2.\u671f\u671b\u503c\n\u00b6\n\n\n\n\n\n\\left[\u7372\u5229\u6a5f\u7387 \\times \\frac{\u5e73\u5747\u7372\u5229}{ \u5e73\u5747\u8667\u640d} \\right]-\\left[\u8667\u640d\u6a5f\u7387 \\times \\frac{\u5e73\u5747\u8667\u640d}{ \u5e73\u5747\u8667\u640d} \\right]\n\n\n\n\n\\left[\u7372\u5229\u6a5f\u7387 \\times \\frac{\u5e73\u5747\u7372\u5229}{ \u5e73\u5747\u8667\u640d} \\right]-\\left[\u8667\u640d\u6a5f\u7387 \\times \\frac{\u5e73\u5747\u8667\u640d}{ \u5e73\u5747\u8667\u640d} \\right]\n\n\n\n\n\n\u671f\u671b\u503c\u4e00\u6a23\u4f46\u7834\u7522\u98a8\u96aa\u8d8a\u4f4e\u8d8a\u597d",
            "title": "\u4ea4\u6613\u8056\u7d93"
        },
        {
            "location": "/\u91d1\u878d/\u4ea4\u6613\u8056\u7d93/#_1",
            "text": "",
            "title": "\u4ea4\u6613\u8056\u7d93"
        },
        {
            "location": "/\u91d1\u878d/\u4ea4\u6613\u8056\u7d93/#1bankruptcy-risk",
            "text": "\u7834\u7522\u98a8\u96aa   \n\\left[\\frac{[1-(W-L)]}{ [1+(W-L)]} \\right]^U  \n\\left[\\frac{[1-(W-L)]}{ [1+(W-L)]} \\right]^U   W:\u52dd\u7387 \nL:1-W \nU:\u8cc7\u91d1\u55ae\u4f4d\u6578 sample: \u8cc7\u91d1100 \u6bcf\u6b21\u6295\u6ce85 \u8cc7\u91d1\u4f4d\u6578\uff1a20    \u964d\u4f4e\u7834\u7522\u98a8\u96aa   \u964d\u4f4e\u55ae\u4e00\u8cc7\u91d1\u91d1\u984d  \u63d0\u6607\u4ea4\u6613\u65b9\u6cd5\u6e96\u78ba\u5ea6  \u6539\u5584\u76f8\u5c0d\u5831\u511f\u6bd4\u7387(\u5e73\u5747\u7372\u5229\u76f8\u5c0d\u65bc\u8667\u640d\u6bd4\u7387)    \u53ef\u4ee5\u5f59\u7e3d\u6210 \u8cc7\u91d1\u7ba1\u7406&\u671f\u671b\u503c",
            "title": "1.Bankruptcy risk"
        },
        {
            "location": "/\u91d1\u878d/\u4ea4\u6613\u8056\u7d93/#2",
            "text": "\\left[\u7372\u5229\u6a5f\u7387 \\times \\frac{\u5e73\u5747\u7372\u5229}{ \u5e73\u5747\u8667\u640d} \\right]-\\left[\u8667\u640d\u6a5f\u7387 \\times \\frac{\u5e73\u5747\u8667\u640d}{ \u5e73\u5747\u8667\u640d} \\right]  \n\\left[\u7372\u5229\u6a5f\u7387 \\times \\frac{\u5e73\u5747\u7372\u5229}{ \u5e73\u5747\u8667\u640d} \\right]-\\left[\u8667\u640d\u6a5f\u7387 \\times \\frac{\u5e73\u5747\u8667\u640d}{ \u5e73\u5747\u8667\u640d} \\right]   \u671f\u671b\u503c\u4e00\u6a23\u4f46\u7834\u7522\u98a8\u96aa\u8d8a\u4f4e\u8d8a\u597d",
            "title": "2.\u671f\u671b\u503c"
        }
    ]
}